// This file is auto-generated by @hey-api/openapi-ts

import type {
	CreateCastResponse,
	GetApiKeysResponse,
	GetCastsByFidResponse,
	GetCreatorRewardWinnersResponse,
	GetDirectCastConversationMessagesResponse,
	GetDirectCastConversationRecentMessagesResponse,
	GetDirectCastConversationResponse,
	GetDirectCastInboxResponse,
	GetFeedItemsResponse,
	GetMiniAppAnalyticsRollupResponse,
	GetProfileCastsResponse,
	GetStarterPackMembersResponse,
	GetUserLikedCastsResponse,
} from "./types.gen";

export const getDirectCastInboxResponseTransformer = async (
	data: any,
): Promise<GetDirectCastInboxResponse> => {
	data = directCastInboxResponseSchemaResponseTransformer(data);
	return data;
};

const directCastInboxResponseSchemaResponseTransformer = (data: any) => {
	data.result = directCastInboxResultSchemaResponseTransformer(data.result);
	return data;
};

const directCastInboxResultSchemaResponseTransformer = (data: any) => {
	data.conversations = data.conversations.map((item: any) => {
		return directCastConversationSchemaResponseTransformer(item);
	});
	return data;
};

const directCastConversationSchemaResponseTransformer = (data: any) => {
	data.lastReadTime = BigInt(data.lastReadTime.toString());
	if (data.selfLastReadTime) {
		data.selfLastReadTime = BigInt(data.selfLastReadTime.toString());
	}
	if (data.pinnedMessages) {
		data.pinnedMessages = data.pinnedMessages.map((item: any) => {
			return directCastMessageSchemaResponseTransformer(item);
		});
	}
	data.createdAt = BigInt(data.createdAt.toString());
	if (data.lastMessage) {
		data.lastMessage = directCastMessageSchemaResponseTransformer(
			data.lastMessage,
		);
	}
	data.viewerContext =
		directCastConversationViewerContextSchemaResponseTransformer(
			data.viewerContext,
		);
	return data;
};

const directCastMessageSchemaResponseTransformer = (data: any) => {
	data.serverTimestamp = BigInt(data.serverTimestamp.toString());
	if (data.inReplyTo) {
		data.inReplyTo = directCastMessageSchemaResponseTransformer(data.inReplyTo);
	}
	return data;
};

const directCastConversationViewerContextSchemaResponseTransformer = (
	data: any,
) => {
	if (data.lastReadAt) {
		data.lastReadAt = BigInt(data.lastReadAt.toString());
	}
	return data;
};

export const getFeedItemsResponseTransformer = async (
	data: any,
): Promise<GetFeedItemsResponse> => {
	data = feedItemsResponseSchemaResponseTransformer(data);
	return data;
};

const feedItemsResponseSchemaResponseTransformer = (data: any) => {
	data.result.items = data.result.items.map((item: any) => {
		item.cast = castSchemaResponseTransformer(item.cast);
		return item;
	});
	return data;
};

const castSchemaResponseTransformer = (data: any) => {
	data.timestamp = BigInt(data.timestamp.toString());
	return data;
};

export const getDirectCastConversationResponseTransformer = async (
	data: any,
): Promise<GetDirectCastConversationResponse> => {
	data = directCastConversationResponseSchemaResponseTransformer(data);
	return data;
};

const directCastConversationResponseSchemaResponseTransformer = (data: any) => {
	if (data.result) {
		data.result.conversation = directCastConversationSchemaResponseTransformer(
			data.result.conversation,
		);
	}
	return data;
};

export const getDirectCastConversationMessagesResponseTransformer = async (
	data: any,
): Promise<GetDirectCastConversationMessagesResponse> => {
	data = directCastConversationMessagesResponseSchemaResponseTransformer(data);
	return data;
};

const directCastConversationMessagesResponseSchemaResponseTransformer = (
	data: any,
) => {
	if (data.result) {
		data.result.messages = data.result.messages.map((item: any) => {
			return directCastMessageSchemaResponseTransformer(item);
		});
	}
	return data;
};

export const getDirectCastConversationRecentMessagesResponseTransformer =
	async (
		data: any,
	): Promise<GetDirectCastConversationRecentMessagesResponse> => {
		data =
			directCastConversationMessagesResponseSchemaResponseTransformer(data);
		return data;
	};

export const getCastsByFidResponseTransformer = async (
	data: any,
): Promise<GetCastsByFidResponse> => {
	if (data.result) {
		if (data.result.casts) {
			data.result.casts = data.result.casts.map((item: any) => {
				return castSchemaResponseTransformer(item);
			});
		}
	}
	return data;
};

export const createCastResponseTransformer = async (
	data: any,
): Promise<CreateCastResponse> => {
	data = castCreatedResponseSchemaResponseTransformer(data);
	return data;
};

const castCreatedResponseSchemaResponseTransformer = (data: any) => {
	if (data.result) {
		if (data.result.cast) {
			data.result.cast = castSchemaResponseTransformer(data.result.cast);
		}
	}
	return data;
};

export const getCreatorRewardWinnersResponseTransformer = async (
	data: any,
): Promise<GetCreatorRewardWinnersResponse> => {
	if (data.result) {
		if (data.result.periodStartTimestamp) {
			data.result.periodStartTimestamp = BigInt(
				data.result.periodStartTimestamp.toString(),
			);
		}
		if (data.result.periodEndTimestamp) {
			data.result.periodEndTimestamp = BigInt(
				data.result.periodEndTimestamp.toString(),
			);
		}
	}
	return data;
};

export const getStarterPackMembersResponseTransformer = async (
	data: any,
): Promise<GetStarterPackMembersResponse> => {
	if (data.result) {
		if (data.result.members) {
			data.result.members = data.result.members.map((item: any) => {
				item.memberAt = BigInt(item.memberAt.toString());
				return item;
			});
		}
	}
	return data;
};

export const getApiKeysResponseTransformer = async (
	data: any,
): Promise<GetApiKeysResponse> => {
	data.result.apiKeys = data.result.apiKeys.map((item: any) => {
		return apiKeySchemaResponseTransformer(item);
	});
	return data;
};

const apiKeySchemaResponseTransformer = (data: any) => {
	data.createdAt = BigInt(data.createdAt.toString());
	data.expiresAt = BigInt(data.expiresAt.toString());
	return data;
};

export const getProfileCastsResponseTransformer = async (
	data: any,
): Promise<GetProfileCastsResponse> => {
	data.result.casts = data.result.casts.map((item: any) => {
		return castSchemaResponseTransformer(item);
	});
	return data;
};

export const getUserLikedCastsResponseTransformer = async (
	data: any,
): Promise<GetUserLikedCastsResponse> => {
	if (data.result.casts) {
		data.result.casts = data.result.casts.map((item: any) => {
			return castSchemaResponseTransformer(item);
		});
	}
	return data;
};

export const getMiniAppAnalyticsRollupResponseTransformer = async (
	data: any,
): Promise<GetMiniAppAnalyticsRollupResponse> => {
	if (data.result) {
		if (data.result.rollup) {
			if (data.result.rollup.dateRange) {
				if (data.result.rollup.dateRange.startDate) {
					data.result.rollup.dateRange.startDate = new Date(
						data.result.rollup.dateRange.startDate,
					);
				}
				if (data.result.rollup.dateRange.endDate) {
					data.result.rollup.dateRange.endDate = new Date(
						data.result.rollup.dateRange.endDate,
					);
				}
			}
		}
	}
	return data;
};
