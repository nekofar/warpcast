// This file is auto-generated by @hey-api/openapi-ts

import type {
  AcceptChannelInviteResponse,
  AddDirectCastMessageReactionResponse,
  AttachEmbedsResponse2,
  BanUserFromChannelResponse,
  BlockUserResponse,
  CategorizeDirectCastConversationResponse,
  CheckUserChannelFollowStatusResponse,
  CreateCastResponse,
  CreateDraftCastsResponse,
  DeleteCastResponse,
  DeleteDraftCastResponse,
  DirectCastManuallyMarkUnreadResponse,
  DiscoverChannelsResponse2,
  FollowChannelResponse,
  GetAccountVerificationsResponse,
  GetAllChannelsResponse,
  GetApiKeysResponse,
  GetAppsByAuthorResponse,
  GetAvailableInvitesResponse,
  GetBlockedUsersResponse,
  GetBookmarkedCastsResponse,
  GetCastLikesResponse,
  GetCastQuotesResponse,
  GetCastRecastersResponse,
  GetCastsByFidResponse,
  GetChannelDetailsResponse,
  GetChannelFollowersResponse,
  GetChannelFollowersYouKnowResponse,
  GetChannelResponse,
  GetChannelStreaksForUserResponse,
  GetChannelUsersResponse,
  GetCreatorRewardWinnersResponse,
  GetCurrentUserResponse,
  GetDeveloperRewardWinnersResponse,
  GetDirectCastConversationMessagesResponse,
  GetDirectCastConversationRecentMessagesResponse,
  GetDirectCastConversationResponse,
  GetDirectCastInboxResponse,
  GetDiscoverableActionsResponse,
  GetDiscoverableComposerActionsResponse,
  GetDraftCastsResponse,
  GetFeedItemsResponse,
  GetFollowersResponse,
  GetFollowingResponse,
  GetHighlightedChannelsResponse,
  GetMiniAppAnalyticsRollupResponse,
  GetMutedKeywordsResponse,
  GetMutualFollowersResponse,
  GetNotificationsResponse,
  GetProfileCastsResponse,
  GetRewardsLeaderboardResponse,
  GetRewardsMetadataResponse,
  GetSponsoredInvitesResponse,
  GetStarterPackMembersResponse,
  GetStarterPackResponse,
  GetStarterPackUsersResponse,
  GetSuggestedStarterPacksResponse,
  GetSuggestedUsersResponse,
  GetTopFrameAppsResponse,
  GetTopMiniAppsResponse,
  GetUnseenCountsResponse,
  GetUserAppContextResponse,
  GetUserByFidResponse,
  GetUserByUsernameResponse,
  GetUserByVerificationAddressResponse,
  GetUserFavoriteFramesResponse,
  GetUserFollowedChannelsResponse,
  GetUserFollowingChannelsResponse,
  GetUserLikedCastsResponse,
  GetUserOnboardingStateResponse,
  GetUserPreferencesResponse,
  GetUserPrimaryAddressesResponse,
  GetUserPrimaryAddressResponse,
  GetUserResponse,
  GetUserRewardsScoresResponse,
  GetUserStarterPacksResponse,
  GetUserThreadCastsResponse,
  GetVerificationsResponse,
  InviteUserToChannelResponse,
  LikeCastResponse,
  MarkAllNotificationsReadResponse,
  ModerateCastResponse,
  MuteKeywordResponse,
  PinCastToChannelResponse,
  PinDirectCastConversationResponse,
  RecastCastResponse,
  RemoveChannelInviteResponse,
  RemoveDirectCastMessageReactionResponse,
  SearchChannelsResponse2,
  SendDirectCastMessageResponse,
  SetDirectCastConversationMessageTtlResponse,
  SetLastCheckedTimestampResponse,
  SubmitAnalyticsEventsResponse,
  UnbanUserFromChannelResponse,
  UndoRecastResponse,
  UnfollowChannelResponse,
  UnmuteKeywordResponse,
  UnpinCastFromChannelResponse,
  UnpinDirectCastConversationResponse,
  UpdateDirectCastConversationNotificationsResponse,
  UpdateStarterPackResponse,
} from "./types.gen";

const onboardingStateResponseSchemaResponseTransformer = (data: any) => {
  if (data.result) {
    if (data.result.state) {
      data.result.state = onboardingStateSchemaResponseTransformer(
        data.result.state,
      );
    }
  }
  return data;
};

const onboardingStateSchemaResponseTransformer = (data: any) => {
  if (data.user) {
    data.user = userSchemaResponseTransformer(data.user);
  }
  return data;
};

const userSchemaResponseTransformer = (data: any) => {
  if (data.pfp) {
    data.pfp = profilePictureSchemaResponseTransformer(data.pfp);
  }
  if (data.profile) {
    data.profile = profileSchemaResponseTransformer(data.profile);
  }
  if (data.viewerContext) {
    data.viewerContext = viewerContextSchemaResponseTransformer(
      data.viewerContext,
    );
  }
  return data;
};

const profileSchemaResponseTransformer = (data: any) => {
  if (data.bio) {
    data.bio = bioSchemaResponseTransformer(data.bio);
  }
  if (data.location) {
    data.location = locationSchemaResponseTransformer(data.location);
  }
  return data;
};

export const getUserOnboardingStateResponseTransformer = async (
  data: any,
): Promise<GetUserOnboardingStateResponse> => {
  data = onboardingStateResponseSchemaResponseTransformer(data);
  return data;
};

const userByFidResponseSchemaResponseTransformer = (data: any) => {
  if (data.result) {
    if (data.result.user) {
      data.result.user = userWithExtrasSchemaResponseTransformer(
        data.result.user,
      );
    }
    if (data.result.extras) {
      data.result.extras = userExtrasSchemaResponseTransformer(
        data.result.extras,
      );
    }
  }
  return data;
};

const userWithExtrasSchemaResponseTransformer = (data: any) => {
  data = userSchemaResponseTransformer(data);
  return data;
};

export const getUserByFidResponseTransformer = async (
  data: any,
): Promise<GetUserByFidResponse> => {
  data = userByFidResponseSchemaResponseTransformer(data);
  return data;
};

const directCastInboxResponseSchemaResponseTransformer = (data: any) => {
  data.result = directCastInboxResultSchemaResponseTransformer(data.result);
  if (data.next) {
    data.next = paginationCursorSchemaResponseTransformer(data.next);
  }
  return data;
};

const directCastInboxResultSchemaResponseTransformer = (data: any) => {
  data.conversations = data.conversations.map((item: any) => {
    return directCastConversationSchemaResponseTransformer(item);
  });
  return data;
};

const directCastConversationSchemaResponseTransformer = (data: any) => {
  if (data.participants) {
    data.participants = data.participants.map((item: any) => {
      return userSchemaResponseTransformer(item);
    });
  }
  data.lastReadTime = BigInt(data.lastReadTime.toString());
  if (data.selfLastReadTime) {
    data.selfLastReadTime = BigInt(data.selfLastReadTime.toString());
  }
  if (data.pinnedMessages) {
    data.pinnedMessages = data.pinnedMessages.map((item: any) => {
      return directCastMessageSchemaResponseTransformer(item);
    });
  }
  data.createdAt = BigInt(data.createdAt.toString());
  if (data.lastMessage) {
    data.lastMessage = directCastMessageSchemaResponseTransformer(
      data.lastMessage,
    );
  }
  data.viewerContext =
    directCastConversationViewerContextSchemaResponseTransformer(
      data.viewerContext,
    );
  return data;
};

const directCastMessageSchemaResponseTransformer = (data: any) => {
  data.serverTimestamp = BigInt(data.serverTimestamp.toString());
  data.reactions = data.reactions.map((item: any) => {
    return directCastMessageReactionSchemaResponseTransformer(item);
  });
  data.senderContext = userSchemaResponseTransformer(data.senderContext);
  if (data.viewerContext) {
    data.viewerContext =
      directCastMessageViewerContextSchemaResponseTransformer(
        data.viewerContext,
      );
  }
  if (data.inReplyTo) {
    data.inReplyTo = directCastMessageSchemaResponseTransformer(data.inReplyTo);
  }
  if (data.metadata) {
    data.metadata = directCastMessageMetadataSchemaResponseTransformer(
      data.metadata,
    );
  }
  if (data.actionTargetUserContext) {
    data.actionTargetUserContext = userSchemaResponseTransformer(
      data.actionTargetUserContext,
    );
  }
  if (data.mentions) {
    data.mentions = data.mentions.map((item: any) => {
      return directCastMessageMentionSchemaResponseTransformer(item);
    });
  }
  return data;
};

const directCastMessageMentionSchemaResponseTransformer = (data: any) => {
  data.user = userSchemaResponseTransformer(data.user);
  return data;
};

const directCastConversationViewerContextSchemaResponseTransformer = (
  data: any,
) => {
  if (data.lastReadAt) {
    data.lastReadAt = BigInt(data.lastReadAt.toString());
  }
  if (data.counterParty) {
    data.counterParty = userSchemaResponseTransformer(data.counterParty);
  }
  return data;
};

export const getDirectCastInboxResponseTransformer = async (
  data: any,
): Promise<GetDirectCastInboxResponse> => {
  data = directCastInboxResponseSchemaResponseTransformer(data);
  return data;
};

const userAppContextResponseSchemaResponseTransformer = (data: any) => {
  if (data.result) {
    if (data.result.context) {
      if (data.result.context.castActions) {
        data.result.context.castActions = data.result.context.castActions.map(
          (item: any) => {
            return castActionSchemaResponseTransformer(item);
          },
        );
      }
      if (data.result.context.enabledCastAction) {
        data.result.context.enabledCastAction =
          castActionSchemaResponseTransformer(
            data.result.context.enabledCastAction,
          );
      }
    }
  }
  return data;
};

export const getUserAppContextResponseTransformer = async (
  data: any,
): Promise<GetUserAppContextResponse> => {
  data = userAppContextResponseSchemaResponseTransformer(data);
  return data;
};

export const getUserPreferencesResponseTransformer = async (
  data: any,
): Promise<GetUserPreferencesResponse> => {
  data = userPreferencesResponseSchemaResponseTransformer(data);
  return data;
};

const highlightedChannelsResponseSchemaResponseTransformer = (data: any) => {
  if (data.result) {
    if (data.result.channels) {
      data.result.channels = data.result.channels.map((item: any) => {
        return channelSchemaResponseTransformer(item);
      });
    }
  }
  return data;
};

export const getHighlightedChannelsResponseTransformer = async (
  data: any,
): Promise<GetHighlightedChannelsResponse> => {
  data = highlightedChannelsResponseSchemaResponseTransformer(data);
  return data;
};

const feedItemsResponseSchemaResponseTransformer = (data: any) => {
  data.result.items = data.result.items.map((item: any) => {
    item.cast = castSchemaResponseTransformer(item.cast);
    if (item.otherParticipants) {
      item.otherParticipants = item.otherParticipants.map((item: any) => {
        return userSchemaResponseTransformer(item);
      });
    }
    return item;
  });
  return data;
};

const castSchemaResponseTransformer = (data: any) => {
  data.author = userSchemaResponseTransformer(data.author);
  data.timestamp = BigInt(data.timestamp.toString());
  if (data.mentions) {
    data.mentions = data.mentions.map((item: any) => {
      return userSchemaResponseTransformer(item);
    });
  }
  if (data.embeds) {
    if (data.embeds.images) {
      data.embeds.images = data.embeds.images.map((item: any) => {
        return imageEmbedSchemaResponseTransformer(item);
      });
    }
    if (data.embeds.urls) {
      data.embeds.urls = data.embeds.urls.map((item: any) => {
        return urlEmbedSchemaResponseTransformer(item);
      });
    }
    if (data.embeds.videos) {
      data.embeds.videos = data.embeds.videos.map((item: any) => {
        return videoEmbedSchemaResponseTransformer(item);
      });
    }
  }
  if (data.recasts.recasters) {
    data.recasts.recasters = data.recasts.recasters.map((item: any) => {
      return recasterSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getFeedItemsResponseTransformer = async (
  data: any,
): Promise<GetFeedItemsResponse> => {
  data = feedItemsResponseSchemaResponseTransformer(data);
  return data;
};

const userResponseSchemaResponseTransformer = (data: any) => {
  data = genericResponseSchemaResponseTransformer(data);
  if (data.result.user) {
    data.result.user = userWithExtrasSchemaResponseTransformer(
      data.result.user,
    );
  }
  if (data.result.extras) {
    data.result.extras = userExtrasSchemaResponseTransformer(
      data.result.extras,
    );
  }
  return data;
};

export const getUserResponseTransformer = async (
  data: any,
): Promise<GetUserResponse> => {
  data = userResponseSchemaResponseTransformer(data);
  return data;
};

export const getUserFollowingChannelsResponseTransformer = async (
  data: any,
): Promise<GetUserFollowingChannelsResponse> => {
  data = highlightedChannelsResponseSchemaResponseTransformer(data);
  return data;
};

const suggestedUsersResponseSchemaResponseTransformer = (data: any) => {
  data = paginatedResponseSchemaResponseTransformer(data);
  return data;
};

const paginatedResponseSchemaResponseTransformer = (data: any) => {
  if (data.next) {
    data.next = paginationCursorSchemaResponseTransformer(data.next);
  }
  return data;
};

export const getSuggestedUsersResponseTransformer = async (
  data: any,
): Promise<GetSuggestedUsersResponse> => {
  data = suggestedUsersResponseSchemaResponseTransformer(data);
  return data;
};

export const getUserFavoriteFramesResponseTransformer = async (
  data: any,
): Promise<GetUserFavoriteFramesResponse> => {
  data = favoriteFramesResponseSchemaResponseTransformer(data);
  return data;
};

export const getUserByUsernameResponseTransformer = async (
  data: any,
): Promise<GetUserByUsernameResponse> => {
  data = userByFidResponseSchemaResponseTransformer(data);
  return data;
};

export const getChannelStreaksForUserResponseTransformer = async (
  data: any,
): Promise<GetChannelStreaksForUserResponse> => {
  data = channelStreaksResponseSchemaResponseTransformer(data);
  return data;
};

export const getUnseenCountsResponseTransformer = async (
  data: any,
): Promise<GetUnseenCountsResponse> => {
  data = unseenCountsResponseSchemaResponseTransformer(data);
  return data;
};

export const getUserThreadCastsResponseTransformer = async (
  data: any,
): Promise<GetUserThreadCastsResponse> => {
  data = userThreadCastsResponseSchemaResponseTransformer(data);
  return data;
};

export const getChannelFollowersYouKnowResponseTransformer = async (
  data: any,
): Promise<GetChannelFollowersYouKnowResponse> => {
  data = channelFollowersYouKnowResponseSchemaResponseTransformer(data);
  return data;
};

const successResponseSchemaResponseTransformer = (data: any) => {
  data = genericResponseSchemaResponseTransformer(data);
  return data;
};

export const markAllNotificationsReadResponseTransformer = async (
  data: any,
): Promise<MarkAllNotificationsReadResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const getNotificationsResponseTransformer = async (
  data: any,
): Promise<GetNotificationsResponse> => {
  data = notificationsResponseSchemaResponseTransformer(data);
  return data;
};

export const setLastCheckedTimestampResponseTransformer = async (
  data: any,
): Promise<SetLastCheckedTimestampResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

const directCastConversationResponseSchemaResponseTransformer = (data: any) => {
  data = genericResponseSchemaResponseTransformer(data);
  if (data.result) {
    data.result.conversation = directCastConversationSchemaResponseTransformer(
      data.result.conversation,
    );
  }
  return data;
};

export const getDirectCastConversationResponseTransformer = async (
  data: any,
): Promise<GetDirectCastConversationResponse> => {
  data = directCastConversationResponseSchemaResponseTransformer(data);
  return data;
};

export const categorizeDirectCastConversationResponseTransformer = async (
  data: any,
): Promise<CategorizeDirectCastConversationResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

const directCastConversationMessagesResponseSchemaResponseTransformer = (
  data: any,
) => {
  data = paginatedResponseSchemaResponseTransformer(data);
  if (data.result) {
    data.result.messages = data.result.messages.map((item: any) => {
      return directCastMessageSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getDirectCastConversationMessagesResponseTransformer = async (
  data: any,
): Promise<GetDirectCastConversationMessagesResponse> => {
  data = directCastConversationMessagesResponseSchemaResponseTransformer(data);
  return data;
};

export const setDirectCastConversationMessageTtlResponseTransformer = async (
  data: any,
): Promise<SetDirectCastConversationMessageTtlResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const updateDirectCastConversationNotificationsResponseTransformer =
  async (
    data: any,
  ): Promise<UpdateDirectCastConversationNotificationsResponse> => {
    data = successResponseSchemaResponseTransformer(data);
    return data;
  };

export const getDirectCastConversationRecentMessagesResponseTransformer =
  async (
    data: any,
  ): Promise<GetDirectCastConversationRecentMessagesResponse> => {
    data =
      directCastConversationMessagesResponseSchemaResponseTransformer(data);
    return data;
  };

export const sendDirectCastMessageResponseTransformer = async (
  data: any,
): Promise<SendDirectCastMessageResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const directCastManuallyMarkUnreadResponseTransformer = async (
  data: any,
): Promise<DirectCastManuallyMarkUnreadResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const removeDirectCastMessageReactionResponseTransformer = async (
  data: any,
): Promise<RemoveDirectCastMessageReactionResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const addDirectCastMessageReactionResponseTransformer = async (
  data: any,
): Promise<AddDirectCastMessageReactionResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const unpinDirectCastConversationResponseTransformer = async (
  data: any,
): Promise<UnpinDirectCastConversationResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const pinDirectCastConversationResponseTransformer = async (
  data: any,
): Promise<PinDirectCastConversationResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

const discoverChannelsResponseSchemaResponseTransformer = (data: any) => {
  data = genericResponseSchemaResponseTransformer(data);
  return data;
};

export const discoverChannelsResponseTransformer = async (
  data: any,
): Promise<DiscoverChannelsResponse2> => {
  data = discoverChannelsResponseSchemaResponseTransformer(data);
  return data;
};

const invitesAvailableResponseSchemaResponseTransformer = (data: any) => {
  data = genericResponseSchemaResponseTransformer(data);
  return data;
};

export const getAvailableInvitesResponseTransformer = async (
  data: any,
): Promise<GetAvailableInvitesResponse> => {
  data = invitesAvailableResponseSchemaResponseTransformer(data);
  return data;
};

const sponsoredInvitesResponseSchemaResponseTransformer = (data: any) => {
  data = genericResponseSchemaResponseTransformer(data);
  return data;
};

export const getSponsoredInvitesResponseTransformer = async (
  data: any,
): Promise<GetSponsoredInvitesResponse> => {
  data = sponsoredInvitesResponseSchemaResponseTransformer(data);
  return data;
};

export const getRewardsLeaderboardResponseTransformer = async (
  data: any,
): Promise<GetRewardsLeaderboardResponse> => {
  data = rewardsLeaderboardResponseSchemaResponseTransformer(data);
  return data;
};

export const getUserRewardsScoresResponseTransformer = async (
  data: any,
): Promise<GetUserRewardsScoresResponse> => {
  data = rewardsScoresResponseSchemaResponseTransformer(data);
  return data;
};

const rewardsMetadataResponseSchemaResponseTransformer = (data: any) => {
  if (data.result.metadata) {
    data.result.metadata.lastUpdateTimestamp = BigInt(
      data.result.metadata.lastUpdateTimestamp.toString(),
    );
    data.result.metadata.currentPeriodStartTimestamp = BigInt(
      data.result.metadata.currentPeriodStartTimestamp.toString(),
    );
    data.result.metadata.currentPeriodEndTimestamp = BigInt(
      data.result.metadata.currentPeriodEndTimestamp.toString(),
    );
  }
  return data;
};

export const getRewardsMetadataResponseTransformer = async (
  data: any,
): Promise<GetRewardsMetadataResponse> => {
  data = rewardsMetadataResponseSchemaResponseTransformer(data);
  return data;
};

const bookmarkedCastsResponseSchemaResponseTransformer = (data: any) => {
  if (data.result.bookmarks) {
    data.result.bookmarks = data.result.bookmarks.map((item: any) => {
      return bookmarkedCastSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getBookmarkedCastsResponseTransformer = async (
  data: any,
): Promise<GetBookmarkedCastsResponse> => {
  data = bookmarkedCastsResponseSchemaResponseTransformer(data);
  return data;
};

const starterPacksResponseSchemaResponseTransformer = (data: any) => {
  data.result.starterPacks = data.result.starterPacks.map((item: any) => {
    return starterPackSchemaResponseTransformer(item);
  });
  return data;
};

const starterPackSchemaResponseTransformer = (data: any) => {
  if (data.creator) {
    data.creator = userSchemaResponseTransformer(data.creator);
  }
  return data;
};

export const getUserStarterPacksResponseTransformer = async (
  data: any,
): Promise<GetUserStarterPacksResponse> => {
  data = starterPacksResponseSchemaResponseTransformer(data);
  return data;
};

export const getSuggestedStarterPacksResponseTransformer = async (
  data: any,
): Promise<GetSuggestedStarterPacksResponse> => {
  data = starterPacksResponseSchemaResponseTransformer(data);
  return data;
};

const starterPackResponseSchemaResponseTransformer = (data: any) => {
  data.result.starterPack = starterPackSchemaResponseTransformer(
    data.result.starterPack,
  );
  return data;
};

export const getStarterPackResponseTransformer = async (
  data: any,
): Promise<GetStarterPackResponse> => {
  data = starterPackResponseSchemaResponseTransformer(data);
  return data;
};

export const updateStarterPackResponseTransformer = async (
  data: any,
): Promise<UpdateStarterPackResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

const starterPackUsersResponseSchemaResponseTransformer = (data: any) => {
  data.result.users = data.result.users.map((item: any) => {
    return userSchemaResponseTransformer(item);
  });
  return data;
};

export const getStarterPackUsersResponseTransformer = async (
  data: any,
): Promise<GetStarterPackUsersResponse> => {
  data = starterPackUsersResponseSchemaResponseTransformer(data);
  return data;
};

const channelResponseSchemaResponseTransformer = (data: any) => {
  if (data.result.channel) {
    data.result.channel = channelSchemaResponseTransformer(data.result.channel);
  }
  return data;
};

export const getChannelResponseTransformer = async (
  data: any,
): Promise<GetChannelResponse> => {
  data = channelResponseSchemaResponseTransformer(data);
  return data;
};

const channelUsersResponseSchemaResponseTransformer = (data: any) => {
  if (data.result.users) {
    data.result.users = data.result.users.map((item: any) => {
      return userSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getChannelUsersResponseTransformer = async (
  data: any,
): Promise<GetChannelUsersResponse> => {
  data = channelUsersResponseSchemaResponseTransformer(data);
  return data;
};

const usersResponseSchemaResponseTransformer = (data: any) => {
  data.result.users = data.result.users.map((item: any) => {
    return userSchemaResponseTransformer(item);
  });
  return data;
};

export const getFollowingResponseTransformer = async (
  data: any,
): Promise<GetFollowingResponse> => {
  data = usersResponseSchemaResponseTransformer(data);
  return data;
};

export const getFollowersResponseTransformer = async (
  data: any,
): Promise<GetFollowersResponse> => {
  data = usersResponseSchemaResponseTransformer(data);
  return data;
};

const usersWithCountResponseSchemaResponseTransformer = (data: any) => {
  data.result.users = data.result.users.map((item: any) => {
    return userSchemaResponseTransformer(item);
  });
  return data;
};

export const getMutualFollowersResponseTransformer = async (
  data: any,
): Promise<GetMutualFollowersResponse> => {
  data = usersWithCountResponseSchemaResponseTransformer(data);
  return data;
};

const frameAppsResponseSchemaResponseTransformer = (data: any) => {
  if (data.result) {
    if (data.result.frames) {
      data.result.frames = data.result.frames.map((item: any) => {
        return frameAppSchemaResponseTransformer(item);
      });
    }
  }
  return data;
};

export const getTopFrameAppsResponseTransformer = async (
  data: any,
): Promise<GetTopFrameAppsResponse> => {
  data = frameAppsResponseSchemaResponseTransformer(data);
  return data;
};

const topMiniAppsResponseSchemaResponseTransformer = (data: any) => {
  if (data.result) {
    if (data.result.miniApps) {
      data.result.miniApps = data.result.miniApps.map((item: any) => {
        return rankedMiniAppSchemaResponseTransformer(item);
      });
    }
    if (data.result.next) {
      data.result.next = paginationCursorSchemaResponseTransformer(
        data.result.next,
      );
    }
  }
  return data;
};

const rankedMiniAppSchemaResponseTransformer = (data: any) => {
  if (data.miniApp) {
    data.miniApp = miniAppSchemaResponseTransformer(data.miniApp);
  }
  return data;
};

const miniAppSchemaResponseTransformer = (data: any) => {
  if (data.author) {
    data.author = userSchemaResponseTransformer(data.author);
  }
  if (data.viewerContext) {
    data.viewerContext = miniAppViewerContextSchemaResponseTransformer(
      data.viewerContext,
    );
  }
  return data;
};

export const getTopMiniAppsResponseTransformer = async (
  data: any,
): Promise<GetTopMiniAppsResponse> => {
  data = topMiniAppsResponseSchemaResponseTransformer(data);
  return data;
};

export const getVerificationsResponseTransformer = async (
  data: any,
): Promise<GetVerificationsResponse> => {
  if (data.result) {
    if (data.result.verifications) {
      data.result.verifications = data.result.verifications.map((item: any) => {
        return verifiedAddressSchemaResponseTransformer(item);
      });
    }
  }
  return data;
};

const mutedKeywordsResponseSchemaResponseTransformer = (data: any) => {
  data.result.mutedKeywords = data.result.mutedKeywords.map((item: any) => {
    return mutedKeywordSchemaResponseTransformer(item);
  });
  return data;
};

const mutedKeywordSchemaResponseTransformer = (data: any) => {
  data.properties = mutedKeywordPropertiesSchemaResponseTransformer(
    data.properties,
  );
  return data;
};

export const getMutedKeywordsResponseTransformer = async (
  data: any,
): Promise<GetMutedKeywordsResponse> => {
  data = mutedKeywordsResponseSchemaResponseTransformer(data);
  return data;
};

export const muteKeywordResponseTransformer = async (
  data: any,
): Promise<MuteKeywordResponse> => {
  data = mutedKeywordsResponseSchemaResponseTransformer(data);
  return data;
};

export const unmuteKeywordResponseTransformer = async (
  data: any,
): Promise<UnmuteKeywordResponse> => {
  data = mutedKeywordsResponseSchemaResponseTransformer(data);
  return data;
};

export const getCastLikesResponseTransformer = async (
  data: any,
): Promise<GetCastLikesResponse> => {
  if (data.result) {
    if (data.result.likes) {
      data.result.likes = data.result.likes.map((item: any) => {
        if (item.reactor) {
          item.reactor = userSchemaResponseTransformer(item.reactor);
        }
        return item;
      });
    }
  }
  return data;
};

export const likeCastResponseTransformer = async (
  data: any,
): Promise<LikeCastResponse> => {
  if (data.result) {
    if (data.result.like) {
      if (data.result.like.reactor) {
        data.result.like.reactor = userSchemaResponseTransformer(
          data.result.like.reactor,
        );
      }
    }
  }
  return data;
};

export const undoRecastResponseTransformer = async (
  data: any,
): Promise<UndoRecastResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const recastCastResponseTransformer = async (
  data: any,
): Promise<RecastCastResponse> => {
  data = castHashResponseSchemaResponseTransformer(data);
  return data;
};

export const attachEmbedsResponseTransformer = async (
  data: any,
): Promise<AttachEmbedsResponse2> => {
  data = attachEmbedsResponseSchemaResponseTransformer(data);
  return data;
};

const castRecastersResponseSchemaResponseTransformer = (data: any) => {
  if (data.result.users) {
    data.result.users = data.result.users.map((item: any) => {
      return userSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getCastRecastersResponseTransformer = async (
  data: any,
): Promise<GetCastRecastersResponse> => {
  data = castRecastersResponseSchemaResponseTransformer(data);
  return data;
};

const castQuotesResponseSchemaResponseTransformer = (data: any) => {
  if (data.result.quotes) {
    data.result.quotes = data.result.quotes.map((item: any) => {
      return castQuoteSchemaResponseTransformer(item);
    });
  }
  return data;
};

const castQuoteSchemaResponseTransformer = (data: any) => {
  if (data.author) {
    data.author = userSchemaResponseTransformer(data.author);
  }
  return data;
};

export const getCastQuotesResponseTransformer = async (
  data: any,
): Promise<GetCastQuotesResponse> => {
  data = castQuotesResponseSchemaResponseTransformer(data);
  return data;
};

const userResponseUserResponseSchemaResponseTransformer = (data: any) => {
  data.result.user = userSchemaResponseTransformer(data.result.user);
  return data;
};

export const getCurrentUserResponseTransformer = async (
  data: any,
): Promise<GetCurrentUserResponse> => {
  data = userResponseUserResponseSchemaResponseTransformer(data);
  return data;
};

const searchChannelsResponseSchemaResponseTransformer = (data: any) => {
  if (data.result) {
    if (data.result.channels) {
      data.result.channels = data.result.channels.map((item: any) => {
        return channelSchemaResponseTransformer(item);
      });
    }
  }
  return data;
};

export const searchChannelsResponseTransformer = async (
  data: any,
): Promise<SearchChannelsResponse2> => {
  data = searchChannelsResponseSchemaResponseTransformer(data);
  return data;
};

export const getDraftCastsResponseTransformer = async (
  data: any,
): Promise<GetDraftCastsResponse> => {
  data = draftsResponseSchemaResponseTransformer(data);
  return data;
};

const draftCreatedResponseSchemaResponseTransformer = (data: any) => {
  if (data.result) {
    if (data.result.draft) {
      data.result.draft = draftSchemaResponseTransformer(data.result.draft);
    }
  }
  return data;
};

const draftSchemaResponseTransformer = (data: any) => {
  if (data.casts) {
    data.casts = data.casts.map((item: any) => {
      return draftCastSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const createDraftCastsResponseTransformer = async (
  data: any,
): Promise<CreateDraftCastsResponse> => {
  data = draftCreatedResponseSchemaResponseTransformer(data);
  return data;
};

export const deleteDraftCastResponseTransformer = async (
  data: any,
): Promise<DeleteDraftCastResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const deleteCastResponseTransformer = async (
  data: any,
): Promise<DeleteCastResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const getCastsByFidResponseTransformer = async (
  data: any,
): Promise<GetCastsByFidResponse> => {
  if (data.result) {
    if (data.result.casts) {
      data.result.casts = data.result.casts.map((item: any) => {
        return castSchemaResponseTransformer(item);
      });
    }
  }
  return data;
};

const castCreatedResponseSchemaResponseTransformer = (data: any) => {
  if (data.result) {
    if (data.result.cast) {
      data.result.cast = castSchemaResponseTransformer(data.result.cast);
    }
  }
  return data;
};

export const createCastResponseTransformer = async (
  data: any,
): Promise<CreateCastResponse> => {
  data = castCreatedResponseSchemaResponseTransformer(data);
  return data;
};

const channelListResponseSchemaResponseTransformer = (data: any) => {
  if (data.result) {
    if (data.result.channels) {
      data.result.channels = data.result.channels.map((item: any) => {
        return rawChannelSchemaResponseTransformer(item);
      });
    }
  }
  return data;
};

export const getAllChannelsResponseTransformer = async (
  data: any,
): Promise<GetAllChannelsResponse> => {
  data = channelListResponseSchemaResponseTransformer(data);
  return data;
};

const rawChannelResponseSchemaResponseTransformer = (data: any) => {
  if (data.result) {
    if (data.result.channel) {
      data.result.channel = rawChannelSchemaResponseTransformer(
        data.result.channel,
      );
    }
  }
  return data;
};

export const getChannelDetailsResponseTransformer = async (
  data: any,
): Promise<GetChannelDetailsResponse> => {
  data = rawChannelResponseSchemaResponseTransformer(data);
  return data;
};

const channelFollowersResponseSchemaResponseTransformer = (data: any) => {
  data = paginatedResponseSchemaResponseTransformer(data);
  if (data.result) {
    if (data.result.users) {
      data.result.users = data.result.users.map((item: any) => {
        return channelFollowerSchemaResponseTransformer(item);
      });
    }
  }
  return data;
};

export const getChannelFollowersResponseTransformer = async (
  data: any,
): Promise<GetChannelFollowersResponse> => {
  data = channelFollowersResponseSchemaResponseTransformer(data);
  return data;
};

export const getUserFollowedChannelsResponseTransformer = async (
  data: any,
): Promise<GetUserFollowedChannelsResponse> => {
  data = channelListResponseSchemaResponseTransformer(data);
  return data;
};

const channelFollowStatusResponseSchemaResponseTransformer = (data: any) => {
  if (data.result) {
    data.result = channelFollowStatusSchemaResponseTransformer(data.result);
  }
  return data;
};

export const checkUserChannelFollowStatusResponseTransformer = async (
  data: any,
): Promise<CheckUserChannelFollowStatusResponse> => {
  data = channelFollowStatusResponseSchemaResponseTransformer(data);
  return data;
};

export const removeChannelInviteResponseTransformer = async (
  data: any,
): Promise<RemoveChannelInviteResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const acceptChannelInviteResponseTransformer = async (
  data: any,
): Promise<AcceptChannelInviteResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const inviteUserToChannelResponseTransformer = async (
  data: any,
): Promise<InviteUserToChannelResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const unbanUserFromChannelResponseTransformer = async (
  data: any,
): Promise<UnbanUserFromChannelResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const banUserFromChannelResponseTransformer = async (
  data: any,
): Promise<BanUserFromChannelResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const unfollowChannelResponseTransformer = async (
  data: any,
): Promise<UnfollowChannelResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const followChannelResponseTransformer = async (
  data: any,
): Promise<FollowChannelResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const moderateCastResponseTransformer = async (
  data: any,
): Promise<ModerateCastResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const unpinCastFromChannelResponseTransformer = async (
  data: any,
): Promise<UnpinCastFromChannelResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const pinCastToChannelResponseTransformer = async (
  data: any,
): Promise<PinCastToChannelResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const getDiscoverableActionsResponseTransformer = async (
  data: any,
): Promise<GetDiscoverableActionsResponse> => {
  if (data.result) {
    if (data.result.actions) {
      data.result.actions = data.result.actions.map((item: any) => {
        return actionSchemaResponseTransformer(item);
      });
    }
  }
  return data;
};

export const getDiscoverableComposerActionsResponseTransformer = async (
  data: any,
): Promise<GetDiscoverableComposerActionsResponse> => {
  if (data.result) {
    if (data.result.actions) {
      data.result.actions = data.result.actions.map((item: any) => {
        return actionSchemaResponseTransformer(item);
      });
    }
  }
  return data;
};

export const getBlockedUsersResponseTransformer = async (
  data: any,
): Promise<GetBlockedUsersResponse> => {
  if (data.result.next) {
    data.result.next = paginationCursorSchemaResponseTransformer(
      data.result.next,
    );
  }
  return data;
};

export const blockUserResponseTransformer = async (
  data: any,
): Promise<BlockUserResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const getAccountVerificationsResponseTransformer = async (
  data: any,
): Promise<GetAccountVerificationsResponse> => {
  if (data.next) {
    data.next = paginationCursorSchemaResponseTransformer(data.next);
  }
  return data;
};

export const getCreatorRewardWinnersResponseTransformer = async (
  data: any,
): Promise<GetCreatorRewardWinnersResponse> => {
  if (data.result) {
    if (data.result.periodStartTimestamp) {
      data.result.periodStartTimestamp = BigInt(
        data.result.periodStartTimestamp.toString(),
      );
    }
    if (data.result.periodEndTimestamp) {
      data.result.periodEndTimestamp = BigInt(
        data.result.periodEndTimestamp.toString(),
      );
    }
  }
  return data;
};

export const getUserPrimaryAddressResponseTransformer = async (
  data: any,
): Promise<GetUserPrimaryAddressResponse> => {
  if (data.result) {
    if (data.result.address) {
      data.result.address = verifiedAddressSchemaResponseTransformer(
        data.result.address,
      );
    }
  }
  return data;
};

export const getUserPrimaryAddressesResponseTransformer = async (
  data: any,
): Promise<GetUserPrimaryAddressesResponse> => {
  if (data.result) {
    if (data.result.addresses) {
      data.result.addresses = data.result.addresses.map((item: any) => {
        if (item.address) {
          item.address = verifiedAddressSchemaResponseTransformer(item.address);
        }
        return item;
      });
    }
  }
  return data;
};

export const getStarterPackMembersResponseTransformer = async (
  data: any,
): Promise<GetStarterPackMembersResponse> => {
  if (data.result) {
    if (data.result.members) {
      data.result.members = data.result.members.map((item: any) => {
        item.memberAt = BigInt(item.memberAt.toString());
        return item;
      });
    }
  }
  return data;
};

export const getUserByVerificationAddressResponseTransformer = async (
  data: any,
): Promise<GetUserByVerificationAddressResponse> => {
  data = userResponseSchemaResponseTransformer(data);
  return data;
};

export const getDeveloperRewardWinnersResponseTransformer = async (
  data: any,
): Promise<GetDeveloperRewardWinnersResponse> => {
  if (data.result) {
    if (data.result.winners) {
      data.result.winners = data.result.winners.map((item: any) => {
        return winnerSchemaResponseTransformer(item);
      });
    }
  }
  return data;
};

const appsByAuthorResponseSchemaResponseTransformer = (data: any) => {
  if (data.result) {
    if (data.result.frames) {
      data.result.frames = data.result.frames.map((item: any) => {
        return frameSchemaResponseTransformer(item);
      });
    }
  }
  return data;
};

const frameSchemaResponseTransformer = (data: any) => {
  if (data.author) {
    data.author = userSchemaResponseTransformer(data.author);
  }
  return data;
};

export const getAppsByAuthorResponseTransformer = async (
  data: any,
): Promise<GetAppsByAuthorResponse> => {
  data = appsByAuthorResponseSchemaResponseTransformer(data);
  return data;
};

const apiKeySchemaResponseTransformer = (data: any) => {
  data.createdAt = BigInt(data.createdAt.toString());
  data.expiresAt = BigInt(data.expiresAt.toString());
  return data;
};

export const getApiKeysResponseTransformer = async (
  data: any,
): Promise<GetApiKeysResponse> => {
  data.result.apiKeys = data.result.apiKeys.map((item: any) => {
    return apiKeySchemaResponseTransformer(item);
  });
  return data;
};

export const getProfileCastsResponseTransformer = async (
  data: any,
): Promise<GetProfileCastsResponse> => {
  data.result.casts = data.result.casts.map((item: any) => {
    return castSchemaResponseTransformer(item);
  });
  return data;
};

export const getUserLikedCastsResponseTransformer = async (
  data: any,
): Promise<GetUserLikedCastsResponse> => {
  if (data.result.casts) {
    data.result.casts = data.result.casts.map((item: any) => {
      return castSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const submitAnalyticsEventsResponseTransformer = async (
  data: any,
): Promise<SubmitAnalyticsEventsResponse> => {
  data = successResponseSchemaResponseTransformer(data);
  return data;
};

export const getMiniAppAnalyticsRollupResponseTransformer = async (
  data: any,
): Promise<GetMiniAppAnalyticsRollupResponse> => {
  if (data.result) {
    if (data.result.rollup) {
      if (data.result.rollup.dateRange) {
        if (data.result.rollup.dateRange.startDate) {
          data.result.rollup.dateRange.startDate = new Date(
            data.result.rollup.dateRange.startDate,
          );
        }
        if (data.result.rollup.dateRange.endDate) {
          data.result.rollup.dateRange.endDate = new Date(
            data.result.rollup.dateRange.endDate,
          );
        }
      }
    }
  }
  return data;
};
