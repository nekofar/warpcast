// This file is auto-generated by @hey-api/openapi-ts

export const ProfilePictureSchema = {
	type: "object",
	properties: {
		url: {
			type: "string",
			format: "uri",
		},
		verified: {
			type: "boolean",
		},
	},
} as const;

export const BioSchema = {
	type: "object",
	properties: {
		text: {
			type: "string",
		},
		mentions: {
			type: "array",
			items: {},
		},
		channelMentions: {
			type: "array",
			items: {},
		},
	},
} as const;

export const LocationSchema = {
	type: "object",
	properties: {
		placeId: {
			type: "string",
		},
		description: {
			type: "string",
		},
	},
} as const;

export const ProfileSchema = {
	type: "object",
	properties: {
		bio: {
			$ref: "#/components/schemas/Bio",
		},
		location: {
			$ref: "#/components/schemas/Location",
		},
	},
} as const;

export const ViewerContextSchema = {
	type: "object",
	properties: {
		following: {
			type: "boolean",
		},
		followedBy: {
			type: "boolean",
		},
		enableNotifications: {
			type: "boolean",
		},
		canSendDirectCasts: {
			type: "boolean",
		},
		hasUploadedInboxKeys: {
			type: "boolean",
		},
	},
} as const;

export const UserSchema = {
	type: "object",
	properties: {
		fid: {
			type: "integer",
		},
		username: {
			type: "string",
		},
		displayName: {
			type: "string",
		},
		pfp: {
			$ref: "#/components/schemas/ProfilePicture",
		},
		profile: {
			$ref: "#/components/schemas/Profile",
		},
		followerCount: {
			type: "integer",
		},
		followingCount: {
			type: "integer",
		},
		viewerContext: {
			$ref: "#/components/schemas/ViewerContext",
		},
	},
} as const;

export const OnboardingStateSchema = {
	type: "object",
	properties: {
		id: {
			type: "string",
			format: "uuid",
		},
		email: {
			type: "string",
			format: "email",
		},
		user: {
			$ref: "#/components/schemas/User",
		},
		hasOnboarding: {
			type: "boolean",
		},
		hasConfirmedEmail: {
			type: "boolean",
		},
		handledConnectAddress: {
			type: "boolean",
		},
		canRegisterUsername: {
			type: "boolean",
		},
		needsRegistrationPayment: {
			type: "boolean",
		},
		hasFid: {
			type: "boolean",
		},
		hasFname: {
			type: "boolean",
		},
		hasDelegatedSigner: {
			type: "boolean",
		},
		hasSetupProfile: {
			type: "boolean",
		},
		hasCompletedRegistration: {
			type: "boolean",
		},
		hasStorage: {
			type: "boolean",
		},
		handledPushNotificationsNudge: {
			type: "boolean",
		},
		handledContactsNudge: {
			type: "boolean",
		},
		handledInterestsNudge: {
			type: "boolean",
		},
		hasValidPaidInvite: {
			type: "boolean",
		},
		hasWarpcastWalletAddress: {
			type: "boolean",
		},
		hasPhone: {
			type: "boolean",
		},
		needsPhone: {
			type: "boolean",
		},
		sponsoredRegisterEligible: {
			type: "boolean",
		},
		geoRestricted: {
			type: "boolean",
		},
	},
} as const;

export const OnboardingStateResponseSchema = {
	type: "object",
	properties: {
		result: {
			type: "object",
			properties: {
				state: {
					$ref: "#/components/schemas/OnboardingState",
				},
			},
		},
	},
} as const;

export const ErrorResponseSchema = {
	type: "object",
	properties: {
		errors: {
			type: "array",
			items: {
				type: "object",
				properties: {
					message: {
						type: "string",
						description: "Error message describing the issue",
					},
				},
			},
		},
	},
} as const;

export const UserWithExtrasSchema = {
	allOf: [
		{
			$ref: "#/components/schemas/User",
		},
		{
			type: "object",
			properties: {
				connectedAccounts: {
					type: "array",
					items: {},
				},
			},
		},
	],
} as const;

export const UserExtrasSchema = {
	type: "object",
	properties: {
		fid: {
			type: "integer",
		},
		custodyAddress: {
			type: "string",
		},
		ethWallets: {
			type: "array",
			items: {
				type: "string",
			},
		},
		solanaWallets: {
			type: "array",
			items: {
				type: "string",
			},
		},
	},
} as const;

export const UserByFidResponseSchema = {
	type: "object",
	properties: {
		result: {
			type: "object",
			properties: {
				user: {
					$ref: "#/components/schemas/UserWithExtras",
				},
				collectionsOwned: {
					type: "array",
					items: {},
				},
				extras: {
					$ref: "#/components/schemas/UserExtras",
				},
			},
		},
	},
} as const;

export const DirectCastMessageReactionSchema = {
	type: "object",
	required: ["reaction", "count"],
	properties: {
		reaction: {
			type: "string",
			description: "Emoji used for the reaction",
			example: "ðŸ”¥",
		},
		count: {
			type: "integer",
			minimum: 1,
			description: "Number of users who reacted with this emoji",
			example: 3,
		},
		emoji: {
			type: "string",
			description: "Emoji used for the reaction (legacy field)",
		},
		userFids: {
			type: "array",
			items: {
				type: "integer",
			},
			description: "List of Farcaster IDs who reacted",
		},
	},
} as const;

export const DirectCastMessageViewerContextSchema = {
	type: "object",
	properties: {
		isLastReadMessage: {
			type: "boolean",
			description: "Whether this is the last read message",
			example: false,
		},
		focused: {
			type: "boolean",
			description: "Whether the message is focused",
			example: false,
		},
		reactions: {
			type: "array",
			items: {
				type: "string",
			},
			description: "User's reactions to this message",
		},
	},
} as const;

export const DirectCastMessageSchema = {
	type: "object",
	required: [
		"conversationId",
		"senderFid",
		"messageId",
		"serverTimestamp",
		"type",
		"message",
		"hasMention",
		"reactions",
		"isPinned",
		"isDeleted",
		"senderContext",
	],
	properties: {
		conversationId: {
			type: "string",
			description: "ID of the conversation this message belongs to",
		},
		senderFid: {
			type: "integer",
			description: "Farcaster ID of the message sender",
		},
		messageId: {
			type: "string",
			description: "Unique identifier for the message",
		},
		serverTimestamp: {
			type: "integer",
			format: "int64",
			description: "Server timestamp when message was sent (Unix milliseconds)",
			example: 1753112479748,
		},
		type: {
			type: "string",
			enum: [
				"text",
				"image",
				"reaction",
				"link",
				"group_membership_addition",
				"pin_message",
			],
			description: "Type of the message",
			example: "text",
		},
		message: {
			type: "string",
			description: "Content of the message",
		},
		hasMention: {
			type: "boolean",
			description: "Whether the message contains mentions",
			example: false,
		},
		reactions: {
			type: "array",
			items: {
				$ref: "#/components/schemas/DirectCastMessageReaction",
			},
			description: "List of reactions to the message",
		},
		isPinned: {
			type: "boolean",
			description: "Whether the message is pinned",
			example: false,
		},
		isDeleted: {
			type: "boolean",
			description: "Whether the message is deleted",
			example: false,
		},
		senderContext: {
			$ref: "#/components/schemas/User",
		},
		viewerContext: {
			$ref: "#/components/schemas/DirectCastMessageViewerContext",
		},
		inReplyTo: {
			$ref: "#/components/schemas/DirectCastMessage",
		},
		metadata: {
			$ref: "#/components/schemas/DirectCastMessageMetadata",
		},
		actionTargetUserContext: {
			$ref: "#/components/schemas/User",
		},
		isProgrammatic: {
			type: "boolean",
			description: "Whether the message was sent programmatically",
			example: false,
		},
		mentions: {
			type: "array",
			items: {
				$ref: "#/components/schemas/DirectCastMessageMention",
			},
			description: "List of mentions in the message",
		},
	},
} as const;

export const DirectCastMessageMetadataSchema = {
	type: "object",
	properties: {
		casts: {
			type: "array",
			items: {
				type: "object",
				additionalProperties: true,
			},
			description: "Cast metadata if message contains cast references",
		},
		urls: {
			type: "array",
			items: {
				type: "object",
				additionalProperties: true,
			},
			description: "URL metadata if message contains links",
		},
		medias: {
			type: "array",
			items: {
				type: "object",
				additionalProperties: true,
			},
			description: "Media metadata if message contains media",
		},
	},
} as const;

export const DirectCastMessageMentionSchema = {
	type: "object",
	required: ["user", "textIndex", "length"],
	properties: {
		user: {
			$ref: "#/components/schemas/User",
		},
		textIndex: {
			type: "integer",
			description: "Starting index of the mention in the message text",
			example: 19,
		},
		length: {
			type: "integer",
			description: "Length of the mention text",
			example: 8,
		},
	},
} as const;

export const DirectCastConversationViewerContextSchema = {
	type: "object",
	properties: {
		category: {
			type: "string",
		},
		lastReadAt: {
			type: "integer",
		},
		muted: {
			type: "boolean",
		},
		manuallyMarkedUnread: {
			type: "boolean",
		},
		pinned: {
			type: "boolean",
		},
		unreadCount: {
			type: "integer",
		},
		unreadMentionsCount: {
			type: "integer",
		},
	},
} as const;

export const DirectCastConversationSchema = {
	type: "object",
	required: [
		"conversationId",
		"isGroup",
		"createdAt",
		"viewerContext",
		"adminFids",
		"lastReadTime",
	],
	properties: {
		conversationId: {
			type: "string",
			description: "Unique identifier for the conversation",
		},
		name: {
			type: "string",
			description: "Name of the conversation (for group conversations)",
		},
		description: {
			type: "string",
			description: "Description of the conversation",
		},
		photoUrl: {
			type: "string",
			format: "uri",
			description: "URL of the conversation photo",
		},
		adminFids: {
			type: "array",
			items: {
				type: "integer",
			},
			description: "List of admin Farcaster IDs",
		},
		lastReadTime: {
			type: "integer",
			format: "int64",
			description: "Timestamp of last read time (Unix milliseconds)",
			example: 1741871452933,
		},
		isGroup: {
			type: "boolean",
			description: "Whether this is a group conversation",
			example: true,
		},
		createdAt: {
			type: "integer",
			format: "int64",
			description:
				"Timestamp when conversation was created (Unix milliseconds)",
			example: 1709952982363,
		},
		lastMessage: {
			$ref: "#/components/schemas/DirectCastMessage",
		},
		viewerContext: {
			$ref: "#/components/schemas/DirectCastConversationViewerContext",
		},
	},
} as const;

export const DirectCastInboxResultSchema = {
	type: "object",
	required: [
		"hasArchived",
		"hasUnreadRequests",
		"requestsCount",
		"conversations",
	],
	properties: {
		hasArchived: {
			type: "boolean",
			description: "Whether user has archived conversations",
			example: false,
		},
		hasUnreadRequests: {
			type: "boolean",
			description: "Whether user has unread conversation requests",
			example: false,
		},
		requestsCount: {
			type: "integer",
			minimum: 0,
			description: "Total number of conversation requests",
			example: 12,
		},
		conversations: {
			type: "array",
			items: {
				$ref: "#/components/schemas/DirectCastConversation",
			},
		},
	},
} as const;

export const DirectCastInboxResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			$ref: "#/components/schemas/DirectCastInboxResult",
		},
		next: {
			type: "object",
			required: ["cursor"],
			properties: {
				cursor: {
					type: "string",
					description: "Base64 encoded cursor for pagination",
				},
			},
		},
	},
} as const;

export const CastActionSchema = {
	type: "object",
	properties: {
		id: {
			type: "string",
		},
		name: {
			type: "string",
		},
		octicon: {
			type: "string",
		},
		actionUrl: {
			type: "string",
		},
		action: {
			type: "object",
			properties: {
				actionType: {
					type: "string",
				},
				postUrl: {
					type: "string",
				},
			},
		},
	},
} as const;

export const UserAppContextResponseSchema = {
	type: "object",
	properties: {
		result: {
			type: "object",
			properties: {
				context: {
					type: "object",
					properties: {
						canAddLinks: {
							type: "boolean",
						},
						showConnectedApps: {
							type: "boolean",
						},
						signerRequestsEnabled: {
							type: "boolean",
						},
						prompts: {
							type: "array",
							items: {},
						},
						adminForChannelKeys: {
							type: "array",
							items: {
								type: "string",
							},
						},
						modOfChannelKeys: {
							type: "array",
							items: {
								type: "string",
							},
						},
						memberOfChannelKeys: {
							type: "array",
							items: {
								type: "string",
							},
						},
						canEditAllChannels: {
							type: "boolean",
						},
						canUploadVideo: {
							type: "boolean",
						},
						statsigEnabled: {
							type: "boolean",
						},
						shouldPromptForPushNotifications: {
							type: "boolean",
						},
						shouldPromptForUserFollowsSyncContacts: {
							type: "boolean",
						},
						castActions: {
							type: "array",
							items: {
								$ref: "#/components/schemas/CastAction",
							},
						},
						canAddCastAction: {
							type: "boolean",
						},
						enabledCastAction: {
							$ref: "#/components/schemas/CastAction",
						},
						notificationTabsV2: {
							type: "array",
							items: {
								type: "object",
								properties: {
									id: {
										type: "string",
									},
									name: {
										type: "string",
									},
								},
							},
						},
						enabledVideoAutoplay: {
							type: "boolean",
						},
						regularCastByteLimit: {
							type: "integer",
						},
						longCastByteLimit: {
							type: "integer",
						},
						newUserStatus: {
							type: "object",
						},
						country: {
							type: "string",
						},
						higherClientEventSamplingRateEnabled: {
							type: "boolean",
						},
					},
				},
			},
		},
	},
} as const;

export const UserPreferencesResponseSchema = {
	type: "object",
	properties: {
		result: {
			type: "object",
			properties: {
				preferences: {
					type: "object",
					additionalProperties: true,
				},
			},
		},
	},
} as const;

export const ChannelSchema = {
	type: "object",
	properties: {
		type: {
			type: "string",
		},
		key: {
			type: "string",
		},
		name: {
			type: "string",
		},
		imageUrl: {
			type: "string",
		},
		fastImageUrl: {
			type: "string",
		},
		feeds: {
			type: "array",
			items: {
				type: "object",
				properties: {
					name: {
						type: "string",
					},
					type: {
						type: "string",
					},
				},
			},
		},
		description: {
			type: "string",
		},
		followerCount: {
			type: "integer",
		},
		memberCount: {
			type: "integer",
		},
		showCastSourceLabels: {
			type: "boolean",
		},
		showCastTags: {
			type: "boolean",
		},
		sectionRank: {
			type: "integer",
		},
		subscribable: {
			type: "boolean",
		},
		publicCasting: {
			type: "boolean",
		},
		inviteCode: {
			type: "string",
		},
		headerImageUrl: {
			type: "string",
		},
		headerAction: {
			type: "object",
			properties: {
				title: {
					type: "string",
				},
				target: {
					type: "string",
				},
			},
		},
		headerActionMetadata: {
			type: "object",
			additionalProperties: true,
		},
		viewerContext: {
			type: "object",
			properties: {
				following: {
					type: "boolean",
				},
				isMember: {
					type: "boolean",
				},
				hasUnseenItems: {
					type: "boolean",
				},
				favoritePosition: {
					type: "integer",
				},
				activityRank: {
					type: "integer",
				},
				canCast: {
					type: "boolean",
				},
			},
		},
	},
} as const;

export const HighlightedChannelsResponseSchema = {
	type: "object",
	properties: {
		result: {
			type: "object",
			properties: {
				channels: {
					type: "array",
					items: {
						$ref: "#/components/schemas/Channel",
					},
				},
				viewerContext: {
					type: "object",
					properties: {
						defaultFeed: {
							type: "string",
						},
					},
				},
			},
		},
	},
} as const;

export const FeedItemsResponseSchema = {
	type: "object",
	properties: {
		result: {
			type: "object",
			properties: {
				items: {
					type: "array",
					items: {
						type: "object",
						additionalProperties: true,
					},
				},
				latestMainCastTimestamp: {
					type: "integer",
				},
				feedTopSeenAtTimestamp: {
					type: "integer",
				},
				replaceFeed: {
					type: "boolean",
				},
			},
		},
	},
} as const;

export const GenericResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			additionalProperties: true,
		},
	},
} as const;

export const UserResponseSchema = {
	allOf: [
		{
			$ref: "#/components/schemas/GenericResponse",
		},
		{
			type: "object",
			properties: {
				result: {
					type: "object",
					properties: {
						user: {
							$ref: "#/components/schemas/UserWithExtras",
						},
						collectionsOwned: {
							type: "array",
							items: {
								type: "object",
							},
						},
						extras: {
							$ref: "#/components/schemas/UserExtras",
						},
					},
				},
			},
		},
	],
} as const;

export const PaginationCursorSchema = {
	type: "object",
	properties: {
		cursor: {
			type: "string",
			description: "Base64 encoded cursor for pagination",
		},
	},
	additionalProperties: true,
} as const;

export const PaginatedResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			additionalProperties: true,
		},
		next: {
			$ref: "#/components/schemas/PaginationCursor",
		},
	},
} as const;

export const SuggestedUsersResponseSchema = {
	allOf: [
		{
			$ref: "#/components/schemas/PaginatedResponse",
		},
		{
			type: "object",
			properties: {
				result: {
					type: "object",
					properties: {
						users: {
							type: "array",
							items: {
								type: "object",
								additionalProperties: true,
							},
						},
					},
				},
			},
		},
	],
} as const;

export const FavoriteFramesResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			required: ["frames"],
			properties: {
				frames: {
					type: "array",
					items: {
						type: "object",
						additionalProperties: true,
					},
				},
			},
		},
	},
} as const;

export const ChannelStreaksResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			additionalProperties: true,
		},
	},
} as const;

export const UnseenCountsResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			properties: {
				notificationsCount: {
					type: "integer",
				},
				notificationTabs: {
					type: "array",
					items: {
						type: "object",
						required: ["tab", "unseenCount"],
						properties: {
							tab: {
								type: "string",
							},
							unseenCount: {
								type: "integer",
							},
						},
					},
				},
				inboxCount: {
					type: "integer",
				},
				channelFeeds: {
					type: "array",
					items: {
						type: "object",
						required: ["channelKey", "feedType", "hasNewItems"],
						properties: {
							channelKey: {
								type: "string",
							},
							feedType: {
								type: "string",
							},
							hasNewItems: {
								type: "boolean",
							},
						},
					},
				},
				warpTransactionCount: {
					type: "integer",
				},
			},
		},
	},
} as const;

export const UserThreadCastsResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			required: ["casts"],
			properties: {
				casts: {
					type: "array",
					items: {
						type: "object",
						additionalProperties: true,
					},
				},
			},
		},
	},
} as const;

export const ChannelFollowersYouKnowResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			required: ["users", "totalCount"],
			properties: {
				users: {
					type: "array",
					items: {
						type: "object",
						additionalProperties: true,
					},
				},
				totalCount: {
					type: "integer",
				},
			},
		},
	},
} as const;

export const SuccessResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			required: ["success"],
			properties: {
				success: {
					type: "boolean",
					description: "Indicates whether the operation was successful",
				},
			},
		},
	},
} as const;

export const NotificationsResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			properties: {
				notifications: {
					type: "array",
					items: {
						type: "object",
						additionalProperties: true,
					},
				},
			},
		},
	},
} as const;

export const DirectCastConversationResponseSchema = {
	allOf: [
		{
			$ref: "#/components/schemas/GenericResponse",
		},
		{
			type: "object",
			properties: {
				result: {
					type: "object",
					properties: {
						conversation: {
							type: "object",
							additionalProperties: true,
						},
					},
				},
			},
		},
	],
} as const;

export const DirectCastConversationMessagesResponseSchema = {
	allOf: [
		{
			$ref: "#/components/schemas/PaginatedResponse",
		},
		{
			type: "object",
			properties: {
				result: {
					type: "object",
					required: ["messages"],
					properties: {
						messages: {
							type: "array",
							items: {
								$ref: "#/components/schemas/DirectCastMessage",
							},
						},
					},
				},
			},
		},
	],
} as const;

export const DirectCastSendRequestSchema = {
	type: "object",
	required: ["conversationId", "recipientFids", "messageId", "type", "message"],
	properties: {
		conversationId: {
			type: "string",
			description: "ID of the conversation to send the message to",
		},
		recipientFids: {
			type: "array",
			items: {
				type: "integer",
			},
			description: "Array of Farcaster IDs of message recipients",
			example: [17838, 861305],
		},
		messageId: {
			type: "string",
			description: "Unique identifier for the message",
		},
		type: {
			type: "string",
			enum: ["text", "image", "reaction", "link"],
			description: "Type of the message",
			example: "text",
		},
		message: {
			type: "string",
			description: "Content of the message",
		},
		inReplyToId: {
			type: "string",
			description: "ID of the message this is replying to (optional)",
		},
	},
} as const;

export const common_SuccessResponseSchema = {
	allOf: [
		{
			$ref: "#/components/schemas/GenericResponse",
		},
		{
			type: "object",
			properties: {
				result: {
					type: "object",
					required: ["success"],
					properties: {
						success: {
							type: "boolean",
							description: "Whether the operation was successful",
						},
					},
				},
			},
		},
	],
} as const;

export const DirectCastManuallyMarkUnreadRequestSchema = {
	type: "object",
	required: ["conversationId"],
	properties: {
		conversationId: {
			type: "string",
			description: "ID of the conversation to mark as unread",
		},
	},
} as const;

export const DirectCastPinConversationRequestSchema = {
	type: "object",
	required: ["conversationId"],
	properties: {
		conversationId: {
			type: "string",
			description: "ID of the conversation to pin",
		},
	},
} as const;

export const DiscoverChannelsResponseSchema = {
	allOf: [
		{
			$ref: "#/components/schemas/GenericResponse",
		},
		{
			type: "object",
			properties: {
				result: {
					type: "object",
					properties: {
						channels: {
							type: "array",
							items: {
								type: "object",
								additionalProperties: true,
							},
						},
					},
				},
			},
		},
	],
} as const;

export const InvitesAvailableResponseSchema = {
	allOf: [
		{
			$ref: "#/components/schemas/GenericResponse",
		},
		{
			type: "object",
			properties: {
				result: {
					type: "object",
					required: ["allocatedInvitesCount", "availableInvitesCount"],
					properties: {
						allocatedInvitesCount: {
							type: "integer",
							description: "Total number of invites allocated to the user",
						},
						availableInvitesCount: {
							type: "integer",
							description: "Number of invites currently available to send",
						},
					},
				},
			},
		},
	],
} as const;

export const SponsoredInvitesResponseSchema = {
	allOf: [
		{
			$ref: "#/components/schemas/GenericResponse",
		},
		{
			type: "object",
			properties: {
				result: {
					type: "object",
					properties: {
						invites: {
							type: "array",
							items: {
								type: "object",
							},
						},
					},
				},
			},
			additionalProperties: true,
		},
	],
} as const;

export const RewardsLeaderboardResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			required: ["leaderboard"],
			properties: {
				leaderboard: {
					type: "object",
					required: ["type", "users"],
					properties: {
						type: {
							type: "string",
						},
						users: {
							type: "array",
							items: {
								type: "object",
								properties: {
									user: {
										type: "object",
										additionalProperties: true,
									},
									score: {
										type: "integer",
									},
									rank: {
										type: "integer",
									},
								},
							},
						},
					},
				},
			},
		},
	},
} as const;

export const RewardsScoresResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			required: ["scores"],
			properties: {
				scores: {
					type: "array",
					items: {
						type: "object",
						properties: {
							type: {
								type: "string",
							},
							user: {
								type: "object",
								additionalProperties: true,
							},
							allTimeScore: {
								type: "integer",
							},
							currentPeriodScore: {
								type: "integer",
							},
							previousPeriodScore: {
								type: "integer",
							},
						},
					},
				},
			},
		},
	},
} as const;

export const RewardsMetadataResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			required: ["metadata"],
			properties: {
				metadata: {
					type: "object",
					required: [
						"type",
						"lastUpdateTimestamp",
						"currentPeriodStartTimestamp",
						"currentPeriodEndTimestamp",
					],
					properties: {
						type: {
							type: "string",
						},
						lastUpdateTimestamp: {
							type: "integer",
						},
						currentPeriodStartTimestamp: {
							type: "integer",
						},
						currentPeriodEndTimestamp: {
							type: "integer",
						},
						tiers: {
							type: "array",
							items: {
								type: "object",
								additionalProperties: true,
							},
						},
						proportionalPayout: {
							type: "object",
							properties: {
								numWinners: {
									type: "integer",
								},
								totalRewardCents: {
									type: "integer",
								},
							},
						},
					},
				},
			},
		},
	},
} as const;

export const BookmarkedCastSchema = {
	type: "object",
	additionalProperties: true,
} as const;

export const BookmarkedCastsResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			properties: {
				bookmarks: {
					type: "array",
					items: {
						$ref: "#/components/schemas/BookmarkedCast",
					},
				},
			},
		},
	},
} as const;

export const StarterPackSchema = {
	type: "object",
	additionalProperties: true,
} as const;

export const StarterPacksResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			properties: {
				starterPacks: {
					type: "array",
					items: {
						$ref: "#/components/schemas/StarterPack",
					},
				},
			},
		},
	},
} as const;

export const StarterPackResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			properties: {
				starterPack: {
					$ref: "#/components/schemas/StarterPack",
				},
			},
		},
	},
} as const;

export const StarterPackUsersResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			properties: {
				users: {
					type: "array",
					items: {
						$ref: "#/components/schemas/User",
					},
				},
			},
		},
	},
} as const;

export const ChannelResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			properties: {
				channel: {
					$ref: "#/components/schemas/Channel",
				},
			},
		},
	},
} as const;

export const ChannelUsersResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			properties: {
				users: {
					type: "array",
					items: {
						$ref: "#/components/schemas/User",
					},
				},
			},
		},
	},
} as const;

export const UsersResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			required: ["users"],
			properties: {
				users: {
					type: "array",
					items: {
						$ref: "#/components/schemas/User",
					},
				},
			},
		},
	},
} as const;

export const UsersWithCountResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			required: ["users", "totalCount"],
			properties: {
				users: {
					type: "array",
					items: {
						$ref: "#/components/schemas/User",
					},
				},
				totalCount: {
					type: "integer",
				},
			},
		},
	},
} as const;

export const FrameAppSchema = {
	type: "object",
	additionalProperties: true,
} as const;

export const FrameAppsResponseSchema = {
	type: "object",
	properties: {
		result: {
			type: "object",
			properties: {
				frames: {
					type: "array",
					items: {
						$ref: "#/components/schemas/FrameApp",
					},
				},
			},
		},
	},
} as const;

export const VerifiedAddressSchema = {
	type: "object",
	properties: {
		fid: {
			type: "integer",
		},
		address: {
			type: "string",
		},
		timestamp: {
			type: "integer",
		},
		version: {
			type: "string",
		},
		protocol: {
			type: "string",
		},
		isPrimary: {
			type: "boolean",
		},
		labels: {
			type: "array",
			items: {
				type: "string",
			},
		},
	},
} as const;

export const MutedKeywordPropertiesSchema = {
	type: "object",
	properties: {
		channels: {
			type: "boolean",
		},
		frames: {
			type: "boolean",
		},
		notifications: {
			type: "boolean",
		},
	},
} as const;

export const MutedKeywordSchema = {
	type: "object",
	required: ["keyword", "properties"],
	properties: {
		keyword: {
			type: "string",
		},
		properties: {
			$ref: "#/components/schemas/MutedKeywordProperties",
		},
	},
} as const;

export const MutedKeywordsResponseSchema = {
	type: "object",
	required: ["success", "result"],
	properties: {
		success: {
			type: "boolean",
		},
		result: {
			type: "object",
			required: ["keywords", "mutedKeywords"],
			properties: {
				keywords: {
					type: "array",
					items: {
						type: "string",
					},
				},
				mutedKeywords: {
					type: "array",
					items: {
						$ref: "#/components/schemas/MutedKeyword",
					},
				},
			},
		},
	},
} as const;

export const CastHashResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			properties: {
				castHash: {
					type: "string",
					example: "0x750a7269b4a3b70e28d3f450df33487047d4927f",
				},
			},
		},
	},
} as const;

export const AttachEmbedsResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			additionalProperties: true,
		},
	},
} as const;

export const CastRecastersResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			properties: {
				users: {
					type: "array",
					items: {
						$ref: "#/components/schemas/User",
					},
				},
			},
		},
	},
} as const;

export const CastQuoteSchema = {
	type: "object",
	properties: {
		hash: {
			type: "string",
		},
		threadHash: {
			type: "string",
		},
		parentSource: {
			type: "object",
			properties: {
				type: {
					type: "string",
				},
				url: {
					type: "string",
				},
			},
		},
		author: {
			$ref: "#/components/schemas/User",
		},
		text: {
			type: "string",
		},
		timestamp: {
			type: "integer",
		},
	},
} as const;

export const CastQuotesResponseSchema = {
	type: "object",
	required: ["result"],
	properties: {
		result: {
			type: "object",
			properties: {
				quotes: {
					type: "array",
					items: {
						$ref: "#/components/schemas/CastQuote",
					},
				},
			},
		},
	},
} as const;

export const user_response_UserResponseSchema = {
	type: "object",
	properties: {
		result: {
			type: "object",
			properties: {
				user: {
					$ref: "#/components/schemas/User",
				},
			},
		},
	},
} as const;

export const SearchChannelsResponseSchema = {
	type: "object",
	properties: {
		result: {
			type: "object",
			properties: {
				channels: {
					type: "array",
					items: {
						$ref: "#/components/schemas/Channel",
					},
				},
			},
		},
	},
} as const;

export const DraftsResponseSchema = {
	type: "object",
	properties: {
		result: {
			type: "object",
			properties: {
				drafts: {
					type: "array",
					items: {},
				},
			},
		},
	},
} as const;

export const DraftCastSchema = {
	type: "object",
	properties: {
		text: {
			type: "string",
		},
		embeds: {
			type: "array",
			items: {},
		},
	},
} as const;

export const DraftSchema = {
	type: "object",
	properties: {
		draftId: {
			type: "string",
		},
		casts: {
			type: "array",
			items: {
				$ref: "#/components/schemas/DraftCast",
			},
		},
	},
} as const;

export const DraftCreatedResponseSchema = {
	type: "object",
	properties: {
		result: {
			type: "object",
			properties: {
				draft: {
					$ref: "#/components/schemas/Draft",
				},
			},
		},
	},
} as const;

export const ImageEmbedSchema = {
	type: "object",
	properties: {
		type: {
			type: "string",
			enum: ["image"],
		},
		url: {
			type: "string",
		},
		sourceUrl: {
			type: "string",
		},
		media: {
			type: "object",
			properties: {
				version: {
					type: "string",
				},
				width: {
					type: "integer",
				},
				height: {
					type: "integer",
				},
				staticRaster: {
					type: "string",
				},
				mimeType: {
					type: "string",
				},
			},
		},
		alt: {
			type: "string",
		},
	},
} as const;

export const UrlEmbedSchema = {
	type: "object",
	properties: {
		type: {
			type: "string",
			enum: ["url"],
		},
		openGraph: {
			type: "object",
			properties: {
				url: {
					type: "string",
				},
				sourceUrl: {
					type: "string",
				},
				title: {
					type: "string",
				},
				description: {
					type: "string",
				},
				domain: {
					type: "string",
				},
				image: {
					type: "string",
				},
				useLargeImage: {
					type: "boolean",
				},
			},
		},
	},
} as const;

export const VideoEmbedSchema = {
	type: "object",
	properties: {
		type: {
			type: "string",
			enum: ["video"],
		},
	},
} as const;

export const RecasterSchema = {
	type: "object",
	properties: {
		fid: {
			type: "integer",
		},
		username: {
			type: "string",
		},
		displayName: {
			type: "string",
		},
		recastHash: {
			type: "string",
		},
	},
} as const;

export const CastSchema = {
	type: "object",
	properties: {
		hash: {
			type: "string",
			description: "Unique hash identifier for the cast",
		},
		threadHash: {
			type: "string",
			description: "Hash identifier for the thread this cast belongs to",
		},
		parentHash: {
			type: "string",
			description: "Hash identifier of the parent cast (if this is a reply)",
		},
		parentSource: {
			type: "object",
			properties: {
				type: {
					type: "string",
					enum: ["url"],
				},
				url: {
					type: "string",
				},
			},
		},
		author: {
			$ref: "#/components/schemas/User",
		},
		text: {
			type: "string",
			description: "The text content of the cast",
		},
		timestamp: {
			type: "integer",
			format: "int64",
			description: "Unix timestamp in milliseconds",
		},
		mentions: {
			type: "array",
			items: {
				$ref: "#/components/schemas/User",
			},
		},
		embeds: {
			type: "object",
			properties: {
				images: {
					type: "array",
					items: {
						$ref: "#/components/schemas/ImageEmbed",
					},
				},
				urls: {
					type: "array",
					items: {
						$ref: "#/components/schemas/UrlEmbed",
					},
				},
				videos: {
					type: "array",
					items: {
						$ref: "#/components/schemas/VideoEmbed",
					},
				},
				unknowns: {
					type: "array",
					items: {
						type: "object",
					},
				},
				processedCastText: {
					type: "string",
				},
				groupInvites: {
					type: "array",
					items: {
						type: "object",
					},
				},
			},
		},
		replies: {
			type: "object",
			properties: {
				count: {
					type: "integer",
				},
			},
		},
		reactions: {
			type: "object",
			properties: {
				count: {
					type: "integer",
				},
			},
		},
		recasts: {
			type: "object",
			properties: {
				count: {
					type: "integer",
				},
				recasters: {
					type: "array",
					items: {
						$ref: "#/components/schemas/Recaster",
					},
				},
			},
		},
		watches: {
			type: "object",
			properties: {
				count: {
					type: "integer",
				},
			},
		},
		recast: {
			type: "boolean",
		},
		tags: {
			type: "array",
			items: {
				type: "object",
				properties: {
					type: {
						type: "string",
					},
					id: {
						type: "string",
					},
					name: {
						type: "string",
					},
					imageUrl: {
						type: "string",
					},
				},
			},
		},
		quoteCount: {
			type: "integer",
		},
		combinedRecastCount: {
			type: "integer",
		},
		channel: {
			type: "object",
			properties: {
				key: {
					type: "string",
				},
				name: {
					type: "string",
				},
				imageUrl: {
					type: "string",
				},
				authorContext: {
					type: "object",
					properties: {
						role: {
							type: "string",
						},
						restricted: {
							type: "boolean",
						},
						banned: {
							type: "boolean",
						},
					},
				},
				authorRole: {
					type: "string",
				},
			},
		},
		viewerContext: {
			type: "object",
			properties: {
				reacted: {
					type: "boolean",
				},
				recast: {
					type: "boolean",
				},
				bookmarked: {
					type: "boolean",
				},
			},
		},
	},
} as const;

export const CastCreatedResponseSchema = {
	type: "object",
	properties: {
		result: {
			type: "object",
			properties: {
				cast: {
					$ref: "#/components/schemas/Cast",
				},
			},
		},
	},
} as const;

export const RawChannelSchema = {
	type: "object",
	properties: {
		id: {
			type: "string",
		},
		url: {
			type: "string",
		},
		name: {
			type: "string",
		},
		description: {
			type: "string",
		},
		descriptionMentions: {
			type: "array",
			items: {
				type: "integer",
			},
		},
		descriptionMentionsPositions: {
			type: "array",
			items: {
				type: "integer",
			},
		},
		imageUrl: {
			type: "string",
		},
		headerImageUrl: {
			type: "string",
		},
		leadFid: {
			type: "integer",
		},
		moderatorFids: {
			type: "array",
			items: {
				type: "integer",
			},
		},
		createdAt: {
			type: "integer",
		},
		followerCount: {
			type: "integer",
		},
		memberCount: {
			type: "integer",
		},
		pinnedCastHash: {
			type: "string",
		},
		publicCasting: {
			type: "boolean",
		},
		externalLink: {
			type: "object",
			properties: {
				title: {
					type: "string",
				},
				url: {
					type: "string",
				},
			},
		},
	},
} as const;

export const ChannelListResponseSchema = {
	type: "object",
	properties: {
		result: {
			type: "object",
			properties: {
				channels: {
					type: "array",
					items: {
						$ref: "#/components/schemas/RawChannel",
					},
				},
			},
		},
	},
} as const;

export const RawChannelResponseSchema = {
	type: "object",
	properties: {
		result: {
			type: "object",
			properties: {
				channel: {
					$ref: "#/components/schemas/RawChannel",
				},
			},
		},
	},
} as const;

export const ChannelFollowerSchema = {
	type: "object",
	properties: {
		fid: {
			type: "integer",
		},
		followedAt: {
			type: "integer",
		},
	},
} as const;

export const ChannelFollowersResponseSchema = {
	allOf: [
		{
			$ref: "#/components/schemas/PaginatedResponse",
		},
		{
			type: "object",
			properties: {
				result: {
					type: "object",
					properties: {
						users: {
							type: "array",
							items: {
								$ref: "#/components/schemas/ChannelFollower",
							},
						},
					},
				},
			},
		},
	],
} as const;

export const ChannelFollowStatusSchema = {
	type: "object",
	properties: {
		following: {
			type: "boolean",
		},
		followedAt: {
			type: "integer",
		},
	},
} as const;

export const ChannelFollowStatusResponseSchema = {
	type: "object",
	properties: {
		result: {
			$ref: "#/components/schemas/ChannelFollowStatus",
		},
	},
} as const;

export const ActionSchema = {
	type: "object",
	properties: {
		name: {
			type: "string",
		},
		icon: {
			type: "string",
		},
		description: {
			type: "string",
		},
		aboutUrl: {
			type: "string",
			format: "uri",
		},
		imageUrl: {
			type: "string",
			format: "uri",
		},
		actionUrl: {
			type: "string",
			format: "uri",
		},
		action: {
			type: "object",
			properties: {
				actionType: {
					type: "string",
					enum: ["post", "get", "put", "delete"],
				},
				postUrl: {
					type: "string",
					format: "uri",
				},
			},
		},
	},
} as const;

export const WinnerSchema = {
	type: "object",
	properties: {
		fid: {
			type: "integer",
			description: "The fid of the winner",
		},
		domain: {
			type: "string",
			description: "The domain of the winner",
		},
		frameName: {
			type: "string",
			description: "The name of the frame (mini app)",
		},
		score: {
			type: "integer",
			description: "The score of the winner",
		},
		rank: {
			type: "integer",
			description: "The rank of the winner",
		},
		rewardCents: {
			type: "integer",
			description: "The reward amount in cents",
		},
		walletAddress: {
			type: "string",
			description: "The wallet address of the winner (optional)",
		},
	},
} as const;

export const FrameSchema = {
	type: "object",
	properties: {
		domain: {
			type: "string",
		},
		name: {
			type: "string",
		},
		iconUrl: {
			type: "string",
		},
		homeUrl: {
			type: "string",
		},
		splashImageUrl: {
			type: "string",
		},
		splashBackgroundColor: {
			type: "string",
		},
		buttonTitle: {
			type: ["string", "null"],
		},
		imageUrl: {
			type: ["string", "null"],
		},
		supportsNotifications: {
			type: "boolean",
		},
		viewerContext: {
			type: "object",
			additionalProperties: true,
		},
		author: {
			$ref: "#/components/schemas/User",
		},
	},
} as const;

export const AppsByAuthorResponseSchema = {
	type: "object",
	properties: {
		result: {
			type: "object",
			properties: {
				frames: {
					type: "array",
					items: {
						$ref: "#/components/schemas/Frame",
					},
				},
			},
		},
	},
} as const;

export const ApiKeySchema = {
	type: "object",
	required: ["id", "createdAt", "expiresAt", "tag", "description"],
	properties: {
		id: {
			type: "string",
			format: "uuid",
			description: "Unique identifier for the API key",
		},
		createdAt: {
			type: "integer",
			format: "int64",
			description:
				"Timestamp when the API key was created (in milliseconds since epoch)",
		},
		expiresAt: {
			type: "integer",
			format: "int64",
			description:
				"Timestamp when the API key expires (in milliseconds since epoch)",
		},
		revokedAt: {
			type: ["string", "null"],
			format: "int64",
			description:
				"Timestamp when the API key was revoked, if applicable (in milliseconds since epoch)",
		},
		tag: {
			type: "string",
			description: "Short identifier tag for the API key",
		},
		description: {
			type: "string",
			description: "User-provided description of the API key's purpose",
		},
	},
} as const;

export const DirectCastSendResponseSchema = {
	$ref: "#/components/schemas/common_SuccessResponse",
} as const;
