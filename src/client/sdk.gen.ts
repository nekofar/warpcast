// This file is auto-generated by @hey-api/openapi-ts

import type {
  Client,
  Options as ClientOptions,
  TDataShape,
} from '@hey-api/client-fetch'
import { client as _heyApiClient } from './client.gen'
import {
  getCreatorRewardWinnersResponseTransformer,
  getStarterPackMembersResponseTransformer,
} from './transformers.gen'
import type {
  AcceptChannelInviteData,
  AcceptChannelInviteResponse,
  AttachEmbedsData,
  AttachEmbedsResponse2,
  BanUserFromChannelData,
  BanUserFromChannelResponse,
  BlockUserData,
  BlockUserResponse,
  CheckUserChannelFollowStatusData,
  CheckUserChannelFollowStatusResponse,
  CreateCastData,
  CreateCastResponse,
  CreateDraftCastsData,
  CreateDraftCastsResponse,
  DeleteCastData,
  DeleteCastResponse,
  DeleteDraftCastData,
  DeleteDraftCastResponse,
  DiscoverChannelsData,
  DiscoverChannelsResponse2,
  FollowChannelData,
  FollowChannelResponse,
  GetAccountVerificationsData,
  GetAccountVerificationsResponse,
  GetAllChannelsData,
  GetAllChannelsResponse,
  GetAvailableInvitesData,
  GetAvailableInvitesResponse,
  GetBlockedUsersData,
  GetBlockedUsersResponse,
  GetBookmarkedCastsData,
  GetBookmarkedCastsResponse,
  GetCastLikesData,
  GetCastLikesResponse,
  GetCastQuotesData,
  GetCastQuotesResponse,
  GetCastRecastersData,
  GetCastRecastersResponse,
  GetChannelBannedUsersData,
  GetChannelBannedUsersResponse,
  GetChannelData,
  GetChannelDetailsData,
  GetChannelDetailsResponse,
  GetChannelFollowersData,
  GetChannelFollowersResponse,
  GetChannelFollowersYouKnowData,
  GetChannelFollowersYouKnowResponse,
  GetChannelInvitesData,
  GetChannelInvitesResponse,
  GetChannelMembersData,
  GetChannelMembersResponse,
  GetChannelModeratedCastsData,
  GetChannelModeratedCastsResponse,
  GetChannelResponse,
  GetChannelRestrictedUsersData,
  GetChannelRestrictedUsersResponse,
  GetChannelStreaksForUserData,
  GetChannelStreaksForUserResponse,
  GetChannelUsersData,
  GetChannelUsersResponse,
  GetCreatorRewardWinnersData,
  GetCreatorRewardWinnersResponse,
  GetCurrentUserData,
  GetCurrentUserResponse,
  GetDirectCastConversationData,
  GetDirectCastConversationResponse,
  GetDirectCastInboxData,
  GetDirectCastInboxError,
  GetDirectCastInboxResponse,
  GetDiscoverableActionsData,
  GetDiscoverableActionsResponse,
  GetDiscoverableComposerActionsData,
  GetDiscoverableComposerActionsResponse,
  GetDraftCastsData,
  GetDraftCastsResponse,
  GetFeedItemsData,
  GetFeedItemsError,
  GetFeedItemsResponse,
  GetFollowersData,
  GetFollowersResponse,
  GetFollowingData,
  GetFollowingResponse,
  GetHighlightedChannelsData,
  GetHighlightedChannelsError,
  GetHighlightedChannelsResponse,
  GetMutedKeywordsData,
  GetMutedKeywordsResponse,
  GetMutualFollowersData,
  GetMutualFollowersResponse,
  GetNotificationsData,
  GetNotificationsResponse,
  GetRewardsLeaderboardData,
  GetRewardsLeaderboardResponse,
  GetRewardsMetadataData,
  GetRewardsMetadataResponse,
  GetSponsoredInvitesData,
  GetSponsoredInvitesResponse,
  GetStarterPackData,
  GetStarterPackMembersData,
  GetStarterPackMembersResponse,
  GetStarterPackResponse,
  GetStarterPackUsersData,
  GetStarterPackUsersResponse,
  GetSuggestedStarterPacksData,
  GetSuggestedStarterPacksResponse,
  GetSuggestedUsersData,
  GetSuggestedUsersResponse,
  GetTopFrameAppsData,
  GetTopFrameAppsResponse,
  GetUnseenCountsData,
  GetUnseenCountsResponse,
  GetUserAppContextData,
  GetUserAppContextError,
  GetUserAppContextResponse,
  GetUserByFidData,
  GetUserByFidError,
  GetUserByFidResponse,
  GetUserByUsernameData,
  GetUserByUsernameResponse,
  GetUserByVerificationAddressData,
  GetUserByVerificationAddressResponse,
  GetUserData,
  GetUserError,
  GetUserFavoriteFramesData,
  GetUserFavoriteFramesResponse,
  GetUserFollowedChannelsData,
  GetUserFollowedChannelsResponse,
  GetUserFollowingChannelsData,
  GetUserFollowingChannelsError,
  GetUserFollowingChannelsResponse,
  GetUserOnboardingStateData,
  GetUserOnboardingStateError,
  GetUserOnboardingStateResponse,
  GetUserPreferencesData,
  GetUserPreferencesError,
  GetUserPreferencesResponse,
  GetUserPrimaryAddressData,
  GetUserPrimaryAddressResponse,
  GetUserPrimaryAddressesData,
  GetUserPrimaryAddressesResponse,
  GetUserResponse,
  GetUserRewardsScoresData,
  GetUserRewardsScoresResponse,
  GetUserStarterPacksData,
  GetUserStarterPacksResponse,
  GetUserThreadCastsData,
  GetUserThreadCastsResponse,
  GetVerificationsData,
  GetVerificationsResponse,
  InviteUserToChannelData,
  InviteUserToChannelResponse,
  LikeCastData,
  LikeCastResponse,
  MarkAllNotificationsReadData,
  MarkAllNotificationsReadResponse,
  ModerateCastData,
  ModerateCastResponse,
  MuteKeywordData,
  MuteKeywordResponse,
  PinCastToChannelData,
  PinCastToChannelResponse,
  RecastCastData,
  RecastCastResponse,
  RemoveChannelInviteData,
  RemoveChannelInviteResponse,
  SearchChannelsData,
  SearchChannelsResponse,
  SendDirectCastData,
  SendDirectCastResponse,
  SetLastCheckedTimestampData,
  SetLastCheckedTimestampResponse,
  UnbanUserFromChannelData,
  UnbanUserFromChannelResponse,
  UnblockUserData,
  UnblockUserResponse,
  UndoRecastData,
  UndoRecastResponse,
  UnfollowChannelData,
  UnfollowChannelResponse,
  UnlikeCastData,
  UnlikeCastResponse,
  UnmuteKeywordData,
  UnmuteKeywordResponse,
  UnpinCastFromChannelData,
  UnpinCastFromChannelResponse,
} from './types.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Get onboarding state
 * Retrieves the current onboarding state for the authenticated user
 * @param options
 */
export const getUserOnboardingState = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserOnboardingStateData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserOnboardingStateResponse,
    GetUserOnboardingStateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/onboarding-state',
    ...options,
  })
}

/**
 * Get user by fid
 * Retrieves user information based on FID
 * @param options
 */
export const getUserByFid = <ThrowOnError extends boolean = false>(
  options: Options<GetUserByFidData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserByFidResponse,
    GetUserByFidError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user-by-fid',
    ...options,
  })
}

/**
 * Get user's direct cast inbox
 * Retrieves direct casts sent to the authenticated user
 * @param options
 */
export const getDirectCastInbox = <ThrowOnError extends boolean = false>(
  options?: Options<GetDirectCastInboxData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetDirectCastInboxResponse,
    GetDirectCastInboxError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/direct-cast-inbox',
    ...options,
  })
}

/**
 * Get user app context
 * Retrieves application context information for the authenticated user
 * @param options
 */
export const getUserAppContext = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserAppContextData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserAppContextResponse,
    GetUserAppContextError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user-app-context',
    ...options,
  })
}

/**
 * Get user preferences
 * Retrieves preference settings for the authenticated user
 * @param options
 */
export const getUserPreferences = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserPreferencesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserPreferencesResponse,
    GetUserPreferencesError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user-preferences',
    ...options,
  })
}

/**
 * Get highlighted channels
 * Retrieves a list of featured or recommended channels
 * @param options
 */
export const getHighlightedChannels = <ThrowOnError extends boolean = false>(
  options?: Options<GetHighlightedChannelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetHighlightedChannelsResponse,
    GetHighlightedChannelsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/highlighted-channels',
    ...options,
  })
}

/**
 * Get feed items
 * Retrieves feed content based on provided filters and parameters
 * @param options
 */
export const getFeedItems = <ThrowOnError extends boolean = false>(
  options: Options<GetFeedItemsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    GetFeedItemsResponse,
    GetFeedItemsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/feed-items',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get user information
 * Retrieves detailed user information based on FID
 * @param options
 */
export const getUser = <ThrowOnError extends boolean = false>(
  options: Options<GetUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserResponse,
    GetUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user',
    ...options,
  })
}

/**
 * Get user following channels
 * Retrieves channels that the authenticated user is following
 * @param options
 */
export const getUserFollowingChannels = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserFollowingChannelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserFollowingChannelsResponse,
    GetUserFollowingChannelsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user-following-channels',
    ...options,
  })
}

/**
 * Get suggested users
 * @param options
 */
export const getSuggestedUsers = <ThrowOnError extends boolean = false>(
  options?: Options<GetSuggestedUsersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSuggestedUsersResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/suggested-users',
    ...options,
  })
}

/**
 * Get user's favorite frames
 * @param options
 */
export const getUserFavoriteFrames = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserFavoriteFramesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserFavoriteFramesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/favorite-frames',
    ...options,
  })
}

/**
 * Get user by username
 * @param options
 */
export const getUserByUsername = <ThrowOnError extends boolean = false>(
  options: Options<GetUserByUsernameData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserByUsernameResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user-by-username',
    ...options,
  })
}

/**
 * Get channel streaks for user
 * @param options
 */
export const getChannelStreaksForUser = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelStreaksForUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelStreaksForUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/channel-streaks',
    ...options,
  })
}

/**
 * Get unseen counts and feed state
 * @param options
 */
export const getUnseenCounts = <ThrowOnError extends boolean = false>(
  options?: Options<GetUnseenCountsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUnseenCountsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/unseen',
    ...options,
  })
}

/**
 * Get casts from a user thread
 * @param options
 */
export const getUserThreadCasts = <ThrowOnError extends boolean = false>(
  options: Options<GetUserThreadCastsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserThreadCastsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user-thread-casts',
    ...options,
  })
}

/**
 * Get mutual followers in a channel
 * @param options
 */
export const getChannelFollowersYouKnow = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetChannelFollowersYouKnowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelFollowersYouKnowResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/channel-followers-you-know',
    ...options,
  })
}

/**
 * Mark all notifications as read
 * @param options
 */
export const markAllNotificationsRead = <ThrowOnError extends boolean = false>(
  options: Options<MarkAllNotificationsReadData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    MarkAllNotificationsReadResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/mark-all-notifications-read',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get notifications for a specific tab
 * Returns a list of notifications for the specified tab.
 * @param options
 */
export const getNotifications = <ThrowOnError extends boolean = false>(
  options: Options<GetNotificationsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetNotificationsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/notifications-for-tab',
    ...options,
  })
}

/**
 * Set last checked timestamp
 * Updates the last checked timestamp for notifications.
 * @param options
 */
export const setLastCheckedTimestamp = <ThrowOnError extends boolean = false>(
  options: Options<SetLastCheckedTimestampData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    SetLastCheckedTimestampResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/set-last-checked-timestamp',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get direct cast conversation
 * Fetches a direct cast conversation by conversationId.
 * @param options
 */
export const getDirectCastConversation = <ThrowOnError extends boolean = false>(
  options: Options<GetDirectCastConversationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDirectCastConversationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/direct-cast-conversation',
    ...options,
  })
}

/**
 * Discover channels
 * Retrieves a list of discoverable channels with optional limit.
 * @param options
 */
export const discoverChannels = <ThrowOnError extends boolean = false>(
  options?: Options<DiscoverChannelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    DiscoverChannelsResponse2,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/discover-channels',
    ...options,
  })
}

/**
 * Check available invites
 * Returns the number of allocated and currently available invites.
 * @param options
 */
export const getAvailableInvites = <ThrowOnError extends boolean = false>(
  options?: Options<GetAvailableInvitesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAvailableInvitesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/invites-available',
    ...options,
  })
}

/**
 * Get sponsored invites
 * Returns a list of Warpcast-sponsored invites available to the user.
 * @param options
 */
export const getSponsoredInvites = <ThrowOnError extends boolean = false>(
  options?: Options<GetSponsoredInvitesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSponsoredInvitesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/warpcast-sponsored-invites',
    ...options,
  })
}

/**
 * Get rewards leaderboard
 * Returns a list of users in the rewards leaderboard based on invite activity.
 * @param options
 */
export const getRewardsLeaderboard = <ThrowOnError extends boolean = false>(
  options: Options<GetRewardsLeaderboardData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRewardsLeaderboardResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/rewards-leaderboard',
    ...options,
  })
}

/**
 * Get invite rewards scores for a user
 * Returns current, previous, and all-time invite rewards scores for the specified user.
 * @param options
 */
export const getUserRewardsScores = <ThrowOnError extends boolean = false>(
  options: Options<GetUserRewardsScoresData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserRewardsScoresResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/rewards-scores-for-user',
    ...options,
  })
}

/**
 * Get invite rewards metadata
 * Returns metadata for the invite rewards program including the reward period and reward distribution details.
 * @param options
 */
export const getRewardsMetadata = <ThrowOnError extends boolean = false>(
  options: Options<GetRewardsMetadataData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRewardsMetadataResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/rewards-metadata',
    ...options,
  })
}

/**
 * Get bookmarked casts
 * Returns the most recent casts bookmarked by the user.
 * @param options
 */
export const getBookmarkedCasts = <ThrowOnError extends boolean = false>(
  options?: Options<GetBookmarkedCastsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetBookmarkedCastsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/bookmarked-casts',
    ...options,
  })
}

/**
 * Get starter packs
 * Returns starter packs created by a specific user.
 * @param options
 */
export const getUserStarterPacks = <ThrowOnError extends boolean = false>(
  options: Options<GetUserStarterPacksData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserStarterPacksResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v2/starter-packs',
    ...options,
  })
}

/**
 * Get suggested starter packs
 * Returns a list of suggested starter packs.
 * @param options
 */
export const getSuggestedStarterPacks = <ThrowOnError extends boolean = false>(
  options?: Options<GetSuggestedStarterPacksData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSuggestedStarterPacksResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v2/starter-packs/suggested',
    ...options,
  })
}

/**
 * Get a specific starter pack by ID
 * Returns a specific starter pack.
 * @param options
 */
export const getStarterPack = <ThrowOnError extends boolean = false>(
  options: Options<GetStarterPackData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetStarterPackResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v2/starter-pack',
    ...options,
  })
}

/**
 * Get users in a specific starter pack
 * Returns a list of users associated with a given starter pack.
 * @param options
 */
export const getStarterPackUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetStarterPackUsersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetStarterPackUsersResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v2/starter-pack-users',
    ...options,
  })
}

/**
 * Get channel details
 * Returns metadata about a channel.
 * @param options
 */
export const getChannel = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v2/channel',
    ...options,
  })
}

/**
 * Get members of a specific channel
 * Returns users who are members of a specific channel.
 * @param options
 */
export const getChannelUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelUsersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelUsersResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v1/channel-users',
    ...options,
  })
}

/**
 * Get users a given user is following
 * Returns a list of users followed by a specified FID.
 * @param options
 */
export const getFollowing = <ThrowOnError extends boolean = false>(
  options: Options<GetFollowingData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetFollowingResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v2/following',
    ...options,
  })
}

/**
 * Get users following a given user
 * Returns a list of users who follow the specified FID.
 * @param options
 */
export const getFollowers = <ThrowOnError extends boolean = false>(
  options: Options<GetFollowersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetFollowersResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v2/followers',
    ...options,
  })
}

/**
 * Get mutual followers of a given user
 * Returns a list of users who follow the given FID and are followed by the viewer.
 * @param options
 */
export const getMutualFollowers = <ThrowOnError extends boolean = false>(
  options: Options<GetMutualFollowersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetMutualFollowersResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v2/followers-you-know',
    ...options,
  })
}

/**
 * Get top FrameApps
 * Returns a list of top FrameApps with optional pagination.
 * @param options
 */
export const getTopFrameApps = <ThrowOnError extends boolean = false>(
  options?: Options<GetTopFrameAppsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetTopFrameAppsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v1/top-frameapps',
    ...options,
  })
}

/**
 * Get verified addresses for an FID
 * Returns verified Ethereum addresses associated with a specific FID.
 * @param options
 */
export const getVerifications = <ThrowOnError extends boolean = false>(
  options: Options<GetVerificationsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetVerificationsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v2/verifications',
    ...options,
  })
}

/**
 * Get muted keywords
 * Returns a list of muted keywords for the authenticated user.
 * @param options
 */
export const getMutedKeywords = <ThrowOnError extends boolean = false>(
  options?: Options<GetMutedKeywordsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMutedKeywordsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v2/get-muted-keywords',
    ...options,
  })
}

/**
 * Mute a keyword
 * Mutes a keyword for the authenticated user with specified properties.
 * @param options
 */
export const muteKeyword = <ThrowOnError extends boolean = false>(
  options: Options<MuteKeywordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    MuteKeywordResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v2/mute-keyword',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Unmute a keyword
 * @param options
 */
export const unmuteKeyword = <ThrowOnError extends boolean = false>(
  options: Options<UnmuteKeywordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UnmuteKeywordResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/unmute-keyword',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Unlike a cast
 * @param options
 */
export const unlikeCast = <ThrowOnError extends boolean = false>(
  options: Options<UnlikeCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UnlikeCastResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/cast-likes',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get cast likes
 * @param options
 */
export const getCastLikes = <ThrowOnError extends boolean = false>(
  options: Options<GetCastLikesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCastLikesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/cast-likes',
    ...options,
  })
}

/**
 * Like a cast
 * @param options
 */
export const likeCast = <ThrowOnError extends boolean = false>(
  options: Options<LikeCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    LikeCastResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/cast-likes',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Undo recast
 * @param options
 */
export const undoRecast = <ThrowOnError extends boolean = false>(
  options: Options<UndoRecastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UndoRecastResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/recasts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Recast a cast
 * @param options
 */
export const recastCast = <ThrowOnError extends boolean = false>(
  options: Options<RecastCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    RecastCastResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/recasts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Attach embeds to a cast
 * @param options
 */
export const attachEmbeds = <ThrowOnError extends boolean = false>(
  options: Options<AttachEmbedsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    AttachEmbedsResponse2,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/cast-attachments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get cast recasters
 * @param options
 */
export const getCastRecasters = <ThrowOnError extends boolean = false>(
  options: Options<GetCastRecastersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCastRecastersResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/cast-recasters',
    ...options,
  })
}

/**
 * Get quotes of a cast
 * @param options
 */
export const getCastQuotes = <ThrowOnError extends boolean = false>(
  options: Options<GetCastQuotesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCastQuotesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/cast-quotes',
    ...options,
  })
}

/**
 * Get current user
 * @param options
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/me',
    ...options,
  })
}

/**
 * Search for channels
 * @param options
 */
export const searchChannels = <ThrowOnError extends boolean = false>(
  options?: Options<SearchChannelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    SearchChannelsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/search-channels',
    ...options,
  })
}

/**
 * Get draft cast storms
 * @param options
 */
export const getDraftCasts = <ThrowOnError extends boolean = false>(
  options?: Options<GetDraftCastsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetDraftCastsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/draft-caststorms',
    ...options,
  })
}

/**
 * Create a new draft casts
 * @param options
 */
export const createDraftCasts = <ThrowOnError extends boolean = false>(
  options: Options<CreateDraftCastsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDraftCastsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/draft-caststorms',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Delete a draft cast
 * @param options
 */
export const deleteDraftCast = <ThrowOnError extends boolean = false>(
  options: Options<DeleteDraftCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDraftCastResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/draft-casts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Delete a cast
 * @param options
 */
export const deleteCast = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCastResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/casts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Create a new cast
 * @param options
 */
export const createCast = <ThrowOnError extends boolean = false>(
  options: Options<CreateCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCastResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/casts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get all channels
 * Returns a list of all channels on Warpcast
 * @param options
 */
export const getAllChannels = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllChannelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllChannelsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v2/all-channels',
    ...options,
  })
}

/**
 * Get details of a specific channel
 * @param options
 */
export const getChannelDetails = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelDetailsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelDetailsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v1/channel',
    ...options,
  })
}

/**
 * Get followers of a channel
 * @param options
 */
export const getChannelFollowers = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelFollowersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelFollowersResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v1/channel-followers',
    ...options,
  })
}

/**
 * Get list of channels followed by a user
 * @param options
 */
export const getUserFollowedChannels = <ThrowOnError extends boolean = false>(
  options: Options<GetUserFollowedChannelsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserFollowedChannelsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v1/user-following-channels',
    ...options,
  })
}

/**
 * Check if a user is following a channel
 * @param options
 */
export const checkUserChannelFollowStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CheckUserChannelFollowStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    CheckUserChannelFollowStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/v1/user-channel',
    ...options,
  })
}

/**
 * Get members of a channel
 * @param options
 */
export const getChannelMembers = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelMembersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelMembersResponse,
    unknown,
    ThrowOnError
  >({
    url: '/fc/channel-members',
    ...options,
  })
}

/**
 * Remove a user's invite from a channel
 * @param options
 */
export const removeChannelInvite = <ThrowOnError extends boolean = false>(
  options: Options<RemoveChannelInviteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveChannelInviteResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-invites',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get channel invites
 * @param options
 */
export const getChannelInvites = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelInvitesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelInvitesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/fc/channel-invites',
    ...options,
  })
}

/**
 * Accept a channel invite
 * @param options
 */
export const acceptChannelInvite = <ThrowOnError extends boolean = false>(
  options: Options<AcceptChannelInviteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    AcceptChannelInviteResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-invites',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Invite a user to a channel
 * @param options
 */
export const inviteUserToChannel = <ThrowOnError extends boolean = false>(
  options: Options<InviteUserToChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    InviteUserToChannelResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-invites',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get moderated casts for a channel
 * @param options
 */
export const getChannelModeratedCasts = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelModeratedCastsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelModeratedCastsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/fc/moderated-casts',
    ...options,
  })
}

/**
 * Get restricted users in a channel
 * @param options
 */
export const getChannelRestrictedUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelRestrictedUsersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelRestrictedUsersResponse,
    unknown,
    ThrowOnError
  >({
    url: '/fc/channel-restricted-users',
    ...options,
  })
}

/**
 * Unban a user from a channel
 * @param options
 */
export const unbanUserFromChannel = <ThrowOnError extends boolean = false>(
  options: Options<UnbanUserFromChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UnbanUserFromChannelResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-bans',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get banned users in a channel
 * @param options
 */
export const getChannelBannedUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelBannedUsersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelBannedUsersResponse,
    unknown,
    ThrowOnError
  >({
    url: '/fc/channel-bans',
    ...options,
  })
}

/**
 * Ban a user from a channel
 * @param options
 */
export const banUserFromChannel = <ThrowOnError extends boolean = false>(
  options: Options<BanUserFromChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    BanUserFromChannelResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-bans',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Unfollow a channel
 * @param options
 */
export const unfollowChannel = <ThrowOnError extends boolean = false>(
  options: Options<UnfollowChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UnfollowChannelResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-follows',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Follow a channel
 * @param options
 */
export const followChannel = <ThrowOnError extends boolean = false>(
  options: Options<FollowChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    FollowChannelResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-follows',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Moderate a cast (e.g., hide it)
 * @param options
 */
export const moderateCast = <ThrowOnError extends boolean = false>(
  options: Options<ModerateCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ModerateCastResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/moderate-cast',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Unpin a cast from a channel
 * @param options
 */
export const unpinCastFromChannel = <ThrowOnError extends boolean = false>(
  options: Options<UnpinCastFromChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UnpinCastFromChannelResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/pinned-casts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Pin a cast to a channel
 * @param options
 */
export const pinCastToChannel = <ThrowOnError extends boolean = false>(
  options: Options<PinCastToChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PinCastToChannelResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/pinned-casts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get discoverable actions
 * @param options
 */
export const getDiscoverableActions = <ThrowOnError extends boolean = false>(
  options: Options<GetDiscoverableActionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDiscoverableActionsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/discover-actions',
    ...options,
  })
}

/**
 * Get top discoverable composer actions
 * @param options
 */
export const getDiscoverableComposerActions = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetDiscoverableComposerActionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDiscoverableComposerActionsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/discover-composer-actions',
    ...options,
  })
}

/**
 * Unblock a user
 * @param options
 */
export const unblockUser = <ThrowOnError extends boolean = false>(
  options: Options<UnblockUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UnblockUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/blocked-users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get list of blocked users
 * @param options
 */
export const getBlockedUsers = <ThrowOnError extends boolean = false>(
  options?: Options<GetBlockedUsersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetBlockedUsersResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/blocked-users',
    ...options,
  })
}

/**
 * Block a user
 * @param options
 */
export const blockUser = <ThrowOnError extends boolean = false>(
  options: Options<BlockUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    BlockUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/blocked-users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get account verifications
 * @param options
 */
export const getAccountVerifications = <ThrowOnError extends boolean = false>(
  options?: Options<GetAccountVerificationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAccountVerificationsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/fc/account-verifications',
    ...options,
  })
}

/**
 * Get creator reward winners
 * @param options
 */
export const getCreatorRewardWinners = <ThrowOnError extends boolean = false>(
  options?: Options<GetCreatorRewardWinnersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCreatorRewardWinnersResponse,
    unknown,
    ThrowOnError
  >({
    responseTransformer: getCreatorRewardWinnersResponseTransformer,
    url: '/v1/creator-rewards-winner-history',
    ...options,
  })
}

/**
 * Get User Primary Address
 * @param options
 */
export const getUserPrimaryAddress = <ThrowOnError extends boolean = false>(
  options: Options<GetUserPrimaryAddressData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserPrimaryAddressResponse,
    unknown,
    ThrowOnError
  >({
    url: '/fc/primary-address',
    ...options,
  })
}

/**
 * Get Multiple User Primary Addresses
 * @param options
 */
export const getUserPrimaryAddresses = <ThrowOnError extends boolean = false>(
  options: Options<GetUserPrimaryAddressesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserPrimaryAddressesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/fc/primary-addresses',
    ...options,
  })
}

/**
 * Get Starter Pack Members
 * @param options
 */
export const getStarterPackMembers = <ThrowOnError extends boolean = false>(
  options: Options<GetStarterPackMembersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetStarterPackMembersResponse,
    unknown,
    ThrowOnError
  >({
    responseTransformer: getStarterPackMembersResponseTransformer,
    url: '/fc/starter-pack-members',
    ...options,
  })
}

/**
 * Send a Direct Cast via External API
 * Send a programmatic Direct Cast to a recipient. The request must include a unique idempotency key.
 * @param options
 */
export const sendDirectCast = <ThrowOnError extends boolean = false>(
  options: Options<SendDirectCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    SendDirectCastResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/ext-send-direct-cast',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get user by verification address
 * Retrieves user information associated with the provided Ethereum verification address
 * @param options
 */
export const getUserByVerificationAddress = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetUserByVerificationAddressData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserByVerificationAddressResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user-by-verification',
    ...options,
  })
}
