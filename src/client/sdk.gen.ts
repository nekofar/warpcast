// This file is auto-generated by @hey-api/openapi-ts

import type {
  Client,
  Options as ClientOptions,
  TDataShape,
} from '@hey-api/client-fetch'
import { client as _heyApiClient } from './client.gen'
import {
  createCastResponseTransformer,
  getApiKeysResponseTransformer,
  getCastsByFidResponseTransformer,
  getCreatorRewardWinnersResponseTransformer,
  getDirectCastInboxResponseTransformer,
  getMiniAppAnalyticsRollupResponseTransformer,
  getProfileCastsResponseTransformer,
  getStarterPackMembersResponseTransformer,
  getUserLikedCastsResponseTransformer,
} from './transformers.gen'
import type {
  AcceptChannelInviteData,
  AcceptChannelInviteErrors,
  AcceptChannelInviteResponses,
  AttachEmbedsData,
  AttachEmbedsErrors,
  AttachEmbedsResponses,
  BanUserFromChannelData,
  BanUserFromChannelErrors,
  BanUserFromChannelResponses,
  BlockUserData,
  BlockUserErrors,
  BlockUserResponses,
  CheckUserChannelFollowStatusData,
  CheckUserChannelFollowStatusErrors,
  CheckUserChannelFollowStatusResponses,
  CreateApiKeyData,
  CreateApiKeyErrors,
  CreateApiKeyResponses,
  CreateCastData,
  CreateCastErrors,
  CreateCastResponses,
  CreateDraftCastsData,
  CreateDraftCastsErrors,
  CreateDraftCastsResponses,
  DeleteCastData,
  DeleteCastErrors,
  DeleteCastResponses,
  DeleteDraftCastData,
  DeleteDraftCastErrors,
  DeleteDraftCastResponses,
  DiscoverChannelsData,
  DiscoverChannelsErrors,
  DiscoverChannelsResponses,
  ExportMiniAppUserDataData,
  ExportMiniAppUserDataErrors,
  ExportMiniAppUserDataResponses,
  FollowChannelData,
  FollowChannelErrors,
  FollowChannelResponses,
  GetAccountVerificationsData,
  GetAccountVerificationsErrors,
  GetAccountVerificationsResponses,
  GetAllChannelsData,
  GetAllChannelsErrors,
  GetAllChannelsResponses,
  GetApiKeysData,
  GetApiKeysErrors,
  GetApiKeysResponses,
  GetAppsByAuthorData,
  GetAppsByAuthorErrors,
  GetAppsByAuthorResponses,
  GetAvailableInvitesData,
  GetAvailableInvitesErrors,
  GetAvailableInvitesResponses,
  GetBlockedUsersData,
  GetBlockedUsersErrors,
  GetBlockedUsersResponses,
  GetBookmarkedCastsData,
  GetBookmarkedCastsErrors,
  GetBookmarkedCastsResponses,
  GetCastLikesData,
  GetCastLikesErrors,
  GetCastLikesResponses,
  GetCastQuotesData,
  GetCastQuotesErrors,
  GetCastQuotesResponses,
  GetCastRecastersData,
  GetCastRecastersErrors,
  GetCastRecastersResponses,
  GetCastsByFidData,
  GetCastsByFidErrors,
  GetCastsByFidResponses,
  GetChannelBannedUsersData,
  GetChannelBannedUsersErrors,
  GetChannelBannedUsersResponses,
  GetChannelData,
  GetChannelDetailsData,
  GetChannelDetailsErrors,
  GetChannelDetailsResponses,
  GetChannelErrors,
  GetChannelFollowersData,
  GetChannelFollowersErrors,
  GetChannelFollowersResponses,
  GetChannelFollowersYouKnowData,
  GetChannelFollowersYouKnowErrors,
  GetChannelFollowersYouKnowResponses,
  GetChannelInvitesData,
  GetChannelInvitesErrors,
  GetChannelInvitesResponses,
  GetChannelMembersData,
  GetChannelMembersErrors,
  GetChannelMembersResponses,
  GetChannelModeratedCastsData,
  GetChannelModeratedCastsErrors,
  GetChannelModeratedCastsResponses,
  GetChannelResponses,
  GetChannelRestrictedUsersData,
  GetChannelRestrictedUsersErrors,
  GetChannelRestrictedUsersResponses,
  GetChannelStreaksForUserData,
  GetChannelStreaksForUserErrors,
  GetChannelStreaksForUserResponses,
  GetChannelUsersData,
  GetChannelUsersErrors,
  GetChannelUsersResponses,
  GetConnectedAccountsData,
  GetConnectedAccountsErrors,
  GetConnectedAccountsResponses,
  GetCreatorRewardWinnersData,
  GetCreatorRewardWinnersErrors,
  GetCreatorRewardWinnersResponses,
  GetCurrentUserData,
  GetCurrentUserErrors,
  GetCurrentUserResponses,
  GetDeveloperRewardWinnersData,
  GetDeveloperRewardWinnersErrors,
  GetDeveloperRewardWinnersResponses,
  GetDirectCastConversationData,
  GetDirectCastConversationErrors,
  GetDirectCastConversationResponses,
  GetDirectCastInboxData,
  GetDirectCastInboxErrors,
  GetDirectCastInboxResponses,
  GetDiscoverableActionsData,
  GetDiscoverableActionsErrors,
  GetDiscoverableActionsResponses,
  GetDiscoverableComposerActionsData,
  GetDiscoverableComposerActionsErrors,
  GetDiscoverableComposerActionsResponses,
  GetDomainManifestData,
  GetDomainManifestErrors,
  GetDomainManifestResponses,
  GetDraftCastsData,
  GetDraftCastsErrors,
  GetDraftCastsResponses,
  GetFarcasterJsonData,
  GetFarcasterJsonErrors,
  GetFarcasterJsonResponses,
  GetFeedItemsData,
  GetFeedItemsErrors,
  GetFeedItemsResponses,
  GetFollowersData,
  GetFollowersErrors,
  GetFollowersResponses,
  GetFollowingData,
  GetFollowingErrors,
  GetFollowingResponses,
  GetHighlightedChannelsData,
  GetHighlightedChannelsErrors,
  GetHighlightedChannelsResponses,
  GetMetaTagsData,
  GetMetaTagsErrors,
  GetMetaTagsResponses,
  GetMiniAppAnalyticsRollupData,
  GetMiniAppAnalyticsRollupErrors,
  GetMiniAppAnalyticsRollupResponses,
  GetMutedKeywordsData,
  GetMutedKeywordsErrors,
  GetMutedKeywordsResponses,
  GetMutualFollowersData,
  GetMutualFollowersErrors,
  GetMutualFollowersResponses,
  GetNotificationsData,
  GetNotificationsErrors,
  GetNotificationsResponses,
  GetOwnedDomainsData,
  GetOwnedDomainsErrors,
  GetOwnedDomainsResponses,
  GetProfileCastsData,
  GetProfileCastsErrors,
  GetProfileCastsResponses,
  GetRewardsLeaderboardData,
  GetRewardsLeaderboardErrors,
  GetRewardsLeaderboardResponses,
  GetRewardsMetadataData,
  GetRewardsMetadataErrors,
  GetRewardsMetadataResponses,
  GetSponsoredInvitesData,
  GetSponsoredInvitesErrors,
  GetSponsoredInvitesResponses,
  GetStarterPackData,
  GetStarterPackErrors,
  GetStarterPackMembersData,
  GetStarterPackMembersErrors,
  GetStarterPackMembersResponses,
  GetStarterPackResponses,
  GetStarterPackUsersData,
  GetStarterPackUsersErrors,
  GetStarterPackUsersResponses,
  GetSuggestedStarterPacksData,
  GetSuggestedStarterPacksErrors,
  GetSuggestedStarterPacksResponses,
  GetSuggestedUsersData,
  GetSuggestedUsersErrors,
  GetSuggestedUsersResponses,
  GetTopFrameAppsData,
  GetTopFrameAppsErrors,
  GetTopFrameAppsResponses,
  GetUnseenCountsData,
  GetUnseenCountsErrors,
  GetUnseenCountsResponses,
  GetUserAppContextData,
  GetUserAppContextErrors,
  GetUserAppContextResponses,
  GetUserByFidData,
  GetUserByFidErrors,
  GetUserByFidResponses,
  GetUserByUsernameData,
  GetUserByUsernameErrors,
  GetUserByUsernameResponses,
  GetUserByVerificationAddressData,
  GetUserByVerificationAddressErrors,
  GetUserByVerificationAddressResponses,
  GetUserData,
  GetUserErrors,
  GetUserFavoriteFramesData,
  GetUserFavoriteFramesErrors,
  GetUserFavoriteFramesResponses,
  GetUserFollowedChannelsData,
  GetUserFollowedChannelsErrors,
  GetUserFollowedChannelsResponses,
  GetUserFollowingChannelsData,
  GetUserFollowingChannelsErrors,
  GetUserFollowingChannelsResponses,
  GetUserLikedCastsData,
  GetUserLikedCastsErrors,
  GetUserLikedCastsResponses,
  GetUserOnboardingStateData,
  GetUserOnboardingStateErrors,
  GetUserOnboardingStateResponses,
  GetUserPreferencesData,
  GetUserPreferencesErrors,
  GetUserPreferencesResponses,
  GetUserPrimaryAddressData,
  GetUserPrimaryAddressErrors,
  GetUserPrimaryAddressesData,
  GetUserPrimaryAddressesErrors,
  GetUserPrimaryAddressesResponses,
  GetUserPrimaryAddressResponses,
  GetUserResponses,
  GetUserRewardsScoresData,
  GetUserRewardsScoresErrors,
  GetUserRewardsScoresResponses,
  GetUserStarterPacksData,
  GetUserStarterPacksErrors,
  GetUserStarterPacksResponses,
  GetUserThreadCastsData,
  GetUserThreadCastsErrors,
  GetUserThreadCastsResponses,
  GetVerificationsData,
  GetVerificationsErrors,
  GetVerificationsResponses,
  InspectImageUrlData,
  InspectImageUrlErrors,
  InspectImageUrlResponses,
  InspectMiniAppUrlData,
  InspectMiniAppUrlErrors,
  InspectMiniAppUrlResponses,
  InviteUserToChannelData,
  InviteUserToChannelErrors,
  InviteUserToChannelResponses,
  LikeCastData,
  LikeCastErrors,
  LikeCastResponses,
  MarkAllNotificationsReadData,
  MarkAllNotificationsReadErrors,
  MarkAllNotificationsReadResponses,
  ModerateCastData,
  ModerateCastErrors,
  ModerateCastResponses,
  MuteKeywordData,
  MuteKeywordErrors,
  MuteKeywordResponses,
  PinCastToChannelData,
  PinCastToChannelErrors,
  PinCastToChannelResponses,
  RecastCastData,
  RecastCastErrors,
  RecastCastResponses,
  RemoveChannelInviteData,
  RemoveChannelInviteErrors,
  RemoveChannelInviteResponses,
  RevokeApiKeyData,
  RevokeApiKeyErrors,
  RevokeApiKeyResponses,
  SearchChannelsData,
  SearchChannelsErrors,
  SearchChannelsResponses,
  SendDirectCastData,
  SendDirectCastErrors,
  SendDirectCastResponses,
  SetLastCheckedTimestampData,
  SetLastCheckedTimestampErrors,
  SetLastCheckedTimestampResponses,
  UnbanUserFromChannelData,
  UnbanUserFromChannelErrors,
  UnbanUserFromChannelResponses,
  UnblockUserData,
  UnblockUserErrors,
  UnblockUserResponses,
  UndoRecastData,
  UndoRecastErrors,
  UndoRecastResponses,
  UnfollowChannelData,
  UnfollowChannelErrors,
  UnfollowChannelResponses,
  UnlikeCastData,
  UnlikeCastErrors,
  UnlikeCastResponses,
  UnmuteKeywordData,
  UnmuteKeywordErrors,
  UnmuteKeywordResponses,
  UnpinCastFromChannelData,
  UnpinCastFromChannelErrors,
  UnpinCastFromChannelResponses,
} from './types.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Get onboarding state
 * Retrieves the current onboarding state for the authenticated user
 * @param options
 */
export const getUserOnboardingState = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserOnboardingStateData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserOnboardingStateResponses,
    GetUserOnboardingStateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/onboarding-state',
    ...options,
  })
}

/**
 * Get user by fid
 * Retrieves user information based on FID
 * @param options
 */
export const getUserByFid = <ThrowOnError extends boolean = false>(
  options: Options<GetUserByFidData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserByFidResponses,
    GetUserByFidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user-by-fid',
    ...options,
  })
}

/**
 * Get user's direct cast inbox
 * Retrieves direct casts sent to the authenticated user
 * @param options
 */
export const getDirectCastInbox = <ThrowOnError extends boolean = false>(
  options?: Options<GetDirectCastInboxData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetDirectCastInboxResponses,
    GetDirectCastInboxErrors,
    ThrowOnError
  >({
    responseTransformer: getDirectCastInboxResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/direct-cast-inbox',
    ...options,
  })
}

/**
 * Get user app context
 * Retrieves application context information for the authenticated user
 * @param options
 */
export const getUserAppContext = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserAppContextData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserAppContextResponses,
    GetUserAppContextErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user-app-context',
    ...options,
  })
}

/**
 * Get user preferences
 * Retrieves preference settings for the authenticated user
 * @param options
 */
export const getUserPreferences = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserPreferencesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserPreferencesResponses,
    GetUserPreferencesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user-preferences',
    ...options,
  })
}

/**
 * Get highlighted channels
 * Retrieves a list of featured or recommended channels
 * @param options
 */
export const getHighlightedChannels = <ThrowOnError extends boolean = false>(
  options?: Options<GetHighlightedChannelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetHighlightedChannelsResponses,
    GetHighlightedChannelsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/highlighted-channels',
    ...options,
  })
}

/**
 * Get feed items
 * Retrieves feed content based on provided filters and parameters
 * @param options
 */
export const getFeedItems = <ThrowOnError extends boolean = false>(
  options: Options<GetFeedItemsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    GetFeedItemsResponses,
    GetFeedItemsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/feed-items',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get user information
 * Retrieves detailed user information based on FID
 * @param options
 */
export const getUser = <ThrowOnError extends boolean = false>(
  options: Options<GetUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserResponses,
    GetUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user',
    ...options,
  })
}

/**
 * Get user following channels
 * Retrieves channels that the authenticated user is following
 * @param options
 */
export const getUserFollowingChannels = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserFollowingChannelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserFollowingChannelsResponses,
    GetUserFollowingChannelsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user-following-channels',
    ...options,
  })
}

/**
 * Get suggested users
 * @param options
 */
export const getSuggestedUsers = <ThrowOnError extends boolean = false>(
  options?: Options<GetSuggestedUsersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSuggestedUsersResponses,
    GetSuggestedUsersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/suggested-users',
    ...options,
  })
}

/**
 * Get user's favorite frames
 * @param options
 */
export const getUserFavoriteFrames = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserFavoriteFramesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserFavoriteFramesResponses,
    GetUserFavoriteFramesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/favorite-frames',
    ...options,
  })
}

/**
 * Get user by username
 * @param options
 */
export const getUserByUsername = <ThrowOnError extends boolean = false>(
  options: Options<GetUserByUsernameData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserByUsernameResponses,
    GetUserByUsernameErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user-by-username',
    ...options,
  })
}

/**
 * Get channel streaks for user
 * @param options
 */
export const getChannelStreaksForUser = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelStreaksForUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelStreaksForUserResponses,
    GetChannelStreaksForUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/channel-streaks',
    ...options,
  })
}

/**
 * Get unseen counts and feed state
 * @param options
 */
export const getUnseenCounts = <ThrowOnError extends boolean = false>(
  options?: Options<GetUnseenCountsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUnseenCountsResponses,
    GetUnseenCountsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/unseen',
    ...options,
  })
}

/**
 * Get casts from a user thread
 * Retrieves casts from a specific thread by a user
 * @param options
 */
export const getUserThreadCasts = <ThrowOnError extends boolean = false>(
  options: Options<GetUserThreadCastsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserThreadCastsResponses,
    GetUserThreadCastsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user-thread-casts',
    ...options,
  })
}

/**
 * Get mutual followers in a channel
 * @param options
 */
export const getChannelFollowersYouKnow = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetChannelFollowersYouKnowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelFollowersYouKnowResponses,
    GetChannelFollowersYouKnowErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/channel-followers-you-know',
    ...options,
  })
}

/**
 * Mark all notifications as read
 * @param options
 */
export const markAllNotificationsRead = <ThrowOnError extends boolean = false>(
  options: Options<MarkAllNotificationsReadData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    MarkAllNotificationsReadResponses,
    MarkAllNotificationsReadErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/mark-all-notifications-read',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get notifications for a specific tab
 * Returns a list of notifications for the specified tab.
 * @param options
 */
export const getNotifications = <ThrowOnError extends boolean = false>(
  options: Options<GetNotificationsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetNotificationsResponses,
    GetNotificationsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/notifications-for-tab',
    ...options,
  })
}

/**
 * Set last checked timestamp
 * Updates the last checked timestamp for notifications.
 * @param options
 */
export const setLastCheckedTimestamp = <ThrowOnError extends boolean = false>(
  options: Options<SetLastCheckedTimestampData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    SetLastCheckedTimestampResponses,
    SetLastCheckedTimestampErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/set-last-checked-timestamp',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get direct cast conversation
 * Fetches a direct cast conversation by conversationId.
 * @param options
 */
export const getDirectCastConversation = <ThrowOnError extends boolean = false>(
  options: Options<GetDirectCastConversationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDirectCastConversationResponses,
    GetDirectCastConversationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/direct-cast-conversation',
    ...options,
  })
}

/**
 * Discover channels
 * Retrieves a list of discoverable channels with optional limit.
 * @param options
 */
export const discoverChannels = <ThrowOnError extends boolean = false>(
  options?: Options<DiscoverChannelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    DiscoverChannelsResponses,
    DiscoverChannelsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/discover-channels',
    ...options,
  })
}

/**
 * Check available invites
 * Returns the number of allocated and currently available invites.
 * @param options
 */
export const getAvailableInvites = <ThrowOnError extends boolean = false>(
  options?: Options<GetAvailableInvitesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAvailableInvitesResponses,
    GetAvailableInvitesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/invites-available',
    ...options,
  })
}

/**
 * Get sponsored invites
 * Returns a list of Warpcast-sponsored invites available to the user.
 * @param options
 */
export const getSponsoredInvites = <ThrowOnError extends boolean = false>(
  options?: Options<GetSponsoredInvitesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSponsoredInvitesResponses,
    GetSponsoredInvitesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/warpcast-sponsored-invites',
    ...options,
  })
}

/**
 * Get rewards leaderboard
 * Returns a list of users in the rewards leaderboard based on invite activity.
 * @param options
 */
export const getRewardsLeaderboard = <ThrowOnError extends boolean = false>(
  options: Options<GetRewardsLeaderboardData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRewardsLeaderboardResponses,
    GetRewardsLeaderboardErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/rewards-leaderboard',
    ...options,
  })
}

/**
 * Get invite rewards scores for a user
 * Returns current, previous, and all-time invite rewards scores for the specified user.
 * @param options
 */
export const getUserRewardsScores = <ThrowOnError extends boolean = false>(
  options: Options<GetUserRewardsScoresData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserRewardsScoresResponses,
    GetUserRewardsScoresErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/rewards-scores-for-user',
    ...options,
  })
}

/**
 * Get invite rewards metadata
 * Returns metadata for the invite rewards program including the reward period and reward distribution details.
 * @param options
 */
export const getRewardsMetadata = <ThrowOnError extends boolean = false>(
  options: Options<GetRewardsMetadataData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRewardsMetadataResponses,
    GetRewardsMetadataErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/rewards-metadata',
    ...options,
  })
}

/**
 * Get bookmarked casts
 * Returns the most recent casts bookmarked by the user.
 * @param options
 */
export const getBookmarkedCasts = <ThrowOnError extends boolean = false>(
  options?: Options<GetBookmarkedCastsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetBookmarkedCastsResponses,
    GetBookmarkedCastsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/bookmarked-casts',
    ...options,
  })
}

/**
 * Get starter packs
 * Returns starter packs created by a specific user.
 * @param options
 */
export const getUserStarterPacks = <ThrowOnError extends boolean = false>(
  options: Options<GetUserStarterPacksData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserStarterPacksResponses,
    GetUserStarterPacksErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/starter-packs',
    ...options,
  })
}

/**
 * Get suggested starter packs
 * Returns a list of suggested starter packs.
 * @param options
 */
export const getSuggestedStarterPacks = <ThrowOnError extends boolean = false>(
  options?: Options<GetSuggestedStarterPacksData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSuggestedStarterPacksResponses,
    GetSuggestedStarterPacksErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/starter-packs/suggested',
    ...options,
  })
}

/**
 * Get a specific starter pack by ID
 * Returns a specific starter pack.
 * @param options
 */
export const getStarterPack = <ThrowOnError extends boolean = false>(
  options: Options<GetStarterPackData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetStarterPackResponses,
    GetStarterPackErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/starter-pack',
    ...options,
  })
}

/**
 * Get users in a specific starter pack
 * Returns a list of users associated with a given starter pack.
 * @param options
 */
export const getStarterPackUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetStarterPackUsersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetStarterPackUsersResponses,
    GetStarterPackUsersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/starter-pack-users',
    ...options,
  })
}

/**
 * Get channel details
 * Returns metadata about a channel.
 * @param options
 */
export const getChannel = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelResponses,
    GetChannelErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/channel',
    ...options,
  })
}

/**
 * Get members of a specific channel
 * Returns users who are members of a specific channel.
 * @param options
 */
export const getChannelUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelUsersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelUsersResponses,
    GetChannelUsersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/channel-users',
    ...options,
  })
}

/**
 * Get users a given user is following
 * Returns a list of users followed by a specified FID.
 * @param options
 */
export const getFollowing = <ThrowOnError extends boolean = false>(
  options: Options<GetFollowingData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetFollowingResponses,
    GetFollowingErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/following',
    ...options,
  })
}

/**
 * Get users following a given user
 * Returns a list of users who follow the specified FID.
 * @param options
 */
export const getFollowers = <ThrowOnError extends boolean = false>(
  options: Options<GetFollowersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetFollowersResponses,
    GetFollowersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/followers',
    ...options,
  })
}

/**
 * Get mutual followers of a given user
 * Returns a list of users who follow the given FID and are followed by the viewer.
 * @param options
 */
export const getMutualFollowers = <ThrowOnError extends boolean = false>(
  options: Options<GetMutualFollowersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetMutualFollowersResponses,
    GetMutualFollowersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/followers-you-know',
    ...options,
  })
}

/**
 * Get top FrameApps
 * Returns a list of top FrameApps with optional pagination.
 * @param options
 */
export const getTopFrameApps = <ThrowOnError extends boolean = false>(
  options?: Options<GetTopFrameAppsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetTopFrameAppsResponses,
    GetTopFrameAppsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/top-frameapps',
    ...options,
  })
}

/**
 * Get verified addresses for an FID
 * Returns verified Ethereum addresses associated with a specific FID.
 * @param options
 */
export const getVerifications = <ThrowOnError extends boolean = false>(
  options: Options<GetVerificationsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetVerificationsResponses,
    GetVerificationsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/verifications',
    ...options,
  })
}

/**
 * Get muted keywords
 * Returns a list of muted keywords for the authenticated user.
 * @param options
 */
export const getMutedKeywords = <ThrowOnError extends boolean = false>(
  options?: Options<GetMutedKeywordsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMutedKeywordsResponses,
    GetMutedKeywordsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/get-muted-keywords',
    ...options,
  })
}

/**
 * Mute a keyword
 * Mutes a keyword for the authenticated user with specified properties.
 * @param options
 */
export const muteKeyword = <ThrowOnError extends boolean = false>(
  options: Options<MuteKeywordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    MuteKeywordResponses,
    MuteKeywordErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/mute-keyword',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Unmute a keyword
 * @param options
 */
export const unmuteKeyword = <ThrowOnError extends boolean = false>(
  options: Options<UnmuteKeywordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UnmuteKeywordResponses,
    UnmuteKeywordErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/unmute-keyword',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Unlike a cast
 * @param options
 */
export const unlikeCast = <ThrowOnError extends boolean = false>(
  options: Options<UnlikeCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UnlikeCastResponses,
    UnlikeCastErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/cast-likes',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get cast likes
 * @param options
 */
export const getCastLikes = <ThrowOnError extends boolean = false>(
  options: Options<GetCastLikesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCastLikesResponses,
    GetCastLikesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/cast-likes',
    ...options,
  })
}

/**
 * Like a cast
 * @param options
 */
export const likeCast = <ThrowOnError extends boolean = false>(
  options: Options<LikeCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    LikeCastResponses,
    LikeCastErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/cast-likes',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Undo recast
 * @param options
 */
export const undoRecast = <ThrowOnError extends boolean = false>(
  options: Options<UndoRecastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UndoRecastResponses,
    UndoRecastErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/recasts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Recast a cast
 * @param options
 */
export const recastCast = <ThrowOnError extends boolean = false>(
  options: Options<RecastCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    RecastCastResponses,
    RecastCastErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/recasts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Attach embeds to a cast
 * @param options
 */
export const attachEmbeds = <ThrowOnError extends boolean = false>(
  options: Options<AttachEmbedsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    AttachEmbedsResponses,
    AttachEmbedsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/cast-attachments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get cast recasters
 * @param options
 */
export const getCastRecasters = <ThrowOnError extends boolean = false>(
  options: Options<GetCastRecastersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCastRecastersResponses,
    GetCastRecastersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/cast-recasters',
    ...options,
  })
}

/**
 * Get quotes of a cast
 * @param options
 */
export const getCastQuotes = <ThrowOnError extends boolean = false>(
  options: Options<GetCastQuotesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCastQuotesResponses,
    GetCastQuotesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/cast-quotes',
    ...options,
  })
}

/**
 * Get current user
 * @param options
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentUserResponses,
    GetCurrentUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/me',
    ...options,
  })
}

/**
 * Search for channels
 * @param options
 */
export const searchChannels = <ThrowOnError extends boolean = false>(
  options?: Options<SearchChannelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    SearchChannelsResponses,
    SearchChannelsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/search-channels',
    ...options,
  })
}

/**
 * Get draft cast storms
 * @param options
 */
export const getDraftCasts = <ThrowOnError extends boolean = false>(
  options?: Options<GetDraftCastsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetDraftCastsResponses,
    GetDraftCastsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/draft-caststorms',
    ...options,
  })
}

/**
 * Create a new draft casts
 * @param options
 */
export const createDraftCasts = <ThrowOnError extends boolean = false>(
  options: Options<CreateDraftCastsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDraftCastsResponses,
    CreateDraftCastsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/draft-caststorms',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Delete a draft cast
 * @param options
 */
export const deleteDraftCast = <ThrowOnError extends boolean = false>(
  options: Options<DeleteDraftCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDraftCastResponses,
    DeleteDraftCastErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/draft-casts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Delete a cast
 * @param options
 */
export const deleteCast = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCastResponses,
    DeleteCastErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/casts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Retrieve casts for a specific user
 * @param options
 */
export const getCastsByFid = <ThrowOnError extends boolean = false>(
  options: Options<GetCastsByFidData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCastsByFidResponses,
    GetCastsByFidErrors,
    ThrowOnError
  >({
    responseTransformer: getCastsByFidResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/casts',
    ...options,
  })
}

/**
 * Create a new cast
 * @param options
 */
export const createCast = <ThrowOnError extends boolean = false>(
  options: Options<CreateCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCastResponses,
    CreateCastErrors,
    ThrowOnError
  >({
    responseTransformer: createCastResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/casts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get all channels
 * Returns a list of all channels on Warpcast
 * @param options
 */
export const getAllChannels = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllChannelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllChannelsResponses,
    GetAllChannelsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/all-channels',
    ...options,
  })
}

/**
 * Get details of a specific channel
 * @param options
 */
export const getChannelDetails = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelDetailsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelDetailsResponses,
    GetChannelDetailsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/channel',
    ...options,
  })
}

/**
 * Get followers of a channel
 * @param options
 */
export const getChannelFollowers = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelFollowersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelFollowersResponses,
    GetChannelFollowersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/channel-followers',
    ...options,
  })
}

/**
 * Get list of channels followed by a user
 * @param options
 */
export const getUserFollowedChannels = <ThrowOnError extends boolean = false>(
  options: Options<GetUserFollowedChannelsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserFollowedChannelsResponses,
    GetUserFollowedChannelsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/user-following-channels',
    ...options,
  })
}

/**
 * Check if a user is following a channel
 * @param options
 */
export const checkUserChannelFollowStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CheckUserChannelFollowStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    CheckUserChannelFollowStatusResponses,
    CheckUserChannelFollowStatusErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/user-channel',
    ...options,
  })
}

/**
 * Get members of a channel
 * @param options
 */
export const getChannelMembers = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelMembersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelMembersResponses,
    GetChannelMembersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-members',
    ...options,
  })
}

/**
 * Remove a user's invite from a channel
 * @param options
 */
export const removeChannelInvite = <ThrowOnError extends boolean = false>(
  options: Options<RemoveChannelInviteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveChannelInviteResponses,
    RemoveChannelInviteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-invites',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get channel invites
 * @param options
 */
export const getChannelInvites = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelInvitesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelInvitesResponses,
    GetChannelInvitesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-invites',
    ...options,
  })
}

/**
 * Accept a channel invite
 * @param options
 */
export const acceptChannelInvite = <ThrowOnError extends boolean = false>(
  options: Options<AcceptChannelInviteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    AcceptChannelInviteResponses,
    AcceptChannelInviteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-invites',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Invite a user to a channel
 * @param options
 */
export const inviteUserToChannel = <ThrowOnError extends boolean = false>(
  options: Options<InviteUserToChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    InviteUserToChannelResponses,
    InviteUserToChannelErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-invites',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get moderated casts for a channel
 * @param options
 */
export const getChannelModeratedCasts = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelModeratedCastsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelModeratedCastsResponses,
    GetChannelModeratedCastsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/moderated-casts',
    ...options,
  })
}

/**
 * Get restricted users in a channel
 * @param options
 */
export const getChannelRestrictedUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelRestrictedUsersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelRestrictedUsersResponses,
    GetChannelRestrictedUsersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-restricted-users',
    ...options,
  })
}

/**
 * Unban a user from a channel
 * @param options
 */
export const unbanUserFromChannel = <ThrowOnError extends boolean = false>(
  options: Options<UnbanUserFromChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UnbanUserFromChannelResponses,
    UnbanUserFromChannelErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-bans',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get banned users in a channel
 * @param options
 */
export const getChannelBannedUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetChannelBannedUsersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChannelBannedUsersResponses,
    GetChannelBannedUsersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-bans',
    ...options,
  })
}

/**
 * Ban a user from a channel
 * @param options
 */
export const banUserFromChannel = <ThrowOnError extends boolean = false>(
  options: Options<BanUserFromChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    BanUserFromChannelResponses,
    BanUserFromChannelErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-bans',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Unfollow a channel
 * @param options
 */
export const unfollowChannel = <ThrowOnError extends boolean = false>(
  options: Options<UnfollowChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UnfollowChannelResponses,
    UnfollowChannelErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-follows',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Follow a channel
 * @param options
 */
export const followChannel = <ThrowOnError extends boolean = false>(
  options: Options<FollowChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    FollowChannelResponses,
    FollowChannelErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/channel-follows',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Moderate a cast (e.g., hide it)
 * @param options
 */
export const moderateCast = <ThrowOnError extends boolean = false>(
  options: Options<ModerateCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ModerateCastResponses,
    ModerateCastErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/moderate-cast',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Unpin a cast from a channel
 * @param options
 */
export const unpinCastFromChannel = <ThrowOnError extends boolean = false>(
  options: Options<UnpinCastFromChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UnpinCastFromChannelResponses,
    UnpinCastFromChannelErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/pinned-casts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Pin a cast to a channel
 * @param options
 */
export const pinCastToChannel = <ThrowOnError extends boolean = false>(
  options: Options<PinCastToChannelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PinCastToChannelResponses,
    PinCastToChannelErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/pinned-casts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get discoverable actions
 * @param options
 */
export const getDiscoverableActions = <ThrowOnError extends boolean = false>(
  options: Options<GetDiscoverableActionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDiscoverableActionsResponses,
    GetDiscoverableActionsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/discover-actions',
    ...options,
  })
}

/**
 * Get top discoverable composer actions
 * @param options
 */
export const getDiscoverableComposerActions = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetDiscoverableComposerActionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDiscoverableComposerActionsResponses,
    GetDiscoverableComposerActionsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/discover-composer-actions',
    ...options,
  })
}

/**
 * Unblock a user
 * @param options
 */
export const unblockUser = <ThrowOnError extends boolean = false>(
  options: Options<UnblockUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UnblockUserResponses,
    UnblockUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/blocked-users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get list of blocked users
 * @param options
 */
export const getBlockedUsers = <ThrowOnError extends boolean = false>(
  options?: Options<GetBlockedUsersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetBlockedUsersResponses,
    GetBlockedUsersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/blocked-users',
    ...options,
  })
}

/**
 * Block a user
 * @param options
 */
export const blockUser = <ThrowOnError extends boolean = false>(
  options: Options<BlockUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    BlockUserResponses,
    BlockUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/blocked-users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get account verifications
 * @param options
 */
export const getAccountVerifications = <ThrowOnError extends boolean = false>(
  options: Options<GetAccountVerificationsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAccountVerificationsResponses,
    GetAccountVerificationsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/account-verifications',
    ...options,
  })
}

/**
 * Get creator reward winners
 * @param options
 */
export const getCreatorRewardWinners = <ThrowOnError extends boolean = false>(
  options?: Options<GetCreatorRewardWinnersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCreatorRewardWinnersResponses,
    GetCreatorRewardWinnersErrors,
    ThrowOnError
  >({
    responseTransformer: getCreatorRewardWinnersResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/creator-rewards-winner-history',
    ...options,
  })
}

/**
 * Get User Primary Address
 * @param options
 */
export const getUserPrimaryAddress = <ThrowOnError extends boolean = false>(
  options: Options<GetUserPrimaryAddressData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserPrimaryAddressResponses,
    GetUserPrimaryAddressErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/primary-address',
    ...options,
  })
}

/**
 * Get Multiple User Primary Addresses
 * @param options
 */
export const getUserPrimaryAddresses = <ThrowOnError extends boolean = false>(
  options: Options<GetUserPrimaryAddressesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserPrimaryAddressesResponses,
    GetUserPrimaryAddressesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/primary-addresses',
    ...options,
  })
}

/**
 * Get Starter Pack Members
 * @param options
 */
export const getStarterPackMembers = <ThrowOnError extends boolean = false>(
  options: Options<GetStarterPackMembersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetStarterPackMembersResponses,
    GetStarterPackMembersErrors,
    ThrowOnError
  >({
    responseTransformer: getStarterPackMembersResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/fc/starter-pack-members',
    ...options,
  })
}

/**
 * Send a Direct Cast via External API
 * Send a programmatic Direct Cast to a recipient. The request must include a unique idempotency key.
 * @param options
 */
export const sendDirectCast = <ThrowOnError extends boolean = false>(
  options: Options<SendDirectCastData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    SendDirectCastResponses,
    SendDirectCastErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/ext-send-direct-cast',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get user by verification address
 * Retrieves user information associated with the provided Ethereum verification address
 * @param options
 */
export const getUserByVerificationAddress = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetUserByVerificationAddressData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserByVerificationAddressResponses,
    GetUserByVerificationAddressErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user-by-verification',
    ...options,
  })
}

/**
 * Get developer reward winners
 * Provides access to all winners for a given period (week). Paginated, with the list of winners in rank order. Not authenticated.
 * @param options
 */
export const getDeveloperRewardWinners = <ThrowOnError extends boolean = false>(
  options?: Options<GetDeveloperRewardWinnersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetDeveloperRewardWinnersResponses,
    GetDeveloperRewardWinnersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/developer-rewards-winner-history',
    ...options,
  })
}

/**
 * Get apps (frames) by author
 * Retrieves a list of apps (aka "frames") created by a specific author on Warpcast, using their FID (Farcaster ID).
 * The response includes metadata for each app, including icons, URLs, and author profile details.
 * @param options
 */
export const getAppsByAuthor = <ThrowOnError extends boolean = false>(
  options: Options<GetAppsByAuthorData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAppsByAuthorResponses,
    GetAppsByAuthorErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/apps-by-author',
    ...options,
  })
}

/**
 * Retrieve domain manifest information
 * Fetches verification and manifest information for a Farcaster domain
 * @param options
 */
export const getDomainManifest = <ThrowOnError extends boolean = false>(
  options: Options<GetDomainManifestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDomainManifestResponses,
    GetDomainManifestErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/domain-manifest',
    ...options,
  })
}

/**
 * Fetch meta tags from a URL
 * Retrieves metadata and Open Graph information from a specified URL
 * @param options
 */
export const getMetaTags = <ThrowOnError extends boolean = false>(
  options: Options<GetMetaTagsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetMetaTagsResponses,
    GetMetaTagsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/dev-tools/meta-tags',
    ...options,
  })
}

/**
 * Fetch Farcaster JSON data from a domain
 * Retrieves Farcaster account association and frame information for a specified domain
 * @param options
 */
export const getFarcasterJson = <ThrowOnError extends boolean = false>(
  options: Options<GetFarcasterJsonData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetFarcasterJsonResponses,
    GetFarcasterJsonErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/dev-tools/farcaster-json',
    ...options,
  })
}

/**
 * Retrieve domains owned by the authenticated user
 * Returns a list of domains that are owned by the currently authenticated user.
 * @param options
 */
export const getOwnedDomains = <ThrowOnError extends boolean = false>(
  options?: Options<GetOwnedDomainsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetOwnedDomainsResponses,
    GetOwnedDomainsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/dev-tools/domains-owned',
    ...options,
  })
}

/**
 * Retrieve API keys for the authenticated user
 * Returns a list of API keys associated with the user's account, including active and revoked keys
 * @param options
 */
export const getApiKeys = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiKeysData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiKeysResponses,
    GetApiKeysErrors,
    ThrowOnError
  >({
    responseTransformer: getApiKeysResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/api-keys',
    ...options,
  })
}

/**
 * Create a new API key
 * Creates a new API key with the specified description and expiration date
 * @param options
 */
export const createApiKey = <ThrowOnError extends boolean = false>(
  options: Options<CreateApiKeyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    CreateApiKeyResponses,
    CreateApiKeyErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/api-keys',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Revoke an API key
 * Revokes an existing API key making it no longer valid for authentication
 * @param options
 */
export const revokeApiKey = <ThrowOnError extends boolean = false>(
  options: Options<RevokeApiKeyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    RevokeApiKeyResponses,
    RevokeApiKeyErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/revoke-api-key',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get connected social accounts
 * Retrieves a list of external social accounts connected to the user's Warpcast profile
 * @param options
 */
export const getConnectedAccounts = <ThrowOnError extends boolean = false>(
  options?: Options<GetConnectedAccountsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetConnectedAccountsResponses,
    GetConnectedAccountsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/connected-accounts',
    ...options,
  })
}

/**
 * Get casts from a user's profile
 * Retrieves a list of casts published by a specific user identified by their Farcaster ID (FID).
 * @param options
 */
export const getProfileCasts = <ThrowOnError extends boolean = false>(
  options: Options<GetProfileCastsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProfileCastsResponses,
    GetProfileCastsErrors,
    ThrowOnError
  >({
    responseTransformer: getProfileCastsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/profile-casts',
    ...options,
  })
}

/**
 * Retrieve liked casts by user FID
 * @param options
 */
export const getUserLikedCasts = <ThrowOnError extends boolean = false>(
  options: Options<GetUserLikedCastsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserLikedCastsResponses,
    GetUserLikedCastsErrors,
    ThrowOnError
  >({
    responseTransformer: getUserLikedCastsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v2/user-liked-casts',
    ...options,
  })
}

/**
 * Get analytics rollup for miniapps
 * Retrieves analytics data for miniapps over a specified date range,
 * providing various metrics broken down by configured dimensions.
 * @param options
 */
export const getMiniAppAnalyticsRollup = <ThrowOnError extends boolean = false>(
  options: Options<GetMiniAppAnalyticsRollupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    GetMiniAppAnalyticsRollupResponses,
    GetMiniAppAnalyticsRollupErrors,
    ThrowOnError
  >({
    responseTransformer: getMiniAppAnalyticsRollupResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/analytics/miniapps/rollup',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Inspect Mini App URL
 * Validates a Mini App URL by checking for proper embedding code and manifest,
 * returning information about its compatibility with the Warpcast platform.
 * @param options
 */
export const inspectMiniAppUrl = <ThrowOnError extends boolean = false>(
  options: Options<InspectMiniAppUrlData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    InspectMiniAppUrlResponses,
    InspectMiniAppUrlErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/dev-tools/inspect-miniapp-url',
    ...options,
  })
}

/**
 * Inspect an image URL
 * Retrieves metadata and information about an image at a specified URL, including size, cache settings, and loading time.
 * @param options
 */
export const inspectImageUrl = <ThrowOnError extends boolean = false>(
  options: Options<InspectImageUrlData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    InspectImageUrlResponses,
    InspectImageUrlErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/dev-tools/inspect-image-url',
    ...options,
  })
}

/**
 * Export user data for a specific mini app domain
 * Retrieves a list of users who have interacted with a specified mini app domain, including their Farcaster IDs and notification tokens.
 * @param options
 */
export const exportMiniAppUserData = <ThrowOnError extends boolean = false>(
  options: Options<ExportMiniAppUserDataData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ExportMiniAppUserDataResponses,
    ExportMiniAppUserDataErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/dev-tools/export/miniapp-user-data',
    ...options,
  })
}
