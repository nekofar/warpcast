// This file is auto-generated by @hey-api/openapi-ts

export interface ErrorResponse {
  error?: string
  message?: string
  status?: number
}

export interface OnboardingStateResponse {
  result?: {
    state?: OnboardingState
  }
}

export interface OnboardingState {
  id?: string
  email?: string
  user?: User
  hasOnboarding?: boolean
  hasConfirmedEmail?: boolean
  handledConnectAddress?: boolean
  canRegisterUsername?: boolean
  needsRegistrationPayment?: boolean
  hasFid?: boolean
  hasFname?: boolean
  hasDelegatedSigner?: boolean
  hasSetupProfile?: boolean
  hasCompletedRegistration?: boolean
  hasStorage?: boolean
  handledPushNotificationsNudge?: boolean
  handledContactsNudge?: boolean
  handledInterestsNudge?: boolean
  hasValidPaidInvite?: boolean
  hasWarpcastWalletAddress?: boolean
  hasPhone?: boolean
  needsPhone?: boolean
  sponsoredRegisterEligible?: boolean
  geoRestricted?: boolean
}

export interface UserByFidResponse {
  result?: {
    user?: UserWithExtras
    collectionsOwned?: unknown[]
    extras?: UserExtras
  }
}

export interface DirectCastInboxResponse {
  result?: {
    hasArchived?: boolean
    hasUnreadRequests?: boolean
    requestsCount?: number
    conversations?: {
      conversationId?: string
      name?: string
      description?: string
      photoUrl?: string
      adminFids?: number[]
      lastReadTime?: number
      lastMessage?: {
        conversationId?: string
        senderFid?: number
        messageId?: string
        serverTimestamp?: number
        type?: string
        message?: string
        hasMention?: boolean
        reactions?: unknown[]
        isPinned?: boolean
        isDeleted?: boolean
        senderContext?: User
      }
      isGroup?: boolean
      createdAt?: number
      viewerContext?: {
        category?: string
        lastReadAt?: number
        muted?: boolean
        manuallyMarkedUnread?: boolean
        pinned?: boolean
        unreadCount?: number
        unreadMentionsCount?: number
      }
    }[]
  }
}

export interface UserAppContextResponse {
  result?: {
    context?: {
      canAddLinks?: boolean
      showConnectedApps?: boolean
      signerRequestsEnabled?: boolean
      prompts?: unknown[]
      adminForChannelKeys?: string[]
      modOfChannelKeys?: string[]
      memberOfChannelKeys?: string[]
      canEditAllChannels?: boolean
      canUploadVideo?: boolean
      statsigEnabled?: boolean
      shouldPromptForPushNotifications?: boolean
      shouldPromptForUserFollowsSyncContacts?: boolean
      castActions?: CastAction[]
      canAddCastAction?: boolean
      enabledCastAction?: CastAction
      notificationTabsV2?: {
        id?: string
        name?: string
      }[]
      enabledVideoAutoplay?: boolean
      regularCastByteLimit?: number
      longCastByteLimit?: number
      newUserStatus?: Record<string, unknown>
      country?: string
      higherClientEventSamplingRateEnabled?: boolean
    }
  }
}

export interface CastAction {
  id?: string
  name?: string
  octicon?: string
  actionUrl?: string
  action?: {
    actionType?: string
    postUrl?: string
  }
}

export interface User {
  fid?: number
  username?: string
  displayName?: string
  pfp?: ProfilePicture
  profile?: Profile
  followerCount?: number
  followingCount?: number
  viewerContext?: ViewerContext
}

export type UserWithExtras = User & {
  connectedAccounts?: unknown[]
}

export interface ProfilePicture {
  url?: string
  verified?: boolean
}

export interface Profile {
  bio?: Bio
  location?: Location
}

export interface Bio {
  text?: string
  mentions?: unknown[]
  channelMentions?: unknown[]
}

export interface Location {
  placeId?: string
  description?: string
}

export interface ViewerContext {
  following?: boolean
  followedBy?: boolean
  enableNotifications?: boolean
  canSendDirectCasts?: boolean
  hasUploadedInboxKeys?: boolean
}

export interface UserExtras {
  fid?: number
  custodyAddress?: string
  ethWallets?: string[]
  solanaWallets?: string[]
}

export interface UserPreferencesResponse {
  result?: {
    preferences?: Record<string, unknown>
  }
}

export interface HighlightedChannelsResponse {
  result?: {
    channels?: Channel[]
    viewerContext?: {
      defaultFeed?: string
    }
  }
}

export interface Channel {
  type?: string
  key?: string
  name?: string
  imageUrl?: string
  fastImageUrl?: string
  feeds?: {
    name?: string
    type?: string
  }[]
  description?: string
  followerCount?: number
  memberCount?: number
  showCastSourceLabels?: boolean
  showCastTags?: boolean
  sectionRank?: number
  subscribable?: boolean
  publicCasting?: boolean
  inviteCode?: string
  headerImageUrl?: string
  headerAction?: {
    title?: string
    target?: string
  }
  headerActionMetadata?: Record<string, unknown>
  viewerContext?: {
    following?: boolean
    isMember?: boolean
    hasUnseenItems?: boolean
    favoritePosition?: number
    activityRank?: number
    canCast?: boolean
  }
}

export interface FeedItemsResponse {
  result?: {
    items?: Record<string, unknown>[]
    latestMainCastTimestamp?: number
    feedTopSeenAtTimestamp?: number
    replaceFeed?: boolean
  }
}

export interface UserResponse {
  result?: {
    user?: UserWithExtras
    collectionsOwned?: Record<string, unknown>[]
    extras?: {
      fid?: number
      custodyAddress?: string
      ethWallets?: string[]
      solanaWallets?: string[]
    }
  }
}

export interface SuggestedUsersResponse {
  result?: {
    users?: Record<string, unknown>[]
    next?: {
      cursor?: string
    }
  }
}

export interface Action {
  name?: string
  icon?: string
  description?: string
  aboutUrl?: string
  actionUrl?: string
  action?: {
    actionType?: 'post' | 'get' | 'put' | 'delete'
    postUrl?: string
  }
}

export interface SuccessResponse {
  result: {
    /**
     * Indicates whether the operation was successful
     */
    success: boolean
  }
}

export interface VerifiedAddress {
  fid?: number
  address?: string
  timestamp?: number
  version?: string
  protocol?: string
  isPrimary?: boolean
  labels?: string[]
}

export interface FavoriteFramesResponse {
  result: {
    frames: Record<string, unknown>[]
  }
}

export interface ChannelStreaksResponse {
  result: Record<string, unknown>
}

export interface UnseenCountsResponse {
  result: {
    notificationsCount?: number
    notificationTabs?: {
      tab: string
      unseenCount: number
    }[]
    inboxCount?: number
    channelFeeds?: {
      channelKey: string
      feedType: string
      hasNewItems: boolean
    }[]
    warpTransactionCount?: number
  }
}

export interface UserThreadCastsResponse {
  result: {
    casts: Record<string, unknown>[]
  }
}

export interface ChannelFollowersYouKnowResponse {
  result: {
    users: Record<string, unknown>[]
    totalCount: number
  }
}

export interface NotificationsResponse {
  result: {
    notifications?: Record<string, unknown>[]
  }
}

export interface DirectCastConversationResponse {
  result: {
    conversation?: Record<string, unknown>
  }
}

export interface DiscoverChannelsResponse {
  result: {
    channels?: Record<string, unknown>[]
  }
}

/**
 * The user's FID (Farcaster ID)
 */
export type FidParam = number

/**
 * Maximum number of items to return
 */
export type LimitParam = number

export interface GetUserOnboardingStateData {
  body?: never
  path?: never
  query?: never
  url: '/v2/onboarding-state'
}

export interface GetUserOnboardingStateErrors {
  /**
   * Authentication is required or failed
   */
  401: ErrorResponse
}

export type GetUserOnboardingStateError =
  GetUserOnboardingStateErrors[keyof GetUserOnboardingStateErrors]

export interface GetUserOnboardingStateResponses {
  /**
   * Successful retrieval of onboarding state
   */
  200: OnboardingStateResponse
}

export type GetUserOnboardingStateResponse =
  GetUserOnboardingStateResponses[keyof GetUserOnboardingStateResponses]

export interface GetUserByFidData {
  body?: never
  path?: never
  query: {
    /**
     * The user's FID (Farcaster ID)
     */
    fid: number
  }
  url: '/v2/user-by-fid'
}

export interface GetUserByFidErrors {
  /**
   * Authentication is required or failed
   */
  401: ErrorResponse
  /**
   * The specified resource was not found
   */
  404: ErrorResponse
}

export type GetUserByFidError = GetUserByFidErrors[keyof GetUserByFidErrors]

export interface GetUserByFidResponses {
  /**
   * Successful retrieval of user by fid
   */
  200: UserByFidResponse
}

export type GetUserByFidResponse =
  GetUserByFidResponses[keyof GetUserByFidResponses]

export interface GetDirectCastInboxData {
  body?: never
  path?: never
  query?: {
    /**
     * Maximum number of items to return
     */
    limit?: number
    /**
     * Filter by category of direct casts
     */
    category?: string
  }
  url: '/v2/direct-cast-inbox'
}

export interface GetDirectCastInboxErrors {
  /**
   * Authentication is required or failed
   */
  401: ErrorResponse
}

export type GetDirectCastInboxError =
  GetDirectCastInboxErrors[keyof GetDirectCastInboxErrors]

export interface GetDirectCastInboxResponses {
  /**
   * Successful retrieval of direct cast inbox
   */
  200: DirectCastInboxResponse
}

export type GetDirectCastInboxResponse =
  GetDirectCastInboxResponses[keyof GetDirectCastInboxResponses]

export interface GetUserAppContextData {
  body?: never
  path?: never
  query?: never
  url: '/v2/user-app-context'
}

export interface GetUserAppContextErrors {
  /**
   * Authentication is required or failed
   */
  401: ErrorResponse
}

export type GetUserAppContextError =
  GetUserAppContextErrors[keyof GetUserAppContextErrors]

export interface GetUserAppContextResponses {
  /**
   * Successful retrieval of user app context
   */
  200: UserAppContextResponse
}

export type GetUserAppContextResponse =
  GetUserAppContextResponses[keyof GetUserAppContextResponses]

export interface GetUserPreferencesData {
  body?: never
  path?: never
  query?: never
  url: '/v2/user-preferences'
}

export interface GetUserPreferencesErrors {
  /**
   * Authentication is required or failed
   */
  401: ErrorResponse
}

export type GetUserPreferencesError =
  GetUserPreferencesErrors[keyof GetUserPreferencesErrors]

export interface GetUserPreferencesResponses {
  /**
   * Successful retrieval of user preferences
   */
  200: UserPreferencesResponse
}

export type GetUserPreferencesResponse =
  GetUserPreferencesResponses[keyof GetUserPreferencesResponses]

export interface GetHighlightedChannelsData {
  body?: never
  path?: never
  query?: never
  url: '/v2/highlighted-channels'
}

export interface GetHighlightedChannelsErrors {
  /**
   * Authentication is required or failed
   */
  401: ErrorResponse
}

export type GetHighlightedChannelsError =
  GetHighlightedChannelsErrors[keyof GetHighlightedChannelsErrors]

export interface GetHighlightedChannelsResponses {
  /**
   * Successful retrieval of highlighted channels
   */
  200: HighlightedChannelsResponse
}

export type GetHighlightedChannelsResponse =
  GetHighlightedChannelsResponses[keyof GetHighlightedChannelsResponses]

export interface GetFeedItemsData {
  body: {
    /**
     * Identifier for the specific feed
     */
    feedKey: string
    /**
     * Type of feed to retrieve
     */
    feedType: string
    /**
     * View events for casts
     */
    castViewEvents?: Record<string, unknown>[]
    /**
     * Whether to update the feed state
     */
    updateState?: boolean
  }
  path?: never
  query?: never
  url: '/v2/feed-items'
}

export interface GetFeedItemsErrors {
  /**
   * Authentication is required or failed
   */
  401: ErrorResponse
}

export type GetFeedItemsError = GetFeedItemsErrors[keyof GetFeedItemsErrors]

export interface GetFeedItemsResponses {
  /**
   * Successful retrieval of feed items
   */
  200: FeedItemsResponse
}

export type GetFeedItemsResponse =
  GetFeedItemsResponses[keyof GetFeedItemsResponses]

export interface GetUserData {
  body?: never
  path?: never
  query: {
    /**
     * The user's FID (Farcaster ID)
     */
    fid: number
  }
  url: '/v2/user'
}

export interface GetUserErrors {
  /**
   * Authentication is required or failed
   */
  401: ErrorResponse
  /**
   * The specified resource was not found
   */
  404: ErrorResponse
}

export type GetUserError = GetUserErrors[keyof GetUserErrors]

export interface GetUserResponses {
  /**
   * Successful retrieval of user information
   */
  200: UserResponse
}

export type GetUserResponse = GetUserResponses[keyof GetUserResponses]

export interface GetUserFollowingChannelsData {
  body?: never
  path?: never
  query?: {
    /**
     * Whether results are intended for the composer interface
     */
    forComposer?: boolean
    /**
     * Maximum number of items to return
     */
    limit?: number
  }
  url: '/v2/user-following-channels'
}

export interface GetUserFollowingChannelsErrors {
  /**
   * Authentication is required or failed
   */
  401: ErrorResponse
}

export type GetUserFollowingChannelsError =
  GetUserFollowingChannelsErrors[keyof GetUserFollowingChannelsErrors]

export interface GetUserFollowingChannelsResponses {
  /**
   * Successful retrieval of followed channels
   */
  200: HighlightedChannelsResponse
}

export type GetUserFollowingChannelsResponse =
  GetUserFollowingChannelsResponses[keyof GetUserFollowingChannelsResponses]

export interface GetSuggestedUsersData {
  body?: never
  path?: never
  query?: {
    limit?: number
    randomized?: boolean
  }
  url: '/v2/suggested-users'
}

export interface GetSuggestedUsersResponses {
  /**
   * Successful retrieval of suggested users
   */
  200: SuggestedUsersResponse
}

export type GetSuggestedUsersResponse =
  GetSuggestedUsersResponses[keyof GetSuggestedUsersResponses]

export interface GetUserFavoriteFramesData {
  body?: never
  path?: never
  query?: {
    limit?: number
  }
  url: '/v1/favorite-frames'
}

export interface GetUserFavoriteFramesResponses {
  /**
   * Successful retrieval of favorite frames
   */
  200: FavoriteFramesResponse
}

export type GetUserFavoriteFramesResponse =
  GetUserFavoriteFramesResponses[keyof GetUserFavoriteFramesResponses]

export interface GetUserByUsernameData {
  body?: never
  path?: never
  query: {
    username: string
  }
  url: '/v2/user-by-username'
}

export interface GetUserByUsernameResponses {
  /**
   * Successful retrieval of user by username
   */
  200: UserResponse
}

export type GetUserByUsernameResponse =
  GetUserByUsernameResponses[keyof GetUserByUsernameResponses]

export interface GetChannelStreaksForUserData {
  body?: never
  path?: never
  query: {
    fid: number
  }
  url: '/v2/channel-streaks'
}

export interface GetChannelStreaksForUserResponses {
  /**
   * Successful retrieval of channel streaks
   */
  200: ChannelStreaksResponse
}

export type GetChannelStreaksForUserResponse =
  GetChannelStreaksForUserResponses[keyof GetChannelStreaksForUserResponses]

export interface GetUnseenCountsData {
  body?: never
  path?: never
  query?: never
  url: '/v2/unseen'
}

export interface GetUnseenCountsResponses {
  /**
   * Successful retrieval of unseen feed and notification data
   */
  200: UnseenCountsResponse
}

export type GetUnseenCountsResponse =
  GetUnseenCountsResponses[keyof GetUnseenCountsResponses]

export interface GetUserThreadCastsData {
  body?: never
  path?: never
  query: {
    castHashPrefix: string
    username: string
    limit?: number
  }
  url: '/v2/user-thread-casts'
}

export interface GetUserThreadCastsResponses {
  /**
   * Successful retrieval of user thread casts
   */
  200: UserThreadCastsResponse
}

export type GetUserThreadCastsResponse =
  GetUserThreadCastsResponses[keyof GetUserThreadCastsResponses]

export interface GetChannelFollowersYouKnowData {
  body?: never
  path?: never
  query: {
    channelKey: string
    limit?: number
  }
  url: '/v2/channel-followers-you-know'
}

export interface GetChannelFollowersYouKnowResponses {
  /**
   * Successful retrieval of known channel followers
   */
  200: ChannelFollowersYouKnowResponse
}

export type GetChannelFollowersYouKnowResponse =
  GetChannelFollowersYouKnowResponses[keyof GetChannelFollowersYouKnowResponses]

export interface MarkAllNotificationsReadData {
  body: Record<string, never>
  path?: never
  query?: never
  url: '/v2/mark-all-notifications-read'
}

export interface MarkAllNotificationsReadResponses {
  /**
   * Successful mark-all-read operation
   */
  200: SuccessResponse
}

export type MarkAllNotificationsReadResponse =
  MarkAllNotificationsReadResponses[keyof MarkAllNotificationsReadResponses]

export interface GetNotificationsData {
  body?: never
  path?: never
  query: {
    /**
     * Notification tab type
     */
    tab: 'all' | 'follows' | 'reactions' | 'mentions' | 'replies'
    /**
     * Number of notifications to return
     */
    limit?: number
  }
  url: '/v1/notifications-for-tab'
}

export interface GetNotificationsErrors {
  /**
   * Unauthorized
   */
  401: unknown
  /**
   * Too many requests
   */
  429: unknown
}

export interface GetNotificationsResponses {
  /**
   * A list of notifications
   */
  200: NotificationsResponse
}

export type GetNotificationsResponse =
  GetNotificationsResponses[keyof GetNotificationsResponses]

export interface SetLastCheckedTimestampData {
  /**
   * Empty object for now
   */
  body: Record<string, unknown>
  path?: never
  query?: never
  url: '/v2/set-last-checked-timestamp'
}

export interface SetLastCheckedTimestampErrors {
  /**
   * Unauthorized
   */
  401: unknown
  /**
   * Too many requests
   */
  429: unknown
}

export interface SetLastCheckedTimestampResponses {
  /**
   * Success
   */
  200: {
    result?: {
      success?: boolean
    }
  }
}

export type SetLastCheckedTimestampResponse =
  SetLastCheckedTimestampResponses[keyof SetLastCheckedTimestampResponses]

export interface GetDirectCastConversationData {
  body?: never
  path?: never
  query: {
    /**
     * Conversation ID in the format fid1-fid2
     */
    conversationId: string
  }
  url: '/v2/direct-cast-conversation'
}

export interface GetDirectCastConversationErrors {
  /**
   * Unauthorized
   */
  401: unknown
  /**
   * Too many requests
   */
  429: unknown
}

export interface GetDirectCastConversationResponses {
  /**
   * A direct cast conversation object
   */
  200: DirectCastConversationResponse
}

export type GetDirectCastConversationResponse =
  GetDirectCastConversationResponses[keyof GetDirectCastConversationResponses]

export interface DiscoverChannelsData {
  body?: never
  path?: never
  query?: {
    /**
     * Maximum number of channels to retrieve
     */
    limit?: number
  }
  url: '/v2/discover-channels'
}

export interface DiscoverChannelsErrors {
  /**
   * Unauthorized
   */
  401: unknown
  /**
   * Too many requests
   */
  429: unknown
}

export interface DiscoverChannelsResponses {
  /**
   * A list of channels
   */
  200: DiscoverChannelsResponse
}

export type DiscoverChannelsResponse2 =
  DiscoverChannelsResponses[keyof DiscoverChannelsResponses]

export interface GetAvailableInvitesData {
  body?: never
  path?: never
  query?: never
  url: '/v2/invites-available'
}

export interface GetAvailableInvitesErrors {
  /**
   * Unauthorized
   */
  401: unknown
  /**
   * Too many requests
   */
  429: unknown
}

export interface GetAvailableInvitesResponses {
  /**
   * Invite count information
   */
  200: {
    result?: {
      /**
       * Total number of invites allocated to the user
       */
      allocatedInvitesCount?: number
      /**
       * Number of invites currently available to send
       */
      availableInvitesCount?: number
    }
  }
}

export type GetAvailableInvitesResponse =
  GetAvailableInvitesResponses[keyof GetAvailableInvitesResponses]

export interface GetSponsoredInvitesData {
  body?: never
  path?: never
  query?: never
  url: '/v2/warpcast-sponsored-invites'
}

export interface GetSponsoredInvitesErrors {
  /**
   * Unauthorized
   */
  401: unknown
  /**
   * Too many requests
   */
  429: unknown
}

export interface GetSponsoredInvitesResponses {
  /**
   * List of sponsored invites
   */
  200: {
    result?: {
      invites?: Record<string, unknown>[]
    }
  }
}

export type GetSponsoredInvitesResponse =
  GetSponsoredInvitesResponses[keyof GetSponsoredInvitesResponses]

export interface GetRewardsLeaderboardData {
  body?: never
  path?: never
  query: {
    rewardsType: 'invite'
    limit?: number
    cursor?: string
  }
  url: '/v2/rewards-leaderboard'
}

export interface GetRewardsLeaderboardErrors {
  /**
   * Unauthorized
   */
  401: unknown
  /**
   * Too many requests
   */
  429: unknown
}

export interface GetRewardsLeaderboardResponses {
  /**
   * Rewards leaderboard
   */
  200: {
    result?: {
      leaderboard?: {
        type?: string
        users?: {
          user?: Record<string, unknown>
          score?: number
          rank?: number
        }[]
      }
    }
  }
}

export type GetRewardsLeaderboardResponse =
  GetRewardsLeaderboardResponses[keyof GetRewardsLeaderboardResponses]

export interface GetUserRewardsScoresData {
  body?: never
  path?: never
  query: {
    rewardsType: 'invite'
    fid: number
  }
  url: '/v2/rewards-scores-for-user'
}

export interface GetUserRewardsScoresErrors {
  /**
   * Unauthorized
   */
  401: unknown
  /**
   * Too many requests
   */
  429: unknown
}

export interface GetUserRewardsScoresResponses {
  /**
   * User rewards scores
   */
  200: {
    result?: {
      scores?: {
        type?: string
        user?: Record<string, unknown>
        allTimeScore?: number
        currentPeriodScore?: number
        previousPeriodScore?: number
      }[]
    }
  }
}

export type GetUserRewardsScoresResponse =
  GetUserRewardsScoresResponses[keyof GetUserRewardsScoresResponses]

export interface GetRewardsMetadataData {
  body?: never
  path?: never
  query: {
    rewardsType: 'invite'
  }
  url: '/v2/rewards-metadata'
}

export interface GetRewardsMetadataErrors {
  /**
   * Unauthorized
   */
  401: unknown
  /**
   * Too many requests
   */
  429: unknown
}

export interface GetRewardsMetadataResponses {
  /**
   * Invite rewards metadata
   */
  200: {
    result?: {
      metadata?: {
        type?: string
        lastUpdateTimestamp?: number
        currentPeriodStartTimestamp?: number
        currentPeriodEndTimestamp?: number
        tiers?: unknown[]
        proportionalPayout?: {
          numWinners?: number
          totalRewardCents?: number
        }
      }
    }
  }
}

export type GetRewardsMetadataResponse =
  GetRewardsMetadataResponses[keyof GetRewardsMetadataResponses]

export interface GetBookmarkedCastsData {
  body?: never
  path?: never
  query?: {
    limit?: number
  }
  url: '/v2/bookmarked-casts'
}

export interface GetBookmarkedCastsResponses {
  /**
   * A list of bookmarked casts
   */
  200: {
    result?: {
      bookmarks?: Record<string, unknown>[]
    }
  }
}

export type GetBookmarkedCastsResponse =
  GetBookmarkedCastsResponses[keyof GetBookmarkedCastsResponses]

export interface GetUserStarterPacksData {
  body?: never
  path?: never
  query: {
    fid: number
    limit?: number
  }
  url: '/v2/starter-packs'
}

export interface GetUserStarterPacksResponses {
  /**
   * A list of starter packs
   */
  200: {
    result?: {
      starterPacks?: Record<string, unknown>[]
    }
  }
}

export type GetUserStarterPacksResponse =
  GetUserStarterPacksResponses[keyof GetUserStarterPacksResponses]

export interface GetSuggestedStarterPacksData {
  body?: never
  path?: never
  query?: {
    limit?: number
  }
  url: '/v2/starter-packs/suggested'
}

export interface GetSuggestedStarterPacksResponses {
  /**
   * A list of suggested starter packs
   */
  200: {
    result?: {
      starterPacks?: Record<string, unknown>[]
    }
  }
}

export type GetSuggestedStarterPacksResponse =
  GetSuggestedStarterPacksResponses[keyof GetSuggestedStarterPacksResponses]

export interface GetStarterPackData {
  body?: never
  path?: never
  query: {
    id: string
  }
  url: '/v2/starter-pack'
}

export interface GetStarterPackResponses {
  /**
   * A starter pack object
   */
  200: {
    result?: {
      starterPack?: Record<string, unknown>
    }
  }
}

export type GetStarterPackResponse =
  GetStarterPackResponses[keyof GetStarterPackResponses]

export interface GetStarterPackUsersData {
  body?: never
  path?: never
  query: {
    id: string
    limit?: number
  }
  url: '/v2/starter-pack-users'
}

export interface GetStarterPackUsersResponses {
  /**
   * List of users in the starter pack
   */
  200: {
    result?: {
      users?: Record<string, unknown>[]
    }
  }
}

export type GetStarterPackUsersResponse =
  GetStarterPackUsersResponses[keyof GetStarterPackUsersResponses]

export interface GetChannelData {
  body?: never
  path?: never
  query: {
    key: string
  }
  url: '/v2/channel'
}

export interface GetChannelResponses {
  /**
   * Channel metadata
   */
  200: {
    result?: {
      channel?: Record<string, unknown>
    }
  }
}

export type GetChannelResponse = GetChannelResponses[keyof GetChannelResponses]

export interface GetChannelUsersData {
  body?: never
  path?: never
  query: {
    limit?: number
    channelKey: string
    filterToMembers?: boolean
    query?: string
  }
  url: '/v1/channel-users'
}

export interface GetChannelUsersResponses {
  /**
   * A list of users in the specified channel
   */
  200: {
    result?: {
      users?: Record<string, unknown>[]
    }
  }
}

export type GetChannelUsersResponse =
  GetChannelUsersResponses[keyof GetChannelUsersResponses]

export interface GetFollowingData {
  body?: never
  path?: never
  query: {
    fid: number
    limit?: number
  }
  url: '/v2/following'
}

export interface GetFollowingResponses {
  /**
   * A list of followed users
   */
  200: {
    result?: {
      users?: Record<string, unknown>[]
    }
  }
}

export type GetFollowingResponse =
  GetFollowingResponses[keyof GetFollowingResponses]

export interface GetFollowersData {
  body?: never
  path?: never
  query: {
    fid: number
    limit?: number
  }
  url: '/v2/followers'
}

export interface GetFollowersResponses {
  /**
   * A list of followers
   */
  200: {
    result?: {
      users?: Record<string, unknown>[]
    }
  }
}

export type GetFollowersResponse =
  GetFollowersResponses[keyof GetFollowersResponses]

export interface GetMutualFollowersData {
  body?: never
  path?: never
  query: {
    fid: number
    limit?: number
  }
  url: '/v2/followers-you-know'
}

export interface GetMutualFollowersResponses {
  /**
   * A list of mutual followers
   */
  200: {
    result?: {
      users?: Record<string, unknown>[]
      totalCount?: number
    }
  }
}

export type GetMutualFollowersResponse =
  GetMutualFollowersResponses[keyof GetMutualFollowersResponses]

export interface GetTopFrameAppsData {
  body?: never
  path?: never
  query?: {
    limit?: number
    cursor?: string
  }
  url: '/v1/top-frameapps'
}

export interface GetTopFrameAppsResponses {
  /**
   * A list of FrameApps
   */
  200: {
    result?: {
      frames?: Record<string, unknown>[]
    }
  }
}

export type GetTopFrameAppsResponse =
  GetTopFrameAppsResponses[keyof GetTopFrameAppsResponses]

export interface GetVerificationsData {
  body?: never
  path?: never
  query: {
    fid: number
    limit?: number
  }
  url: '/v2/verifications'
}

export interface GetVerificationsResponses {
  /**
   * A list of verifications
   */
  200: {
    result?: {
      verifications?: VerifiedAddress[]
    }
  }
}

export type GetVerificationsResponse =
  GetVerificationsResponses[keyof GetVerificationsResponses]

export interface GetMutedKeywordsData {
  body?: never
  path?: never
  query?: never
  url: '/v2/get-muted-keywords'
}

export interface GetMutedKeywordsResponses {
  /**
   * A list of muted keywords
   */
  200: {
    success?: boolean
    result?: {
      keywords?: string[]
      mutedKeywords?: string[]
    }
  }
}

export type GetMutedKeywordsResponse =
  GetMutedKeywordsResponses[keyof GetMutedKeywordsResponses]

export interface MuteKeywordData {
  body: {
    keyword?: string
    properties?: {
      channels?: boolean
      frames?: boolean
      notifications?: boolean
    }
  }
  path?: never
  query?: never
  url: '/v2/mute-keyword'
}

export interface MuteKeywordResponses {
  /**
   * The muted keyword and its settings
   */
  200: {
    success?: boolean
    result?: {
      keywords?: string[]
      mutedKeywords?: {
        keyword?: string
        properties?: {
          frames?: boolean
          channels?: boolean
          notifications?: boolean
        }
      }[]
    }
  }
}

export type MuteKeywordResponse =
  MuteKeywordResponses[keyof MuteKeywordResponses]

export interface UnmuteKeywordData {
  body: {
    keyword?: string
  }
  path?: never
  query?: never
  url: '/v2/unmute-keyword'
}

export interface UnmuteKeywordResponses {
  /**
   * Keyword unmuted
   */
  200: {
    success?: boolean
    result?: {
      keywords?: string[]
      mutedKeywords?: {
        keyword?: string
        properties?: {
          channels?: boolean
          frames?: boolean
          notifications?: boolean
        }
      }[]
    }
  }
}

export type UnmuteKeywordResponse =
  UnmuteKeywordResponses[keyof UnmuteKeywordResponses]

export interface UnlikeCastData {
  body: {
    castHash: string
  }
  path?: never
  query?: never
  url: '/v2/cast-likes'
}

export interface UnlikeCastResponses {
  /**
   * Unlike response
   */
  200: {
    result?: {
      success?: boolean
    }
  }
}

export type UnlikeCastResponse = UnlikeCastResponses[keyof UnlikeCastResponses]

export interface GetCastLikesData {
  body?: never
  path?: never
  query: {
    castHash: string
    limit?: number
  }
  url: '/v2/cast-likes'
}

export interface GetCastLikesResponses {
  /**
   * A list of cast likes
   */
  200: {
    result?: {
      likes?: {
        type?: string
        hash?: string
        castHash?: string
        timestamp?: number
        reactor?: User
      }[]
    }
  }
}

export type GetCastLikesResponse =
  GetCastLikesResponses[keyof GetCastLikesResponses]

export interface LikeCastData {
  body: {
    castHash: string
  }
  path?: never
  query?: never
  url: '/v2/cast-likes'
}

export interface LikeCastResponses {
  /**
   * Like response
   */
  200: {
    result?: {
      like?: {
        type?: string
        hash?: string
        castHash?: string
        timestamp?: number
        reactor?: User
      }
    }
  }
}

export type LikeCastResponse = LikeCastResponses[keyof LikeCastResponses]

export interface UndoRecastData {
  body: {
    castHash: string
  }
  path?: never
  query?: never
  url: '/v2/recasts'
}

export interface UndoRecastResponses {
  /**
   * Undo recast response
   */
  200: {
    result?: {
      success?: boolean
    }
  }
}

export type UndoRecastResponse = UndoRecastResponses[keyof UndoRecastResponses]

export interface RecastCastData {
  body: {
    castHash: string
  }
  path?: never
  query?: never
  url: '/v2/recasts'
}

export interface RecastCastResponses {
  /**
   * Recast response
   */
  200: {
    result?: {
      castHash?: string
    }
  }
}

export type RecastCastResponse = RecastCastResponses[keyof RecastCastResponses]

export interface AttachEmbedsData {
  body: {
    text?: string
    embeds?: string[]
  }
  path?: never
  query?: never
  url: '/v2/cast-attachments'
}

export interface AttachEmbedsResponses {
  /**
   * Attachment response
   */
  200: {
    result?: Record<string, unknown>
  }
}

export type AttachEmbedsResponse =
  AttachEmbedsResponses[keyof AttachEmbedsResponses]

export interface GetCastRecastersData {
  body?: never
  path?: never
  query: {
    castHash: string
    limit?: number
  }
  url: '/v2/cast-recasters'
}

export interface GetCastRecastersResponses {
  /**
   * A list of users who recasted the cast
   */
  200: {
    result?: {
      users?: User[]
    }
  }
}

export type GetCastRecastersResponse =
  GetCastRecastersResponses[keyof GetCastRecastersResponses]

export interface GetCastQuotesData {
  body?: never
  path?: never
  query: {
    castHash: string
    limit?: number
  }
  url: '/v2/cast-quotes'
}

export interface GetCastQuotesResponses {
  /**
   * A list of quote casts referencing the given cast
   */
  200: {
    result?: {
      quotes?: {
        hash?: string
        threadHash?: string
        parentSource?: {
          type?: string
          url?: string
        }
        author?: User
        text?: string
        timestamp?: number
      }[]
    }
  }
}

export type GetCastQuotesResponse =
  GetCastQuotesResponses[keyof GetCastQuotesResponses]

export interface GetCurrentUserData {
  body?: never
  path?: never
  query?: never
  url: '/v2/me'
}

export interface GetCurrentUserResponses {
  /**
   * Successful retrieval of current user
   */
  200: UserResponse
}

export type GetCurrentUserResponse =
  GetCurrentUserResponses[keyof GetCurrentUserResponses]

export interface SearchChannelsData {
  body?: never
  path?: never
  query?: {
    q?: string
    prioritizeFollowed?: boolean
    forComposer?: boolean
    limit?: number
  }
  url: '/v2/search-channels'
}

export interface SearchChannelsResponses {
  /**
   * A list of matched channels
   */
  200: {
    result?: {
      channels?: unknown[]
    }
  }
}

export type SearchChannelsResponse =
  SearchChannelsResponses[keyof SearchChannelsResponses]

export interface GetDraftCastsData {
  body?: never
  path?: never
  query?: {
    limit?: number
  }
  url: '/v2/draft-caststorms'
}

export interface GetDraftCastsResponses {
  /**
   * A list of draft cast storms
   */
  200: {
    result?: {
      drafts?: unknown[]
    }
  }
}

export type GetDraftCastsResponse =
  GetDraftCastsResponses[keyof GetDraftCastsResponses]

export interface CreateDraftCastsData {
  body: {
    caststorm?: {
      casts?: {
        text?: string
        embeds?: unknown[]
      }[]
    }
  }
  headers: {
    'idempotency-key': string
  }
  path?: never
  query?: never
  url: '/v2/draft-caststorms'
}

export interface CreateDraftCastsResponses {
  /**
   * Created draft caststorm
   */
  200: {
    result?: {
      draft?: {
        draftId?: string
        casts?: {
          text?: string
          embeds?: unknown[]
        }[]
      }
    }
  }
}

export type CreateDraftCastsResponse =
  CreateDraftCastsResponses[keyof CreateDraftCastsResponses]

export interface DeleteCastData {
  body: {
    castHash?: string
  }
  path?: never
  query?: never
  url: '/v2/casts'
}

export interface DeleteCastResponses {
  /**
   * Cast deleted successfully
   */
  200: {
    result?: {
      success?: boolean
    }
  }
}

export type DeleteCastResponse = DeleteCastResponses[keyof DeleteCastResponses]

export interface CreateCastData {
  body: {
    text: string
    embeds?: unknown[]
    /**
     * Optional channel to post the cast to
     */
    channelKey?: string
  }
  path?: never
  query?: never
  url: '/v2/casts'
}

export interface CreateCastResponses {
  /**
   * Cast created successfully
   */
  200: {
    result?: {
      cast?: {
        hash?: string
        threadHash?: string
        text?: string
        timestamp?: number
        embeds?: {
          images?: unknown[]
          urls?: unknown[]
          videos?: unknown[]
          unknowns?: unknown[]
        }
      }
    }
  }
}

export type CreateCastResponse = CreateCastResponses[keyof CreateCastResponses]

export interface DeleteDraftCastData {
  body: {
    draftId?: string
  }
  path?: never
  query?: never
  url: '/v2/draft-casts'
}

export interface DeleteDraftCastResponses {
  /**
   * Draft cast deleted
   */
  200: {
    result?: Record<string, unknown>
  }
}

export type DeleteDraftCastResponse =
  DeleteDraftCastResponses[keyof DeleteDraftCastResponses]

export interface GetAllChannelsData {
  body?: never
  path?: never
  query?: never
  url: '/v2/all-channels'
}

export interface GetAllChannelsResponses {
  /**
   * Successful response
   */
  200: {
    result?: {
      channels?: {
        id?: string
        url?: string
        name?: string
        description?: string
        descriptionMentions?: number[]
        descriptionMentionsPositions?: number[]
        imageUrl?: string
        headerImageUrl?: string
        leadFid?: number
        moderatorFids?: number[]
        createdAt?: number
        followerCount?: number
        memberCount?: number
        pinnedCastHash?: string
        publicCasting?: boolean
        externalLink?: {
          title?: string
          url?: string
        }
      }[]
    }
  }
}

export type GetAllChannelsResponse =
  GetAllChannelsResponses[keyof GetAllChannelsResponses]

export interface GetChannelDetailsData {
  body?: never
  path?: never
  query: {
    channelId: string
  }
  url: '/v1/channel'
}

export interface GetChannelDetailsResponses {
  /**
   * Channel details
   */
  200: {
    result?: {
      channel?: Channel
    }
  }
}

export type GetChannelDetailsResponse =
  GetChannelDetailsResponses[keyof GetChannelDetailsResponses]

export interface GetChannelFollowersData {
  body?: never
  path?: never
  query: {
    /**
     * The ID of the channel
     */
    channelId: string
    /**
     * Cursor for pagination
     */
    cursor?: string
  }
  url: '/v1/channel-followers'
}

export interface GetChannelFollowersResponses {
  /**
   * A list of channel followers
   */
  200: unknown
}

export interface GetUserFollowedChannelsData {
  body?: never
  path?: never
  query: {
    fid: number
  }
  url: '/v1/user-following-channels'
}

export interface GetUserFollowedChannelsResponses {
  /**
   * Successful response with list of channels followed by the user
   */
  200: unknown
}

export interface CheckUserChannelFollowStatusData {
  body?: never
  path?: never
  query: {
    fid: number
    channelId: string
  }
  url: '/v1/user-channel'
}

export interface CheckUserChannelFollowStatusResponses {
  /**
   * Successful response with follow status
   */
  200: unknown
}

export interface GetChannelMembersData {
  body?: never
  path?: never
  query: {
    channelId: string
  }
  url: '/fc/channel-members'
}

export interface GetChannelMembersResponses {
  /**
   * Successful response with list of members
   */
  200: {
    result: {
      members: {
        /**
         * Farcaster ID of the member
         */
        fid: number
        /**
         * Timestamp when the user became a member
         */
        memberAt: number
      }[]
    }
    next?: {
      /**
       * Cursor for pagination
       */
      cursor?: string
    }
  }
}

export type GetChannelMembersResponse =
  GetChannelMembersResponses[keyof GetChannelMembersResponses]

export interface RemoveChannelInviteData {
  body: {
    /**
     * ID of the channel from which the user's invite is being removed
     */
    channelId: string
    /**
     * Farcaster ID of the user whose invite is being removed
     */
    removeFid: number
    /**
     * Role associated with the invite being removed
     */
    role: 'member' | 'admin'
  }
  path?: never
  query?: never
  url: '/fc/channel-invites'
}

export interface RemoveChannelInviteResponses {
  /**
   * Successful removal of invite
   */
  200: SuccessResponse
}

export type RemoveChannelInviteResponse =
  RemoveChannelInviteResponses[keyof RemoveChannelInviteResponses]

export interface GetChannelInvitesData {
  body?: never
  path?: never
  query: {
    channelId: string
  }
  url: '/fc/channel-invites'
}

export interface GetChannelInvitesResponses {
  /**
   * Successful response with list of channel invites
   */
  200: {
    result?: {
      invites?: {
        channelId: string
        invitedFid: number
        invitedAt: number
        inviterFid: number
        role: 'member' | 'admin'
      }[]
    }
    next?: {
      cursor?: string
    }
  }
}

export type GetChannelInvitesResponse =
  GetChannelInvitesResponses[keyof GetChannelInvitesResponses]

export interface AcceptChannelInviteData {
  body: {
    /**
     * ID of the channel for which the invite is being accepted
     */
    channelId: string
    /**
     * Role that the user will have in the channel
     */
    role: 'member' | 'admin'
    /**
     * Flag indicating whether to accept the invite
     */
    accept: boolean
  }
  path?: never
  query?: never
  url: '/fc/channel-invites'
}

export interface AcceptChannelInviteResponses {
  /**
   * Successful acceptance of invite
   */
  200: SuccessResponse
}

export type AcceptChannelInviteResponse =
  AcceptChannelInviteResponses[keyof AcceptChannelInviteResponses]

export interface InviteUserToChannelData {
  body: {
    /**
     * ID of the channel to invite the user to
     */
    channelId: string
    /**
     * Farcaster ID of the user being invited
     */
    inviteFid: number
    /**
     * Role of the invited user within the channel
     */
    role: 'member' | 'admin'
  }
  path?: never
  query?: never
  url: '/fc/channel-invites'
}

export interface InviteUserToChannelResponses {
  /**
   * Successful invite operation
   */
  200: SuccessResponse
}

export type InviteUserToChannelResponse =
  InviteUserToChannelResponses[keyof InviteUserToChannelResponses]

export interface GetChannelModeratedCastsData {
  body?: never
  path?: never
  query: {
    /**
     * ID of the channel to get moderation actions for
     */
    channelId: string
  }
  url: '/fc/moderated-casts'
}

export interface GetChannelModeratedCastsResponses {
  /**
   * Successful response with list of moderation actions
   */
  200: {
    result: {
      moderationActions: {
        /**
         * Hash of the moderated cast
         */
        castHash: string
        /**
         * ID of the channel where the cast was moderated
         */
        channelId: string
        /**
         * Type of moderation action applied
         */
        action: 'hide'
        /**
         * Unix timestamp of when the moderation action was taken
         */
        moderatedAt: number
      }[]
    }
    next?: {
      /**
       * Pagination cursor for fetching the next set of results
       */
      cursor?: string
    }
  }
}

export type GetChannelModeratedCastsResponse =
  GetChannelModeratedCastsResponses[keyof GetChannelModeratedCastsResponses]

export interface GetChannelRestrictedUsersData {
  body?: never
  path?: never
  query: {
    /**
     * ID of the channel to get restricted users for
     */
    channelId: string
  }
  url: '/fc/channel-restricted-users'
}

export interface GetChannelRestrictedUsersResponses {
  /**
   * Successful response with list of restricted users
   */
  200: {
    result: {
      restrictedUsers: {
        /**
         * Farcaster ID of the restricted user
         */
        fid: number
        /**
         * ID of the channel where the user is restricted
         */
        channelId: string
        /**
         * Unix timestamp of when the user was restricted
         */
        restrictedAt: number
      }[]
    }
    next?: {
      /**
       * Pagination cursor for fetching the next set of results
       */
      cursor?: string
    }
  }
}

export type GetChannelRestrictedUsersResponse =
  GetChannelRestrictedUsersResponses[keyof GetChannelRestrictedUsersResponses]

export interface UnbanUserFromChannelData {
  body: {
    /**
     * ID of the channel from which to unban the user
     */
    channelId: string
    /**
     * Farcaster ID of the user to unban
     */
    banFid: number
  }
  path?: never
  query?: never
  url: '/fc/channel-bans'
}

export interface UnbanUserFromChannelResponses {
  /**
   * Successful unban operation
   */
  200: SuccessResponse
}

export type UnbanUserFromChannelResponse =
  UnbanUserFromChannelResponses[keyof UnbanUserFromChannelResponses]

export interface GetChannelBannedUsersData {
  body?: never
  path?: never
  query: {
    /**
     * ID of the channel to get banned users for
     */
    channelId: string
  }
  url: '/fc/channel-bans'
}

export interface GetChannelBannedUsersResponses {
  /**
   * Successful response with list of banned users
   */
  200: {
    result: {
      bannedUsers: {
        /**
         * Farcaster ID of the banned user
         */
        fid: number
        /**
         * ID of the channel where the user is banned
         */
        channelId: string
        /**
         * Unix timestamp of when the user was banned
         */
        bannedAt: number
      }[]
    }
    next?: {
      /**
       * Pagination cursor for fetching the next set of banned users
       */
      cursor?: string
    }
  }
}

export type GetChannelBannedUsersResponse =
  GetChannelBannedUsersResponses[keyof GetChannelBannedUsersResponses]

export interface BanUserFromChannelData {
  body: {
    /**
     * ID of the channel from which to ban the user
     */
    channelId: string
    /**
     * Farcaster ID of the user to ban
     */
    banFid: number
  }
  path?: never
  query?: never
  url: '/fc/channel-bans'
}

export interface BanUserFromChannelResponses {
  /**
   * Successful ban operation
   */
  200: SuccessResponse
}

export type BanUserFromChannelResponse =
  BanUserFromChannelResponses[keyof BanUserFromChannelResponses]

export interface UnfollowChannelData {
  body: {
    /**
     * ID of the channel to unfollow
     */
    channelId: string
  }
  path?: never
  query?: never
  url: '/fc/channel-follows'
}

export interface UnfollowChannelResponses {
  /**
   * Successful unfollow operation
   */
  200: SuccessResponse
}

export type UnfollowChannelResponse =
  UnfollowChannelResponses[keyof UnfollowChannelResponses]

export interface FollowChannelData {
  body: {
    /**
     * ID of the channel to follow
     */
    channelId: string
  }
  path?: never
  query?: never
  url: '/fc/channel-follows'
}

export interface FollowChannelResponses {
  /**
   * Successful follow operation
   */
  200: SuccessResponse
}

export type FollowChannelResponse =
  FollowChannelResponses[keyof FollowChannelResponses]

export interface ModerateCastData {
  body: {
    /**
     * Hash of the cast to moderate
     */
    castHash: string
    /**
     * Type of moderation action to apply
     */
    action: 'hide'
  }
  path?: never
  query?: never
  url: '/fc/moderate-cast'
}

export interface ModerateCastResponses {
  /**
   * Successful moderation action
   */
  200: SuccessResponse
}

export type ModerateCastResponse =
  ModerateCastResponses[keyof ModerateCastResponses]

export interface UnpinCastFromChannelData {
  body: {
    /**
     * ID of the channel from which to unpin a cast
     */
    channelId: string
  }
  path?: never
  query?: never
  url: '/fc/pinned-casts'
}

export interface UnpinCastFromChannelResponses {
  /**
   * Successful unpin operation
   */
  200: SuccessResponse
}

export type UnpinCastFromChannelResponse =
  UnpinCastFromChannelResponses[keyof UnpinCastFromChannelResponses]

export interface PinCastToChannelData {
  body: {
    /**
     * Hash of the cast to pin
     */
    castHash: string
    /**
     * Whether to notify followers of the channel about the pin
     */
    notifyChannelFollowers?: boolean
  }
  path?: never
  query?: never
  url: '/fc/pinned-casts'
}

export interface PinCastToChannelResponses {
  /**
   * Successful pin operation
   */
  200: SuccessResponse
}

export type PinCastToChannelResponse =
  PinCastToChannelResponses[keyof PinCastToChannelResponses]

export interface GetDiscoverableActionsData {
  body?: never
  path?: never
  query: {
    list: string
    limit?: number
  }
  url: '/v2/discover-actions'
}

export interface GetDiscoverableActionsResponses {
  /**
   * Successful response with list of discoverable actions
   */
  200: {
    result?: {
      actions?: Action[]
      next?: {
        cursor?: string
      }
    }
  }
}

export type GetDiscoverableActionsResponse =
  GetDiscoverableActionsResponses[keyof GetDiscoverableActionsResponses]

export interface GetDiscoverableComposerActionsData {
  body?: never
  path?: never
  query: {
    list: string
    limit?: number
  }
  url: '/v2/discover-composer-actions'
}

export interface GetDiscoverableComposerActionsResponses {
  /**
   * Successful response with list of discoverable composer actions
   */
  200: {
    result?: {
      actions?: Action[]
      next?: {
        cursor?: string
      }
    }
  }
}

export type GetDiscoverableComposerActionsResponse =
  GetDiscoverableComposerActionsResponses[keyof GetDiscoverableComposerActionsResponses]

export interface UnblockUserData {
  body: {
    /**
     * Farcaster ID of the user to unblock
     */
    unblockFid: number
  }
  path?: never
  query?: never
  url: '/fc/blocked-users'
}

export interface UnblockUserResponses {
  /**
   * Successful unblock operation
   */
  200: {
    result: {
      /**
       * Indicates whether the unblock operation was successful
       */
      success: boolean
    }
  }
}

export type UnblockUserResponse =
  UnblockUserResponses[keyof UnblockUserResponses]

export interface GetBlockedUsersData {
  body?: never
  path?: never
  query?: never
  url: '/fc/blocked-users'
}

export interface GetBlockedUsersResponses {
  /**
   * Successful response with list of blocked users
   */
  200: {
    result: {
      blockedUsers: {
        /**
         * Farcaster ID of the user who blocked
         */
        blockerFid: number
        /**
         * Farcaster ID of the user who was blocked
         */
        blockedFid: number
        /**
         * Unix timestamp of when the user was blocked
         */
        createdAt: number
      }[]
      next?: {
        /**
         * Pagination cursor for fetching the next set of blocked users
         */
        cursor?: string
      }
    }
  }
}

export type GetBlockedUsersResponse =
  GetBlockedUsersResponses[keyof GetBlockedUsersResponses]

export interface BlockUserData {
  body: {
    /**
     * Farcaster ID of the user to block
     */
    blockFid: number
  }
  path?: never
  query?: never
  url: '/fc/blocked-users'
}

export interface BlockUserResponses {
  /**
   * Successful block operation
   */
  200: {
    result: {
      /**
       * Indicates whether the block operation was successful
       */
      success: boolean
    }
  }
}

export type BlockUserResponse = BlockUserResponses[keyof BlockUserResponses]

export interface GetAccountVerificationsData {
  body?: never
  path?: never
  query?: {
    /**
     * Limit the response to a specific user.
     */
    fid?: number
  }
  url: '/fc/account-verifications'
}

export interface GetAccountVerificationsResponses {
  /**
   * Successful response with list of account verifications
   */
  200: {
    result?: {
      verifications?: {
        fid?: number
        platform?: string
        platformId?: string
        platformUsername?: string
        verifiedAt?: number
      }[]
    }
    next?: {
      cursor?: string
    }
  }
}

export type GetAccountVerificationsResponse =
  GetAccountVerificationsResponses[keyof GetAccountVerificationsResponses]

export interface GetCreatorRewardWinnersData {
  body?: never
  path?: never
  query?: {
    /**
     * How many periods ago to fetch the results for. 0 or undefined returns results for the most recent period.
     */
    periodsAgo?: number
  }
  url: '/v1/creator-rewards-winner-history'
}

export interface GetCreatorRewardWinnersResponses {
  /**
   * Successful response with creator reward winners history
   */
  200: {
    result?: {
      periodStartTimestamp?: bigint
      periodEndTimestamp?: bigint
      winners?: {
        fid?: number
        score?: number
        rank?: number
        rewardCents?: number
        walletAddress?: string
      }[]
    }
    next?: {
      cursor?: string
    }
  }
}

export type GetCreatorRewardWinnersResponse =
  GetCreatorRewardWinnersResponses[keyof GetCreatorRewardWinnersResponses]

export interface GetUserPrimaryAddressData {
  body?: never
  path?: never
  query: {
    /**
     * The fid of the user.
     */
    fid: number
    /**
     * The protocol of the address to fetch.
     */
    protocol: 'ethereum' | 'solana'
  }
  url: '/fc/primary-address'
}

export interface GetUserPrimaryAddressResponses {
  /**
   * Successful response with the user's primary address.
   */
  200: {
    result?: {
      address?: VerifiedAddress
    }
  }
}

export type GetUserPrimaryAddressResponse =
  GetUserPrimaryAddressResponses[keyof GetUserPrimaryAddressResponses]

export interface GetUserPrimaryAddressesData {
  body?: never
  path?: never
  query: {
    /**
     * Comma-separated list of FIDs to fetch primary addresses for.
     */
    fids: string
    /**
     * The protocol of the addresses to fetch.
     */
    protocol: 'ethereum' | 'solana'
  }
  url: '/fc/primary-addresses'
}

export interface GetUserPrimaryAddressesResponses {
  /**
   * Successful response with list of primary addresses.
   */
  200: {
    result?: {
      addresses?: {
        /**
         * The Farcaster ID of the user
         */
        fid: number
        /**
         * Whether the address was successfully retrieved
         */
        success: boolean
        /**
         * Present only if success is true
         */
        address?: VerifiedAddress
      }[]
    }
  }
}

export type GetUserPrimaryAddressesResponse =
  GetUserPrimaryAddressesResponses[keyof GetUserPrimaryAddressesResponses]

export interface GetStarterPackMembersData {
  body?: never
  path?: never
  query: {
    /**
     * Starter pack ID, as found in the public Warpcast pack URL or in the non-authed public API of starter pack metadata.
     *
     */
    id: string
  }
  url: '/fc/starter-pack-members'
}

export interface GetStarterPackMembersResponses {
  /**
   * Successful response with list of starter pack members.
   */
  200: {
    result?: {
      members?: {
        /**
         * The Farcaster ID of the starter pack member
         */
        fid: number
        /**
         * Timestamp in milliseconds when the user became a member
         */
        memberAt: bigint
      }[]
    }
    next?: {
      /**
       * Pagination cursor for fetching the next set of results
       */
      cursor?: string
    }
  }
}

export type GetStarterPackMembersResponse =
  GetStarterPackMembersResponses[keyof GetStarterPackMembersResponses]

export interface SendDirectCastData {
  body: {
    /**
     * The Farcaster ID of the recipient.
     */
    recipientFid: number
    /**
     * The direct cast message.
     */
    message: string
    /**
     * A unique key to ensure idempotency.
     */
    idempotencyKey: string
  }
  path?: never
  query?: never
  url: '/v2/ext-send-direct-cast'
}

export interface SendDirectCastResponses {
  /**
   * Direct cast sent successfully
   */
  200: {
    result: {
      /**
       * Indicates if the direct cast was sent successfully
       */
      success: boolean
    }
  }
}

export type SendDirectCastResponse =
  SendDirectCastResponses[keyof SendDirectCastResponses]

export interface ClientOptions {
  baseUrl:
    | 'https://api.warpcast.com'
    | 'https://client.warpcccastt.com'
    | (string & {})
}
