{
  "openapi": "3.1.0",
  "info": {
    "title": "Warpcast API",
    "version": "1.0.0",
    "description": "API for interacting with the Warpcast platform",
    "license": {
      "name": "Apache License 2.0",
      "identifier": "Apache-2.0"
    }
  },
  "servers": [
    {
      "url": "https://api.farcaster.xyz",
      "description": "Main API server"
    },
    {
      "url": "https://client.warpcccastt.com",
      "description": "Client-side interface"
    }
  ],
  "tags": [
    {
      "name": "User",
      "description": "Operations related to user information and preferences"
    },
    {
      "name": "Feed",
      "description": "Operations related to content feeds"
    },
    {
      "name": "Channels",
      "description": "Operations related to channel management"
    },
    {
      "name": "Messaging",
      "description": "Operations related to direct messages and casts"
    },
    {
      "name": "DevTools",
      "description": "Development tools and utilities for Farcaster integration"
    }
  ],
  "paths": {
    "/v2/onboarding-state": {
      "get": {
        "operationId": "getUserOnboardingState",
        "tags": [
          "User"
        ],
        "summary": "Get onboarding state",
        "description": "Retrieves the current onboarding state for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of onboarding state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingStateResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/user-by-fid": {
      "get": {
        "operationId": "getUserByFid",
        "tags": [
          "User"
        ],
        "summary": "Get user by fid",
        "description": "Retrieves user information based on FID",
        "parameters": [
          {
            "$ref": "#/components/parameters/fidParam"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of user by fid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserByFidResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v2/direct-cast-inbox": {
      "get": {
        "operationId": "getDirectCastInbox",
        "tags": [
          "Messaging"
        ],
        "summary": "Get user's direct cast inbox",
        "description": "Retrieves direct casts sent to the authenticated user",
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "name": "category",
            "in": "query",
            "description": "Category of conversations to retrieve",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "requests",
                "spam"
              ],
              "default": "default"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving next page",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Base64 encoded cursor from previous response"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of direct cast inbox",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectCastInboxResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/user-app-context": {
      "get": {
        "operationId": "getUserAppContext",
        "tags": [
          "User"
        ],
        "summary": "Get user app context",
        "description": "Retrieves application context information for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of user app context",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAppContextResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/user-preferences": {
      "get": {
        "operationId": "getUserPreferences",
        "tags": [
          "User"
        ],
        "summary": "Get user preferences",
        "description": "Retrieves preference settings for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of user preferences",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferencesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/highlighted-channels": {
      "get": {
        "operationId": "getHighlightedChannels",
        "tags": [
          "Channels"
        ],
        "summary": "Get highlighted channels",
        "description": "Retrieves a list of featured or recommended channels",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of highlighted channels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HighlightedChannelsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/feed-items": {
      "post": {
        "operationId": "getFeedItems",
        "tags": [
          "Feed"
        ],
        "summary": "Get feed items",
        "description": "Retrieves feed content based on provided filters and parameters",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "feedKey",
                  "feedType"
                ],
                "properties": {
                  "feedKey": {
                    "type": "string",
                    "description": "Identifier for the specific feed"
                  },
                  "feedType": {
                    "type": "string",
                    "description": "Type of feed to retrieve"
                  },
                  "castViewEvents": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "description": "View events for casts"
                  },
                  "updateState": {
                    "type": "boolean",
                    "description": "Whether to update the feed state"
                  }
                }
              },
              "example": {
                "feedKey": "home",
                "feedType": "following",
                "updateState": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful retrieval of feed items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedItemsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/user": {
      "get": {
        "operationId": "getUser",
        "tags": [
          "User"
        ],
        "summary": "Get user information",
        "description": "Retrieves detailed user information based on FID",
        "parameters": [
          {
            "$ref": "#/components/parameters/fidParam"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v2/user-following-channels": {
      "get": {
        "operationId": "getUserFollowingChannels",
        "tags": [
          "Channels",
          "User"
        ],
        "summary": "Get user following channels",
        "description": "Retrieves channels that the authenticated user is following",
        "parameters": [
          {
            "name": "forComposer",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Whether results are intended for the composer interface"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of followed channels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HighlightedChannelsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/suggested-users": {
      "get": {
        "operationId": "getSuggestedUsers",
        "summary": "Get suggested users",
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "name": "randomized",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of suggested users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestedUsersResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/favorite-frames": {
      "get": {
        "operationId": "getUserFavoriteFrames",
        "summary": "Get user's favorite frames",
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of favorite frames",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteFramesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/user-by-username": {
      "get": {
        "operationId": "getUserByUsername",
        "summary": "Get user by username",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of user by username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v2/channel-streaks": {
      "get": {
        "operationId": "getChannelStreaksForUser",
        "summary": "Get channel streaks for user",
        "parameters": [
          {
            "name": "fid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of channel streaks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelStreaksResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/unseen": {
      "get": {
        "operationId": "getUnseenCounts",
        "summary": "Get unseen counts and feed state",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of unseen feed and notification data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnseenCountsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/user-thread-casts": {
      "get": {
        "operationId": "getUserThreadCasts",
        "summary": "Get casts from a user thread",
        "description": "Retrieves casts from a specific thread by a user",
        "tags": [
          "Messaging"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "name": "castHashPrefix",
            "in": "query",
            "required": true,
            "description": "The hash prefix of the cast",
            "schema": {
              "type": "string",
              "example": "0xcb2f2dbe"
            }
          },
          {
            "name": "username",
            "in": "query",
            "required": true,
            "description": "The username of the user",
            "schema": {
              "type": "string",
              "example": "nekofar.eth"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of user thread casts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserThreadCastsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/channel-followers-you-know": {
      "get": {
        "operationId": "getChannelFollowersYouKnow",
        "summary": "Get mutual followers in a channel",
        "parameters": [
          {
            "name": "channelKey",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of known channel followers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelFollowersYouKnowResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/mark-all-notifications-read": {
      "put": {
        "operationId": "markAllNotificationsRead",
        "summary": "Mark all notifications as read",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful mark-all-read operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/notifications-for-tab": {
      "get": {
        "operationId": "getNotifications",
        "summary": "Get notifications for a specific tab",
        "description": "Returns a list of notifications for the specified tab.",
        "parameters": [
          {
            "in": "query",
            "name": "tab",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "follows",
                "reactions",
                "mentions",
                "replies"
              ]
            },
            "description": "Notification tab type"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15,
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of notifications to return"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of notifications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/v2/set-last-checked-timestamp": {
      "put": {
        "operationId": "setLastCheckedTimestamp",
        "summary": "Set last checked timestamp",
        "description": "Updates the last checked timestamp for notifications.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Empty object for now"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/v2/direct-cast-conversation": {
      "get": {
        "operationId": "getDirectCastConversation",
        "summary": "Get direct cast conversation",
        "description": "Fetches a direct cast conversation by conversationId.",
        "parameters": [
          {
            "in": "query",
            "name": "conversationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID. Format depends on conversation type:\n- 1:1 conversations: \"fid1-fid2\" (e.g., \"123-456\")\n- Group conversations: Hash format (e.g., \"a1b2c3d4e5f6...\")\n"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A direct cast conversation object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectCastConversationResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/v2/direct-cast-conversation-messages": {
      "get": {
        "operationId": "getDirectCastConversationMessages",
        "summary": "Get direct cast conversation messages",
        "description": "Fetches messages from a direct cast conversation by conversationId with pagination support.",
        "tags": [
          "Messaging"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "conversationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID. Format depends on conversation type:\n- 1:1 conversations: \"fid1-fid2\" (e.g., \"123-456\")\n- Group conversations: Hash format (e.g., \"c9e139dcbc9423cf\")\n"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "description": "Maximum number of messages to return",
            "example": 50
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of direct cast conversation messages with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectCastConversationMessagesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/v2/direct-cast-conversation-recent-messages": {
      "get": {
        "operationId": "getDirectCastConversationRecentMessages",
        "summary": "Get recent messages from direct cast conversation",
        "description": "Fetches recent messages from a direct cast conversation by conversationId.",
        "tags": [
          "Messaging"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "conversationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID. Format depends on conversation type:\n- 1:1 conversations: \"fid1-fid2\" (e.g., \"123-456\")\n- Group conversations: Hash format (e.g., \"c9e139dcbc9423cf\")\n"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of recent direct cast conversation messages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectCastConversationMessagesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/v2/direct-cast-send": {
      "put": {
        "operationId": "sendDirectCastMessage",
        "summary": "Send direct cast message",
        "description": "Sends a direct cast message to specified recipients in a conversation.",
        "tags": [
          "Messaging"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectCastSendRequest"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Direct cast message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectCastSendResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/v2/discover-channels": {
      "get": {
        "operationId": "discoverChannels",
        "summary": "Discover channels",
        "description": "Retrieves a list of discoverable channels with optional limit.",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15,
              "minimum": 1,
              "maximum": 100
            },
            "description": "Maximum number of channels to retrieve"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of channels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoverChannelsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/v2/invites-available": {
      "get": {
        "operationId": "getAvailableInvites",
        "summary": "Check available invites",
        "description": "Returns the number of allocated and currently available invites.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Invite count information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitesAvailableResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/v2/warpcast-sponsored-invites": {
      "get": {
        "operationId": "getSponsoredInvites",
        "summary": "Get sponsored invites",
        "description": "Returns a list of Warpcast-sponsored invites available to the user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of sponsored invites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SponsoredInvitesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/v2/rewards-leaderboard": {
      "get": {
        "operationId": "getRewardsLeaderboard",
        "summary": "Get rewards leaderboard",
        "description": "Returns a list of users in the rewards leaderboard based on invite activity.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "name": "rewardsType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "invite"
              ]
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Rewards leaderboard",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardsLeaderboardResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/v2/rewards-scores-for-user": {
      "get": {
        "operationId": "getUserRewardsScores",
        "summary": "Get invite rewards scores for a user",
        "description": "Returns current, previous, and all-time invite rewards scores for the specified user.",
        "parameters": [
          {
            "$ref": "#/components/parameters/fidParam"
          },
          {
            "name": "rewardsType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "invite"
              ]
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User rewards scores",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardsScoresResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/v2/rewards-metadata": {
      "get": {
        "operationId": "getRewardsMetadata",
        "summary": "Get invite rewards metadata",
        "description": "Returns metadata for the invite rewards program including the reward period and reward distribution details.",
        "parameters": [
          {
            "name": "rewardsType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "invite"
              ]
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Invite rewards metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardsMetadataResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/v2/bookmarked-casts": {
      "get": {
        "operationId": "getBookmarkedCasts",
        "summary": "Get bookmarked casts",
        "description": "Returns the most recent casts bookmarked by the user.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of bookmarked casts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookmarkedCastsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/starter-packs": {
      "get": {
        "operationId": "getUserStarterPacks",
        "summary": "Get starter packs",
        "description": "Returns starter packs created by a specific user.",
        "parameters": [
          {
            "name": "fid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of starter packs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StarterPacksResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/starter-packs/suggested": {
      "get": {
        "operationId": "getSuggestedStarterPacks",
        "summary": "Get suggested starter packs",
        "description": "Returns a list of suggested starter packs.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of suggested starter packs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StarterPacksResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/starter-pack": {
      "get": {
        "operationId": "getStarterPack",
        "summary": "Get a specific starter pack by ID",
        "description": "Returns a specific starter pack.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A starter pack object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StarterPackResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/starter-pack-users": {
      "get": {
        "operationId": "getStarterPackUsers",
        "summary": "Get users in a specific starter pack",
        "description": "Returns a list of users associated with a given starter pack.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of users in the starter pack",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StarterPackUsersResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/channel": {
      "get": {
        "operationId": "getChannel",
        "summary": "Get channel details",
        "description": "Returns metadata about a channel.",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Channel metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/channel-users": {
      "get": {
        "operationId": "getChannelUsers",
        "summary": "Get members of a specific channel",
        "description": "Returns users who are members of a specific channel.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "name": "channelKey",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterToMembers",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users in the specified channel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelUsersResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/following": {
      "get": {
        "operationId": "getFollowing",
        "summary": "Get users a given user is following",
        "description": "Returns a list of users followed by a specified FID.",
        "parameters": [
          {
            "name": "fid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of followed users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/followers": {
      "get": {
        "operationId": "getFollowers",
        "summary": "Get users following a given user",
        "description": "Returns a list of users who follow the specified FID.",
        "parameters": [
          {
            "name": "fid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of followers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/followers-you-know": {
      "get": {
        "operationId": "getMutualFollowers",
        "summary": "Get mutual followers of a given user",
        "description": "Returns a list of users who follow the given FID and are followed by the viewer.",
        "parameters": [
          {
            "name": "fid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of mutual followers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersWithCountResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/top-frameapps": {
      "get": {
        "operationId": "getTopFrameApps",
        "summary": "Get top FrameApps",
        "description": "Returns a list of top FrameApps with optional pagination.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of FrameApps",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FrameAppsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/verifications": {
      "get": {
        "operationId": "getVerifications",
        "summary": "Get verified addresses for an FID",
        "description": "Returns verified Ethereum addresses associated with a specific FID.",
        "parameters": [
          {
            "$ref": "#/components/parameters/fidParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of verifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "verifications": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/VerifiedAddress"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/get-muted-keywords": {
      "get": {
        "operationId": "getMutedKeywords",
        "summary": "Get muted keywords",
        "description": "Returns a list of muted keywords for the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of muted keywords",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MutedKeywordsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/mute-keyword": {
      "post": {
        "operationId": "muteKeyword",
        "summary": "Mute a keyword",
        "description": "Mutes a keyword for the authenticated user with specified properties.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keyword": {
                    "type": "string"
                  },
                  "properties": {
                    "$ref": "#/components/schemas/MutedKeywordProperties"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The muted keyword and its settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MutedKeywordsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/unmute-keyword": {
      "post": {
        "operationId": "unmuteKeyword",
        "summary": "Unmute a keyword",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keyword": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Keyword unmuted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MutedKeywordsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/cast-likes": {
      "get": {
        "summary": "Get cast likes",
        "operationId": "getCastLikes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "castHash",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cast likes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "likes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "example": "like"
                              },
                              "hash": {
                                "type": "string"
                              },
                              "castHash": {
                                "type": "string"
                              },
                              "timestamp": {
                                "type": "integer"
                              },
                              "reactor": {
                                "$ref": "#/components/schemas/User"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "summary": "Like a cast",
        "operationId": "likeCast",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "castHash"
                ],
                "properties": {
                  "castHash": {
                    "type": "string",
                    "example": "0x0bb901f364673e86adfc0ed4c14ececb8d9b9d27"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Like response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "like": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "like"
                            },
                            "hash": {
                              "type": "string"
                            },
                            "castHash": {
                              "type": "string"
                            },
                            "timestamp": {
                              "type": "integer"
                            },
                            "reactor": {
                              "$ref": "#/components/schemas/User"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "summary": "Unlike a cast",
        "operationId": "unlikeCast",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "castHash"
                ],
                "properties": {
                  "castHash": {
                    "type": "string",
                    "example": "0x0bb901f364673e86adfc0ed4c14ececb8d9b9d27"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unlike response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/recasts": {
      "put": {
        "summary": "Recast a cast",
        "operationId": "recastCast",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "castHash"
                ],
                "properties": {
                  "castHash": {
                    "type": "string",
                    "example": "0x0bb901f364673e86adfc0ed4c14ececb8d9b9d27"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recast response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CastHashResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "summary": "Undo recast",
        "operationId": "undoRecast",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "castHash"
                ],
                "properties": {
                  "castHash": {
                    "type": "string",
                    "example": "0x0bb901f364673e86adfc0ed4c14ececb8d9b9d27"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Undo recast response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/cast-attachments": {
      "put": {
        "summary": "Attach embeds to a cast",
        "operationId": "attachEmbeds",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string"
                  },
                  "embeds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uri"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attachment response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachEmbedsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/cast-recasters": {
      "get": {
        "summary": "Get cast recasters",
        "operationId": "getCastRecasters",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "name": "castHash",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users who recasted the cast",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CastRecastersResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/cast-quotes": {
      "get": {
        "summary": "Get quotes of a cast",
        "operationId": "getCastQuotes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "castHash",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of quote casts referencing the given cast",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CastQuotesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/me": {
      "get": {
        "operationId": "getCurrentUser",
        "summary": "Get current user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user-response_UserResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/search-channels": {
      "get": {
        "summary": "Search for channels",
        "operationId": "searchChannels",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prioritizeFollowed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "forComposer",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of matched channels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchChannelsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/draft-caststorms": {
      "get": {
        "summary": "Get draft cast storms",
        "operationId": "getDraftCasts",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 15
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of draft cast storms",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DraftsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a new draft casts",
        "operationId": "createDraftCasts",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "idempotency-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "caststorm": {
                    "type": "object",
                    "properties": {
                      "casts": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/DraftCast"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created draft caststorm",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DraftCreatedResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/draft-casts": {
      "delete": {
        "summary": "Delete a draft cast",
        "operationId": "deleteDraftCast",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "draftId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Draft cast deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/casts": {
      "get": {
        "summary": "Retrieve casts for a specific user",
        "operationId": "getCastsByFid",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "fid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The FID (Farcaster ID) of the user whose casts to retrieve"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of casts to return",
              "default": 15
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved casts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "casts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Cast"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a new cast",
        "operationId": "createCast",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "text"
                ],
                "properties": {
                  "text": {
                    "type": "string"
                  },
                  "embeds": {
                    "type": "array",
                    "items": {}
                  },
                  "channelKey": {
                    "type": "string",
                    "description": "Optional channel to post the cast to"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cast created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CastCreatedResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "summary": "Delete a cast",
        "operationId": "deleteCast",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "castHash": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cast deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/all-channels": {
      "get": {
        "operationId": "getAllChannels",
        "summary": "Get all channels",
        "description": "Returns a list of all channels on Warpcast",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/channel": {
      "get": {
        "operationId": "getChannelDetails",
        "summary": "Get details of a specific channel",
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Channel details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RawChannelResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/channel-followers": {
      "get": {
        "operationId": "getChannelFollowers",
        "summary": "Get followers of a channel",
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of channel followers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelFollowersResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/user-following-channels": {
      "get": {
        "operationId": "getUserFollowedChannels",
        "summary": "Get list of channels followed by a user",
        "parameters": [
          {
            "$ref": "#/components/parameters/fidParam"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with list of followed channels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/user-channel": {
      "get": {
        "operationId": "checkUserChannelFollowStatus",
        "summary": "Check if a user is following a channel",
        "parameters": [
          {
            "$ref": "#/components/parameters/fidParam"
          },
          {
            "name": "channelId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with follow status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelFollowStatusResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/fc/channel-members": {
      "get": {
        "operationId": "getChannelMembers",
        "summary": "Get members of a channel",
        "parameters": [
          {
            "in": "query",
            "name": "channelId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with list of members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "type": "object",
                      "required": [
                        "members"
                      ],
                      "properties": {
                        "members": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "fid",
                              "memberAt"
                            ],
                            "properties": {
                              "fid": {
                                "type": "integer",
                                "description": "Farcaster ID of the member"
                              },
                              "memberAt": {
                                "type": "integer",
                                "description": "Timestamp when the user became a member"
                              }
                            }
                          }
                        }
                      }
                    },
                    "next": {
                      "type": "object",
                      "properties": {
                        "cursor": {
                          "type": "string",
                          "description": "Cursor for pagination"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "members": [
                      {
                        "fid": 466624,
                        "memberAt": 1712685183
                      },
                      {
                        "fid": 469283,
                        "memberAt": 1712685067
                      }
                    ]
                  },
                  "next": {
                    "cursor": "..."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/fc/channel-invites": {
      "get": {
        "operationId": "getChannelInvites",
        "summary": "Get channel invites",
        "parameters": [
          {
            "in": "query",
            "name": "channelId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with list of channel invites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "invites": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "channelId",
                              "invitedFid",
                              "invitedAt",
                              "inviterFid",
                              "role"
                            ],
                            "properties": {
                              "channelId": {
                                "type": "string"
                              },
                              "invitedFid": {
                                "type": "integer"
                              },
                              "invitedAt": {
                                "type": "integer"
                              },
                              "inviterFid": {
                                "type": "integer"
                              },
                              "role": {
                                "type": "string",
                                "enum": [
                                  "member",
                                  "admin"
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    "next": {
                      "type": "object",
                      "properties": {
                        "cursor": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "invites": [
                      {
                        "channelId": "coke-zero",
                        "invitedFid": 194,
                        "invitedAt": 1726879628,
                        "inviterFid": 18949,
                        "role": "member"
                      },
                      {
                        "channelId": "brain-teasers",
                        "invitedFid": 627785,
                        "invitedAt": 1726874566,
                        "inviterFid": 235128,
                        "role": "member"
                      }
                    ]
                  },
                  "next": {
                    "cursor": "..."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "operationId": "inviteUserToChannel",
        "summary": "Invite a user to a channel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "channelId",
                  "inviteFid",
                  "role"
                ],
                "properties": {
                  "channelId": {
                    "type": "string",
                    "description": "ID of the channel to invite the user to"
                  },
                  "inviteFid": {
                    "type": "integer",
                    "description": "Farcaster ID of the user being invited"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "member",
                      "admin"
                    ],
                    "description": "Role of the invited user within the channel"
                  }
                }
              },
              "example": {
                "channelId": "evm",
                "inviteFid": 341234,
                "role": "member"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful invite operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "result": {
                    "success": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "removeChannelInvite",
        "summary": "Remove a user's invite from a channel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "channelId",
                  "removeFid",
                  "role"
                ],
                "properties": {
                  "channelId": {
                    "type": "string",
                    "description": "ID of the channel from which the user's invite is being removed"
                  },
                  "removeFid": {
                    "type": "integer",
                    "description": "Farcaster ID of the user whose invite is being removed"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "member",
                      "admin"
                    ],
                    "description": "Role associated with the invite being removed"
                  }
                }
              },
              "example": {
                "channelId": "evm",
                "removeFid": 341234,
                "role": "member"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful removal of invite",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "result": {
                    "success": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "patch": {
        "operationId": "acceptChannelInvite",
        "summary": "Accept a channel invite",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "channelId",
                  "role",
                  "accept"
                ],
                "properties": {
                  "channelId": {
                    "type": "string",
                    "description": "ID of the channel for which the invite is being accepted"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "member",
                      "admin"
                    ],
                    "description": "Role that the user will have in the channel"
                  },
                  "accept": {
                    "type": "boolean",
                    "description": "Flag indicating whether to accept the invite"
                  }
                }
              },
              "example": {
                "channelId": "evm",
                "role": "member",
                "accept": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful acceptance of invite",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "result": {
                    "success": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/fc/moderated-casts": {
      "get": {
        "operationId": "getChannelModeratedCasts",
        "summary": "Get moderated casts for a channel",
        "parameters": [
          {
            "in": "query",
            "name": "channelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the channel to get moderation actions for"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with list of moderation actions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "type": "object",
                      "required": [
                        "moderationActions"
                      ],
                      "properties": {
                        "moderationActions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "castHash",
                              "channelId",
                              "action",
                              "moderatedAt"
                            ],
                            "properties": {
                              "castHash": {
                                "type": "string",
                                "description": "Hash of the moderated cast"
                              },
                              "channelId": {
                                "type": "string",
                                "description": "ID of the channel where the cast was moderated"
                              },
                              "action": {
                                "type": "string",
                                "enum": [
                                  "hide"
                                ],
                                "description": "Type of moderation action applied"
                              },
                              "moderatedAt": {
                                "type": "integer",
                                "description": "Unix timestamp of when the moderation action was taken"
                              }
                            }
                          }
                        }
                      }
                    },
                    "next": {
                      "type": "object",
                      "properties": {
                        "cursor": {
                          "type": "string",
                          "description": "Pagination cursor for fetching the next set of results"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "moderationActions": [
                      {
                        "castHash": "0x6b2253105ef8c1d1b984a5df87182b105a1f0b3a",
                        "channelId": "welcome",
                        "action": "hide",
                        "moderatedAt": 1727767637
                      }
                    ]
                  },
                  "next": {
                    "cursor": "..."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/fc/channel-restricted-users": {
      "get": {
        "operationId": "getChannelRestrictedUsers",
        "summary": "Get restricted users in a channel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "channelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the channel to get restricted users for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with list of restricted users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "type": "object",
                      "required": [
                        "restrictedUsers"
                      ],
                      "properties": {
                        "restrictedUsers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "fid",
                              "channelId",
                              "restrictedAt"
                            ],
                            "properties": {
                              "fid": {
                                "type": "integer",
                                "description": "Farcaster ID of the restricted user"
                              },
                              "channelId": {
                                "type": "string",
                                "description": "ID of the channel where the user is restricted"
                              },
                              "restrictedAt": {
                                "type": "integer",
                                "description": "Unix timestamp of when the user was restricted"
                              }
                            }
                          }
                        }
                      }
                    },
                    "next": {
                      "type": "object",
                      "properties": {
                        "cursor": {
                          "type": "string",
                          "description": "Pagination cursor for fetching the next set of results"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "restrictedUsers": [
                      {
                        "fid": 1234,
                        "channelId": "welcome",
                        "restrictedAt": 1727767637
                      }
                    ]
                  },
                  "next": {
                    "cursor": "..."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/fc/channel-bans": {
      "get": {
        "operationId": "getChannelBannedUsers",
        "summary": "Get banned users in a channel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "channelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the channel to get banned users for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with list of banned users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "type": "object",
                      "required": [
                        "bannedUsers"
                      ],
                      "properties": {
                        "bannedUsers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "fid",
                              "channelId",
                              "bannedAt"
                            ],
                            "properties": {
                              "fid": {
                                "type": "integer",
                                "description": "Farcaster ID of the banned user"
                              },
                              "channelId": {
                                "type": "string",
                                "description": "ID of the channel where the user is banned"
                              },
                              "bannedAt": {
                                "type": "integer",
                                "description": "Unix timestamp of when the user was banned"
                              }
                            }
                          }
                        }
                      }
                    },
                    "next": {
                      "type": "object",
                      "properties": {
                        "cursor": {
                          "type": "string",
                          "description": "Pagination cursor for fetching the next set of banned users"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "bannedUsers": [
                      {
                        "fid": 1234,
                        "channelId": "welcome",
                        "bannedAt": 1727767637
                      }
                    ]
                  },
                  "next": {
                    "cursor": "..."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "operationId": "banUserFromChannel",
        "summary": "Ban a user from a channel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "channelId",
                  "banFid"
                ],
                "properties": {
                  "channelId": {
                    "type": "string",
                    "description": "ID of the channel from which to ban the user"
                  },
                  "banFid": {
                    "type": "integer",
                    "description": "Farcaster ID of the user to ban"
                  }
                }
              },
              "example": {
                "channelId": "memes",
                "banFid": 1234
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful ban operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "result": {
                    "success": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "unbanUserFromChannel",
        "summary": "Unban a user from a channel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "channelId",
                  "banFid"
                ],
                "properties": {
                  "channelId": {
                    "type": "string",
                    "description": "ID of the channel from which to unban the user"
                  },
                  "banFid": {
                    "type": "integer",
                    "description": "Farcaster ID of the user to unban"
                  }
                }
              },
              "example": {
                "channelId": "memes",
                "banFid": 1234
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful unban operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "result": {
                    "success": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/fc/channel-follows": {
      "post": {
        "operationId": "followChannel",
        "summary": "Follow a channel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "channelId"
                ],
                "properties": {
                  "channelId": {
                    "type": "string",
                    "description": "ID of the channel to follow"
                  }
                }
              },
              "example": {
                "channelId": "evm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful follow operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "result": {
                    "success": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "unfollowChannel",
        "summary": "Unfollow a channel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "channelId"
                ],
                "properties": {
                  "channelId": {
                    "type": "string",
                    "description": "ID of the channel to unfollow"
                  }
                }
              },
              "example": {
                "channelId": "evm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful unfollow operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "result": {
                    "success": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/fc/moderate-cast": {
      "post": {
        "operationId": "moderateCast",
        "summary": "Moderate a cast (e.g., hide it)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "castHash",
                  "action"
                ],
                "properties": {
                  "castHash": {
                    "type": "string",
                    "description": "Hash of the cast to moderate"
                  },
                  "action": {
                    "type": "string",
                    "description": "Type of moderation action to apply",
                    "enum": [
                      "hide"
                    ]
                  }
                }
              },
              "example": {
                "castHash": "0x2694aa649f3608bd11fe6621946782d1eb0ae3c4",
                "action": "hide"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful moderation action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "result": {
                    "success": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/fc/pinned-casts": {
      "put": {
        "operationId": "pinCastToChannel",
        "summary": "Pin a cast to a channel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "castHash"
                ],
                "properties": {
                  "castHash": {
                    "type": "string",
                    "description": "Hash of the cast to pin"
                  },
                  "notifyChannelFollowers": {
                    "type": "boolean",
                    "description": "Whether to notify followers of the channel about the pin"
                  }
                }
              },
              "example": {
                "castHash": "0x2694aa649f3608bd11fe6621946782d1eb0ae3c4",
                "notifyChannelFollowers": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful pin operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "result": {
                    "success": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "unpinCastFromChannel",
        "summary": "Unpin a cast from a channel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "channelId"
                ],
                "properties": {
                  "channelId": {
                    "type": "string",
                    "description": "ID of the channel from which to unpin a cast"
                  }
                }
              },
              "example": {
                "channelId": "welcome"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful unpin operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "result": {
                    "success": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/discover-actions": {
      "get": {
        "operationId": "getDiscoverableActions",
        "summary": "Get discoverable actions",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "list",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with list of discoverable actions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Action"
                          }
                        },
                        "next": {
                          "type": "object",
                          "properties": {
                            "cursor": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "actions": [
                      {
                        "name": "Upthumb",
                        "icon": "thumbsup",
                        "description": "Give casts 'upthumbs' and see them on a leaderboard.",
                        "aboutUrl": "https://github.com/horsefacts/upthumbs",
                        "actionUrl": "https://upthumbs.app/api/upthumb",
                        "action": {
                          "actionType": "post",
                          "postUrl": "https://upthumbs.app/api/upthumb"
                        }
                      }
                    ],
                    "next": {
                      "cursor": "..."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/discover-composer-actions": {
      "get": {
        "operationId": "getDiscoverableComposerActions",
        "summary": "Get top discoverable composer actions",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "list",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with list of discoverable composer actions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Action"
                          }
                        },
                        "next": {
                          "type": "object",
                          "properties": {
                            "cursor": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "actions": [
                      {
                        "name": "Poll",
                        "icon": "list-unordered",
                        "description": "Create a poll",
                        "aboutUrl": "https://poll.example.com/",
                        "imageUrl": "https://poll.example.com/images/logo.png",
                        "actionUrl": "https://poll.example.com/api/action/",
                        "action": {
                          "actionType": "post",
                          "postUrl": "https://poll.ecample.com/api/action/"
                        }
                      }
                    ],
                    "next": {
                      "cursor": "..."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/fc/blocked-users": {
      "get": {
        "operationId": "getBlockedUsers",
        "summary": "Get list of blocked users",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with list of blocked users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "type": "object",
                      "required": [
                        "blockedUsers"
                      ],
                      "properties": {
                        "blockedUsers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "blockerFid",
                              "blockedFid",
                              "createdAt"
                            ],
                            "properties": {
                              "blockerFid": {
                                "type": "integer",
                                "description": "Farcaster ID of the user who blocked"
                              },
                              "blockedFid": {
                                "type": "integer",
                                "description": "Farcaster ID of the user who was blocked"
                              },
                              "createdAt": {
                                "type": "integer",
                                "description": "Unix timestamp of when the user was blocked"
                              }
                            }
                          }
                        },
                        "next": {
                          "type": "object",
                          "properties": {
                            "cursor": {
                              "type": "string",
                              "description": "Pagination cursor for fetching the next set of blocked users"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "blockedUsers": [
                      {
                        "blockerFid": 5,
                        "blockedFid": 10,
                        "createdAt": 1724854521
                      }
                    ],
                    "next": {
                      "cursor": "..."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "operationId": "blockUser",
        "summary": "Block a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "blockFid"
                ],
                "properties": {
                  "blockFid": {
                    "type": "integer",
                    "description": "Farcaster ID of the user to block"
                  }
                }
              },
              "example": {
                "blockFid": 1234
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful block operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "type": "object",
                      "required": [
                        "success"
                      ],
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "description": "Indicates whether the block operation was successful"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "success": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "operationId": "unblockUser",
        "summary": "Unblock a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "unblockFid"
                ],
                "properties": {
                  "unblockFid": {
                    "type": "integer",
                    "description": "Farcaster ID of the user to unblock"
                  }
                }
              },
              "example": {
                "unblockFid": 1234
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful unblock operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "type": "object",
                      "required": [
                        "success"
                      ],
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "description": "Indicates whether the unblock operation was successful"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "success": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/fc/account-verifications": {
      "get": {
        "operationId": "getAccountVerifications",
        "summary": "Get account verifications",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fidParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with list of account verifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "verifications": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "fid": {
                                "type": "integer"
                              },
                              "platform": {
                                "type": "string"
                              },
                              "platformId": {
                                "type": "string"
                              },
                              "platformUsername": {
                                "type": "string"
                              },
                              "verifiedAt": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    },
                    "next": {
                      "type": "object",
                      "properties": {
                        "cursor": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "verifications": [
                      {
                        "fid": 3,
                        "platform": "x",
                        "platformId": "9615352",
                        "platformUsername": "dwr",
                        "verifiedAt": 1728505748
                      }
                    ]
                  },
                  "next": {
                    "cursor": "..."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/creator-rewards-winner-history": {
      "get": {
        "operationId": "getCreatorRewardWinners",
        "summary": "Get creator reward winners",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "periodsAgo",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "How many periods ago to fetch the results for. 0 or undefined returns results for the most recent period."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with creator reward winners history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "periodStartTimestamp": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "periodEndTimestamp": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "winners": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "fid": {
                                "type": "integer"
                              },
                              "score": {
                                "type": "integer"
                              },
                              "rank": {
                                "type": "integer"
                              },
                              "rewardCents": {
                                "type": "integer"
                              },
                              "walletAddress": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "next": {
                      "type": "object",
                      "properties": {
                        "cursor": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "periodStartTimestamp": 1738080000000,
                    "periodEndTimestamp": 1738684800000,
                    "winners": [
                      {
                        "fid": 1,
                        "score": 10,
                        "rank": 1,
                        "rewardCents": 1000,
                        "walletAddress": "0x0000000000000000000000000000000000000000"
                      },
                      {
                        "fid": 420,
                        "score": 1,
                        "rank": 2,
                        "rewardCents": 500,
                        "walletAddress": "0x0000000000000000000000000000000000000001"
                      }
                    ]
                  },
                  "next": {
                    "cursor": "..."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/fc/primary-address": {
      "get": {
        "operationId": "getUserPrimaryAddress",
        "summary": "Get User Primary Address",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fidParam"
          },
          {
            "in": "query",
            "name": "protocol",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ethereum",
                "solana"
              ]
            },
            "description": "The protocol of the address to fetch."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with the user's primary address.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "$ref": "#/components/schemas/VerifiedAddress"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "address": {
                      "fid": 12152,
                      "protocol": "ethereum",
                      "address": "0x0BD6b1DFE1eA61C2b487806ECd06b5A95383a4e3"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/fc/primary-addresses": {
      "get": {
        "operationId": "getUserPrimaryAddresses",
        "summary": "Get Multiple User Primary Addresses",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fids",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of FIDs to fetch primary addresses for."
          },
          {
            "in": "query",
            "name": "protocol",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ethereum",
                "solana"
              ]
            },
            "description": "The protocol of the addresses to fetch."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with list of primary addresses.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "addresses": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "fid",
                              "success"
                            ],
                            "properties": {
                              "fid": {
                                "type": "integer",
                                "description": "The Farcaster ID of the user"
                              },
                              "success": {
                                "type": "boolean",
                                "description": "Whether the address was successfully retrieved"
                              },
                              "address": {
                                "$ref": "#/components/schemas/VerifiedAddress",
                                "description": "Present only if success is true"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "addresses": [
                      {
                        "fid": 12152,
                        "success": true,
                        "address": {
                          "fid": 12152,
                          "protocol": "ethereum",
                          "address": "0x0BD6b1DFE1eA61C2b487806ECd06b5A95383a4e3"
                        }
                      },
                      {
                        "fid": 2,
                        "success": true,
                        "address": {
                          "fid": 2,
                          "protocol": "ethereum",
                          "address": "0x661E2209B9C6B06C1F32A0639f60D3294185ab35"
                        }
                      },
                      {
                        "fid": 1315,
                        "success": true,
                        "address": {
                          "fid": 1315,
                          "protocol": "ethereum",
                          "address": "0x0450a8545028547Df4129Aa5b4EC5794D5aF2409"
                        }
                      },
                      {
                        "fid": 39939393939,
                        "success": false
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/fc/starter-pack-members": {
      "get": {
        "operationId": "getStarterPackMembers",
        "summary": "Get Starter Pack Members",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Starter pack ID, as found in the public Warpcast pack URL or in the non-authed public API of starter pack metadata.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with list of starter pack members.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "members": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "fid",
                              "memberAt"
                            ],
                            "properties": {
                              "fid": {
                                "type": "integer",
                                "description": "The Farcaster ID of the starter pack member"
                              },
                              "memberAt": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Timestamp in milliseconds when the user became a member"
                              }
                            }
                          }
                        }
                      }
                    },
                    "next": {
                      "type": "object",
                      "properties": {
                        "cursor": {
                          "type": "string",
                          "description": "Pagination cursor for fetching the next set of results"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "members": [
                      {
                        "fid": 3,
                        "memberAt": 1740172669691
                      },
                      {
                        "fid": 296646,
                        "memberAt": 1740172669691
                      }
                    ]
                  },
                  "next": {
                    "cursor": "..."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/ext-send-direct-cast": {
      "put": {
        "operationId": "sendDirectCast",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Send a Direct Cast via External API",
        "description": "Send a programmatic Direct Cast to a recipient. The request must include a unique idempotency key.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "recipientFid",
                  "message",
                  "idempotencyKey"
                ],
                "properties": {
                  "recipientFid": {
                    "type": "integer",
                    "description": "The Farcaster ID of the recipient."
                  },
                  "message": {
                    "type": "string",
                    "description": "The direct cast message."
                  },
                  "idempotencyKey": {
                    "type": "string",
                    "format": "uuid",
                    "description": "A unique key to ensure idempotency."
                  }
                }
              },
              "example": {
                "recipientFid": 6841,
                "message": "this is a programmatic Direct Cast",
                "idempotencyKey": "ed3d9b95-5eed-475f-9c7d-58bdc3b9ac00"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Direct cast sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "type": "object",
                      "required": [
                        "success"
                      ],
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "description": "Indicates if the direct cast was sent successfully"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "success": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/user-by-verification": {
      "get": {
        "summary": "Get user by verification address",
        "description": "Retrieves user information associated with the provided Ethereum verification address",
        "tags": [
          "Users"
        ],
        "operationId": "getUserByVerificationAddress",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": true,
            "description": "Ethereum address used for user verification",
            "schema": {
              "type": "string",
              "format": "ethereum-address"
            },
            "example": "0x742d35Cc6634C0532925a3b844Bc454e4438f44e"
          }
        ],
        "responses": {
          "200": {
            "description": "User data successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid address format"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "No user found for the provided address"
          }
        }
      }
    },
    "/v1/developer-rewards-winner-history": {
      "get": {
        "operationId": "getDeveloperRewardWinners",
        "summary": "Get developer reward winners",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Provides access to all winners for a given period (week). Paginated, with the list of winners in rank order. Not authenticated.",
        "parameters": [
          {
            "name": "periodsAgo",
            "in": "query",
            "description": "How many periods ago to fetch the results for. 0 or undefined returns results for the most recent period.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of developer reward winners",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "periodStartTimestamp": {
                          "type": "integer",
                          "description": "Unix time in milliseconds when rewards period began"
                        },
                        "periodEndTimestamp": {
                          "type": "integer",
                          "description": "Unix time in milliseconds when rewards period ended"
                        },
                        "winners": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Winner"
                          }
                        }
                      }
                    },
                    "next": {
                      "type": "object",
                      "properties": {
                        "cursor": {
                          "type": "string",
                          "description": "Pagination cursor for the next set of results"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/apps-by-author": {
      "get": {
        "operationId": "getAppsByAuthor",
        "summary": "Get apps (frames) by author",
        "description": "Retrieves a list of apps (aka \"frames\") created by a specific author on Warpcast, using their FID (Farcaster ID).\nThe response includes metadata for each app, including icons, URLs, and author profile details.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/fidParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of frames by the author",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppsByAuthorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/domain-manifest": {
      "get": {
        "operationId": "getDomainManifest",
        "summary": "Retrieve domain manifest information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Fetches verification and manifest information for a Farcaster domain",
        "tags": [
          "Frames"
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The domain to retrieve manifest information for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved domain manifest",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "state": {
                          "type": "object",
                          "properties": {
                            "verified": {
                              "type": "boolean",
                              "description": "Indicates if the domain is verified"
                            },
                            "manifest": {
                              "type": "string",
                              "description": "JSON string containing the raw manifest data"
                            },
                            "decodedManifest": {
                              "type": "object",
                              "properties": {
                                "accountAssociation": {
                                  "type": "object",
                                  "properties": {
                                    "fid": {
                                      "type": "integer",
                                      "description": "Farcaster ID associated with the domain"
                                    },
                                    "key": {
                                      "type": "string",
                                      "description": "Public key associated with the domain"
                                    },
                                    "domain": {
                                      "type": "string",
                                      "description": "The domain name"
                                    },
                                    "signature": {
                                      "type": "string",
                                      "description": "Signature proving domain ownership"
                                    }
                                  }
                                }
                              }
                            },
                            "frameConfig": {
                              "type": "object",
                              "description": "Configuration for Farcaster Frames",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the Frame"
                                },
                                "version": {
                                  "type": "string",
                                  "description": "Version of the Frame"
                                },
                                "iconUrl": {
                                  "type": "string",
                                  "description": "URL to the Frame's icon"
                                },
                                "homeUrl": {
                                  "type": "string",
                                  "description": "Home URL of the Frame"
                                },
                                "imageUrl": {
                                  "type": "string",
                                  "description": "Image URL for the Frame"
                                },
                                "buttonTitle": {
                                  "type": "string",
                                  "description": "Title for the Frame's button"
                                },
                                "splashImageUrl": {
                                  "type": "string",
                                  "description": "URL for the splash image"
                                },
                                "splashBackgroundColor": {
                                  "type": "string",
                                  "description": "Background color for splash screen"
                                },
                                "webhookUrl": {
                                  "type": "string",
                                  "description": "Webhook URL for the Frame"
                                }
                              }
                            },
                            "updatedAt": {
                              "type": "integer",
                              "description": "Timestamp of when the data was last updated"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/dev-tools/meta-tags": {
      "get": {
        "operationId": "getMetaTags",
        "summary": "Fetch meta tags from a URL",
        "description": "Retrieves metadata and Open Graph information from a specified URL",
        "tags": [
          "DevTools"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "url",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "The URL to fetch metadata from"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "viewport": {
                      "type": "string",
                      "description": "Viewport meta tag content"
                    },
                    "theme-color": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Theme color values"
                    },
                    "color-scheme": {
                      "type": "string",
                      "description": "Color scheme preference"
                    },
                    "description": {
                      "type": "string",
                      "description": "Page description"
                    },
                    "apple-mobile-web-app-capable": {
                      "type": "string",
                      "description": "Apple mobile web app capability setting"
                    },
                    "apple-mobile-web-app-title": {
                      "type": "string",
                      "description": "Apple mobile web app title"
                    },
                    "apple-mobile-web-app-status-bar-style": {
                      "type": "string",
                      "description": "Apple mobile status bar style"
                    },
                    "og:title": {
                      "type": "string",
                      "description": "Open Graph title"
                    },
                    "og:description": {
                      "type": "string",
                      "description": "Open Graph description"
                    },
                    "og:url": {
                      "type": "string",
                      "description": "Open Graph URL"
                    },
                    "og:site_name": {
                      "type": "string",
                      "description": "Open Graph site name"
                    },
                    "og:image:alt": {
                      "type": "string",
                      "description": "Open Graph image alt text"
                    },
                    "og:image:type": {
                      "type": "string",
                      "description": "Open Graph image MIME type"
                    },
                    "og:image:width": {
                      "type": "string",
                      "description": "Open Graph image width"
                    },
                    "og:image:height": {
                      "type": "string",
                      "description": "Open Graph image height"
                    },
                    "og:image": {
                      "type": "string",
                      "description": "Open Graph image URL"
                    },
                    "og:type": {
                      "type": "string",
                      "description": "Open Graph content type"
                    },
                    "twitter:card": {
                      "type": "string",
                      "description": "Twitter card type"
                    },
                    "twitter:title": {
                      "type": "string",
                      "description": "Twitter card title"
                    },
                    "twitter:description": {
                      "type": "string",
                      "description": "Twitter card description"
                    },
                    "twitter:image:alt": {
                      "type": "string",
                      "description": "Twitter image alt text"
                    },
                    "twitter:image:type": {
                      "type": "string",
                      "description": "Twitter image MIME type"
                    },
                    "twitter:image:width": {
                      "type": "string",
                      "description": "Twitter image width"
                    },
                    "twitter:image:height": {
                      "type": "string",
                      "description": "Twitter image height"
                    },
                    "twitter:image": {
                      "type": "string",
                      "description": "Twitter image URL"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/dev-tools/farcaster-json": {
      "get": {
        "operationId": "getFarcasterJson",
        "summary": "Fetch Farcaster JSON data from a domain",
        "description": "Retrieves Farcaster account association and frame information for a specified domain",
        "tags": [
          "DevTools"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "domain",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The domain to fetch Farcaster JSON data from"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Farcaster JSON data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accountAssociation": {
                      "type": "object",
                      "description": "Farcaster account association information",
                      "properties": {
                        "header": {
                          "type": "string",
                          "description": "Base64 encoded header containing FID, type, and key information"
                        },
                        "payload": {
                          "type": "string",
                          "description": "Base64 encoded payload containing domain information"
                        },
                        "signature": {
                          "type": "string",
                          "description": "Cryptographic signature for verification"
                        }
                      }
                    },
                    "frame": {
                      "type": "object",
                      "description": "Farcaster frame configuration",
                      "properties": {
                        "homeUrl": {
                          "type": "string",
                          "format": "uri",
                          "description": "URL of the frame's home page"
                        },
                        "iconUrl": {
                          "type": "string",
                          "format": "uri",
                          "description": "URL of the frame's icon"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the frame"
                        },
                        "splashBackgroundColor": {
                          "type": "string",
                          "description": "Background color for the splash screen in hex format"
                        },
                        "splashImageUrl": {
                          "type": "string",
                          "format": "uri",
                          "description": "URL of the splash image"
                        },
                        "version": {
                          "type": "string",
                          "description": "Version of the frame"
                        },
                        "webhookUrl": {
                          "type": "string",
                          "format": "uri",
                          "description": "URL of the frame's webhook"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/dev-tools/domains-owned": {
      "get": {
        "operationId": "getOwnedDomains",
        "summary": "Retrieve domains owned by the authenticated user",
        "description": "Returns a list of domains that are owned by the currently authenticated user.",
        "tags": [
          "DevTools"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved owned domains",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "domains": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of domains owned by the authenticated user"
                        }
                      }
                    }
                  },
                  "required": [
                    "result"
                  ]
                },
                "example": {
                  "result": {
                    "domains": [
                      "dev.lilnouns.click",
                      "sepolia.lilnouns.auction",
                      "lilnouns.auction"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/api-keys": {
      "get": {
        "tags": [
          "DevTools"
        ],
        "summary": "Retrieve API keys for the authenticated user",
        "description": "Returns a list of API keys associated with the user's account, including active and revoked keys",
        "operationId": "getApiKeys",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved API keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "type": "object",
                      "required": [
                        "apiKeys"
                      ],
                      "properties": {
                        "apiKeys": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ApiKey"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "description": "Forbidden - User doesn't have permission to access API keys"
          }
        }
      },
      "put": {
        "tags": [
          "DevTools"
        ],
        "summary": "Create a new API key",
        "description": "Creates a new API key with the specified description and expiration date",
        "operationId": "createApiKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A unique key to ensure idempotency of the request",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "description",
                  "expiresAt"
                ],
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "User-provided description of the API key's purpose"
                  },
                  "expiresAt": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Timestamp when the API key should expire (in milliseconds since epoch)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "type": "object",
                      "required": [
                        "id",
                        "secretKey"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique identifier for the created API key"
                        },
                        "secretKey": {
                          "type": "string",
                          "description": "The secret key value that should be used for authentication (only returned once at creation)"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "description": "Forbidden - User doesn't have permission to create API keys"
          }
        }
      }
    },
    "/v2/revoke-api-key": {
      "patch": {
        "tags": [
          "DevTools"
        ],
        "summary": "Revoke an API key",
        "description": "Revokes an existing API key making it no longer valid for authentication",
        "operationId": "revokeApiKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A unique key to ensure idempotency of the request",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of the API key to revoke"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully revoked the API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "type": "object",
                      "required": [
                        "success"
                      ],
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "description": "Forbidden - User doesn't have permission to revoke API keys"
          },
          "404": {
            "description": "Not Found - API key with specified ID does not exist"
          }
        }
      }
    },
    "/v2/connected-accounts": {
      "get": {
        "summary": "Get connected social accounts",
        "description": "Retrieves a list of external social accounts connected to the user's Warpcast profile",
        "operationId": "getConnectedAccounts",
        "tags": [
          "User"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of connected accounts to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of connected accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "accounts": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "connectedAccountId": {
                                "type": "string",
                                "description": "Unique identifier for the connected account"
                              },
                              "platform": {
                                "type": "string",
                                "description": "Social platform name (e.g., x, github, lens)",
                                "enum": [
                                  "x",
                                  "github",
                                  "lens",
                                  "ethereum"
                                ]
                              },
                              "username": {
                                "type": "string",
                                "description": "Username on the connected platform"
                              },
                              "expired": {
                                "type": "boolean",
                                "description": "Whether the connection has expired"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "result"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v2/profile-casts": {
      "get": {
        "tags": [
          "User",
          "Feed"
        ],
        "operationId": "getProfileCasts",
        "summary": "Get casts from a user's profile",
        "description": "Retrieves a list of casts published by a specific user identified by their Farcaster ID (FID).",
        "parameters": [
          {
            "name": "fid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Farcaster ID of the user"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15
            },
            "description": "Maximum number of casts to return"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Cursor for pagination"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user's casts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "type": "object",
                      "required": [
                        "casts"
                      ],
                      "properties": {
                        "casts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Cast"
                          }
                        }
                      }
                    },
                    "next": {
                      "type": "object",
                      "properties": {
                        "cursor": {
                          "type": "string",
                          "description": "Cursor for fetching the next page of results"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/v2/user-liked-casts": {
      "get": {
        "summary": "Retrieve liked casts by user FID",
        "operationId": "getUserLikedCasts",
        "parameters": [
          {
            "name": "fid",
            "in": "query",
            "description": "The user's fid (user id) whose liked casts are to be retrieved.",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 17838
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to limit per request.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved liked casts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "casts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Cast"
                          }
                        },
                        "next": {
                          "type": "object",
                          "properties": {
                            "cursor": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "result"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., missing required parameters)"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v1/analytics/miniapps/rollup": {
      "post": {
        "tags": [
          "DevTools",
          "Analytics"
        ],
        "summary": "Get analytics rollup for miniapps",
        "description": "Retrieves analytics data for miniapps over a specified date range,\nproviding various metrics broken down by configured dimensions.\n",
        "operationId": "getMiniAppAnalyticsRollup",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "dateRange",
                  "measures",
                  "restrictions"
                ],
                "properties": {
                  "dateRange": {
                    "type": "object",
                    "required": [
                      "startDate",
                      "endDate"
                    ],
                    "properties": {
                      "startDate": {
                        "type": "string",
                        "description": "Start date in format 'YYYY-MM-DD' or relative like '28daysago'",
                        "example": "28daysago"
                      },
                      "endDate": {
                        "type": "string",
                        "description": "End date in format 'YYYY-MM-DD' or relative like 'today'",
                        "example": "today"
                      }
                    }
                  },
                  "measures": {
                    "type": "array",
                    "description": "Analytics metrics to retrieve",
                    "items": {
                      "type": "string",
                      "enum": [
                        "miniapp_opens",
                        "miniapp_transactions",
                        "miniapp_users_w_transaction",
                        "miniapp_users_w_open",
                        "miniapp_users_w_notifications_enabled",
                        "miniapp_users_w_notifications_disabled",
                        "miniapp_users_w_app_favorited",
                        "miniapp_users_w_app_unfavorited"
                      ]
                    }
                  },
                  "restrictions": {
                    "type": "array",
                    "description": "Filtering restrictions for the data",
                    "items": {
                      "type": "object",
                      "required": [
                        "dimension",
                        "values"
                      ],
                      "properties": {
                        "dimension": {
                          "type": "string",
                          "description": "Dimension to filter on",
                          "example": "miniapp_domain"
                        },
                        "values": {
                          "type": "array",
                          "description": "Values to filter the dimension by",
                          "items": {
                            "type": "string",
                            "example": "lilnouns.auction"
                          }
                        }
                      }
                    }
                  },
                  "breakdownSettings": {
                    "type": "object",
                    "description": "Configuration for data breakdown",
                    "properties": {
                      "dimensions": {
                        "type": "array",
                        "description": "Dimensions to break down the data by",
                        "items": {
                          "type": "string",
                          "example": "date"
                        }
                      },
                      "order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order for the breakdown results",
                        "example": "asc"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful analytics rollup retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "rollup": {
                          "type": "object",
                          "properties": {
                            "dateRange": {
                              "type": "object",
                              "properties": {
                                "startDate": {
                                  "type": "string",
                                  "format": "date",
                                  "example": "2025-03-21"
                                },
                                "endDate": {
                                  "type": "string",
                                  "format": "date",
                                  "example": "2025-04-18"
                                }
                              }
                            },
                            "restrictions": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "example": "miniapp_domain"
                                  },
                                  "values": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "lilnouns.auction"
                                    }
                                  }
                                }
                              }
                            },
                            "totals": {
                              "type": "array",
                              "description": "Aggregate metric totals",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "example": "miniapp_opens"
                                  },
                                  "value": {
                                    "type": "integer",
                                    "example": 94
                                  }
                                }
                              }
                            },
                            "breakdown": {
                              "type": "array",
                              "description": "Metrics broken down by dimensions",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "slices": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "dimension": {
                                          "type": "string",
                                          "example": "date"
                                        },
                                        "values": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "example": "2025-03-23"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "measures": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "example": "miniapp_opens"
                                        },
                                        "value": {
                                          "type": "integer",
                                          "example": 1
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not authorized to access this data"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/v1/dev-tools/inspect-miniapp-url": {
      "get": {
        "tags": [
          "DevTools"
        ],
        "summary": "Inspect Mini App URL",
        "description": "Validates a Mini App URL by checking for proper embedding code and manifest,\nreturning information about its compatibility with the Warpcast platform.\n",
        "operationId": "inspectMiniAppUrl",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "description": "The URL of the Mini App to inspect",
            "schema": {
              "type": "string",
              "format": "uri",
              "example": "https://lilnouns.auction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful inspection of the Mini App URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "facts": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "format": "uri",
                              "description": "The URL that was inspected",
                              "example": "https://lilnouns.auction"
                            },
                            "statusCode": {
                              "type": "integer",
                              "description": "HTTP status code returned by the URL",
                              "example": 200
                            },
                            "miniAppEmbedPresent": {
                              "type": "boolean",
                              "description": "Indicates if the Mini App embedding code is present",
                              "example": true
                            },
                            "miniAppManifestPresent": {
                              "type": "boolean",
                              "description": "Indicates if the Mini App manifest is present",
                              "example": true
                            },
                            "miniAppEmbedValid": {
                              "type": "boolean",
                              "description": "Indicates if the Mini App embedding code is valid",
                              "example": true
                            },
                            "miniAppManifestValid": {
                              "type": "boolean",
                              "description": "Indicates if the Mini App manifest is valid",
                              "example": true
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid URL format"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not authorized to use this endpoint"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/v1/dev-tools/inspect-image-url": {
      "get": {
        "tags": [
          "DevTools"
        ],
        "summary": "Inspect an image URL",
        "description": "Retrieves metadata and information about an image at a specified URL, including size, cache settings, and loading time.",
        "operationId": "inspectImageUrl",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "The URL of the image to inspect"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Image inspection successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "facts": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "description": "The URL of the inspected image"
                            },
                            "statusCode": {
                              "type": "integer",
                              "description": "HTTP status code of the response"
                            },
                            "cacheHeader": {
                              "type": "string",
                              "description": "The cache header used by the image"
                            },
                            "cacheAge": {
                              "type": "integer",
                              "description": "Cache age in seconds"
                            },
                            "imageSizeBytes": {
                              "type": "integer",
                              "description": "Size of the image in bytes"
                            },
                            "imageLoadTimeMs": {
                              "type": "integer",
                              "description": "Time taken to load the image in milliseconds"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "result"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/dev-tools/export/miniapp-user-data": {
      "get": {
        "operationId": "exportMiniAppUserData",
        "summary": "Export user data for a specific mini app domain",
        "description": "Retrieves a list of users who have interacted with a specified mini app domain, including their Farcaster IDs and notification tokens.",
        "tags": [
          "DevTools"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The domain name of the mini app to export user data for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved mini app user data",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "description": "CSV formatted data with columns for fid, notificationToken, and added status"
                },
                "example": "fid,notificationToken,added\n"
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "fid": {
                                "type": "integer",
                                "description": "Farcaster ID of the user"
                              },
                              "notificationToken": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "Token used for sending notifications to the user"
                              },
                              "added": {
                                "type": "boolean",
                                "description": "Whether the user has been added/registered with the mini app"
                              }
                            },
                            "required": [
                              "fid",
                              "added"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "result"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient permissions or not the owner of the specified domain"
          },
          "404": {
            "description": "Domain not found or not registered as a mini app"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ProfilePicture": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "verified": {
            "type": "boolean"
          }
        }
      },
      "Bio": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "mentions": {
            "type": "array",
            "items": {}
          },
          "channelMentions": {
            "type": "array",
            "items": {}
          }
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "placeId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Profile": {
        "type": "object",
        "properties": {
          "bio": {
            "$ref": "#/components/schemas/Bio"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        }
      },
      "ViewerContext": {
        "type": "object",
        "properties": {
          "following": {
            "type": "boolean"
          },
          "followedBy": {
            "type": "boolean"
          },
          "enableNotifications": {
            "type": "boolean"
          },
          "canSendDirectCasts": {
            "type": "boolean"
          },
          "hasUploadedInboxKeys": {
            "type": "boolean"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "fid": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "pfp": {
            "$ref": "#/components/schemas/ProfilePicture"
          },
          "profile": {
            "$ref": "#/components/schemas/Profile"
          },
          "followerCount": {
            "type": "integer"
          },
          "followingCount": {
            "type": "integer"
          },
          "viewerContext": {
            "$ref": "#/components/schemas/ViewerContext"
          }
        }
      },
      "OnboardingState": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "hasOnboarding": {
            "type": "boolean"
          },
          "hasConfirmedEmail": {
            "type": "boolean"
          },
          "handledConnectAddress": {
            "type": "boolean"
          },
          "canRegisterUsername": {
            "type": "boolean"
          },
          "needsRegistrationPayment": {
            "type": "boolean"
          },
          "hasFid": {
            "type": "boolean"
          },
          "hasFname": {
            "type": "boolean"
          },
          "hasDelegatedSigner": {
            "type": "boolean"
          },
          "hasSetupProfile": {
            "type": "boolean"
          },
          "hasCompletedRegistration": {
            "type": "boolean"
          },
          "hasStorage": {
            "type": "boolean"
          },
          "handledPushNotificationsNudge": {
            "type": "boolean"
          },
          "handledContactsNudge": {
            "type": "boolean"
          },
          "handledInterestsNudge": {
            "type": "boolean"
          },
          "hasValidPaidInvite": {
            "type": "boolean"
          },
          "hasWarpcastWalletAddress": {
            "type": "boolean"
          },
          "hasPhone": {
            "type": "boolean"
          },
          "needsPhone": {
            "type": "boolean"
          },
          "sponsoredRegisterEligible": {
            "type": "boolean"
          },
          "geoRestricted": {
            "type": "boolean"
          }
        }
      },
      "OnboardingStateResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "state": {
                "$ref": "#/components/schemas/OnboardingState"
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Error message describing the issue"
                }
              }
            }
          }
        }
      },
      "UserWithExtras": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "type": "object",
            "properties": {
              "connectedAccounts": {
                "type": "array",
                "items": {}
              }
            }
          }
        ]
      },
      "UserExtras": {
        "type": "object",
        "properties": {
          "fid": {
            "type": "integer"
          },
          "custodyAddress": {
            "type": "string"
          },
          "ethWallets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "solanaWallets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserByFidResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/UserWithExtras"
              },
              "collectionsOwned": {
                "type": "array",
                "items": {}
              },
              "extras": {
                "$ref": "#/components/schemas/UserExtras"
              }
            }
          }
        }
      },
      "DirectCastMessageReaction": {
        "type": "object",
        "required": [
          "reaction",
          "count"
        ],
        "properties": {
          "reaction": {
            "type": "string",
            "description": "Emoji used for the reaction",
            "example": "🔥"
          },
          "count": {
            "type": "integer",
            "minimum": 1,
            "description": "Number of users who reacted with this emoji",
            "example": 3
          },
          "emoji": {
            "type": "string",
            "description": "Emoji used for the reaction (legacy field)"
          },
          "userFids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of Farcaster IDs who reacted"
          }
        }
      },
      "DirectCastMessageViewerContext": {
        "type": "object",
        "properties": {
          "isLastReadMessage": {
            "type": "boolean",
            "description": "Whether this is the last read message",
            "example": false
          },
          "focused": {
            "type": "boolean",
            "description": "Whether the message is focused",
            "example": false
          },
          "reactions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "User's reactions to this message"
          }
        }
      },
      "DirectCastMessage": {
        "type": "object",
        "required": [
          "conversationId",
          "senderFid",
          "messageId",
          "serverTimestamp",
          "type",
          "message",
          "hasMention",
          "reactions",
          "isPinned",
          "isDeleted",
          "senderContext"
        ],
        "properties": {
          "conversationId": {
            "type": "string",
            "description": "ID of the conversation this message belongs to"
          },
          "senderFid": {
            "type": "integer",
            "description": "Farcaster ID of the message sender"
          },
          "messageId": {
            "type": "string",
            "description": "Unique identifier for the message"
          },
          "serverTimestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Server timestamp when message was sent (Unix milliseconds)",
            "example": 1753112479748
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "image",
              "reaction",
              "link",
              "group_membership_addition",
              "pin_message"
            ],
            "description": "Type of the message",
            "example": "text"
          },
          "message": {
            "type": "string",
            "description": "Content of the message"
          },
          "hasMention": {
            "type": "boolean",
            "description": "Whether the message contains mentions",
            "example": false
          },
          "reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DirectCastMessageReaction"
            },
            "description": "List of reactions to the message"
          },
          "isPinned": {
            "type": "boolean",
            "description": "Whether the message is pinned",
            "example": false
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Whether the message is deleted",
            "example": false
          },
          "senderContext": {
            "$ref": "#/components/schemas/User"
          },
          "viewerContext": {
            "$ref": "#/components/schemas/DirectCastMessageViewerContext"
          },
          "inReplyTo": {
            "$ref": "#/components/schemas/DirectCastMessage"
          },
          "metadata": {
            "$ref": "#/components/schemas/DirectCastMessageMetadata"
          },
          "actionTargetUserContext": {
            "$ref": "#/components/schemas/User"
          },
          "isProgrammatic": {
            "type": "boolean",
            "description": "Whether the message was sent programmatically",
            "example": false
          },
          "mentions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DirectCastMessageMention"
            },
            "description": "List of mentions in the message"
          }
        }
      },
      "DirectCastMessageMetadata": {
        "type": "object",
        "properties": {
          "casts": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "description": "Cast metadata if message contains cast references"
          },
          "urls": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "description": "URL metadata if message contains links"
          },
          "medias": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "description": "Media metadata if message contains media"
          }
        }
      },
      "DirectCastMessageMention": {
        "type": "object",
        "required": [
          "user",
          "textIndex",
          "length"
        ],
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "textIndex": {
            "type": "integer",
            "description": "Starting index of the mention in the message text",
            "example": 19
          },
          "length": {
            "type": "integer",
            "description": "Length of the mention text",
            "example": 8
          }
        }
      },
      "DirectCastConversationViewerContext": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "lastReadAt": {
            "type": "integer"
          },
          "muted": {
            "type": "boolean"
          },
          "manuallyMarkedUnread": {
            "type": "boolean"
          },
          "pinned": {
            "type": "boolean"
          },
          "unreadCount": {
            "type": "integer"
          },
          "unreadMentionsCount": {
            "type": "integer"
          }
        }
      },
      "DirectCastConversation": {
        "type": "object",
        "required": [
          "conversationId",
          "isGroup",
          "createdAt",
          "viewerContext",
          "adminFids",
          "lastReadTime"
        ],
        "properties": {
          "conversationId": {
            "type": "string",
            "description": "Unique identifier for the conversation"
          },
          "name": {
            "type": "string",
            "description": "Name of the conversation (for group conversations)"
          },
          "description": {
            "type": "string",
            "description": "Description of the conversation"
          },
          "photoUrl": {
            "type": "string",
            "format": "uri",
            "description": "URL of the conversation photo"
          },
          "adminFids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of admin Farcaster IDs"
          },
          "lastReadTime": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of last read time (Unix milliseconds)",
            "example": 1741871452933
          },
          "isGroup": {
            "type": "boolean",
            "description": "Whether this is a group conversation",
            "example": true
          },
          "createdAt": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp when conversation was created (Unix milliseconds)",
            "example": 1709952982363
          },
          "lastMessage": {
            "$ref": "#/components/schemas/DirectCastMessage"
          },
          "viewerContext": {
            "$ref": "#/components/schemas/DirectCastConversationViewerContext"
          }
        }
      },
      "DirectCastInboxResult": {
        "type": "object",
        "required": [
          "hasArchived",
          "hasUnreadRequests",
          "requestsCount",
          "conversations"
        ],
        "properties": {
          "hasArchived": {
            "type": "boolean",
            "description": "Whether user has archived conversations",
            "example": false
          },
          "hasUnreadRequests": {
            "type": "boolean",
            "description": "Whether user has unread conversation requests",
            "example": false
          },
          "requestsCount": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of conversation requests",
            "example": 12
          },
          "conversations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DirectCastConversation"
            }
          }
        }
      },
      "DirectCastInboxResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "$ref": "#/components/schemas/DirectCastInboxResult"
          },
          "next": {
            "type": "object",
            "required": [
              "cursor"
            ],
            "properties": {
              "cursor": {
                "type": "string",
                "description": "Base64 encoded cursor for pagination"
              }
            }
          }
        }
      },
      "CastAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "octicon": {
            "type": "string"
          },
          "actionUrl": {
            "type": "string"
          },
          "action": {
            "type": "object",
            "properties": {
              "actionType": {
                "type": "string"
              },
              "postUrl": {
                "type": "string"
              }
            }
          }
        }
      },
      "UserAppContextResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "context": {
                "type": "object",
                "properties": {
                  "canAddLinks": {
                    "type": "boolean"
                  },
                  "showConnectedApps": {
                    "type": "boolean"
                  },
                  "signerRequestsEnabled": {
                    "type": "boolean"
                  },
                  "prompts": {
                    "type": "array",
                    "items": {}
                  },
                  "adminForChannelKeys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "modOfChannelKeys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "memberOfChannelKeys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "canEditAllChannels": {
                    "type": "boolean"
                  },
                  "canUploadVideo": {
                    "type": "boolean"
                  },
                  "statsigEnabled": {
                    "type": "boolean"
                  },
                  "shouldPromptForPushNotifications": {
                    "type": "boolean"
                  },
                  "shouldPromptForUserFollowsSyncContacts": {
                    "type": "boolean"
                  },
                  "castActions": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CastAction"
                    }
                  },
                  "canAddCastAction": {
                    "type": "boolean"
                  },
                  "enabledCastAction": {
                    "$ref": "#/components/schemas/CastAction"
                  },
                  "notificationTabsV2": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "enabledVideoAutoplay": {
                    "type": "boolean"
                  },
                  "regularCastByteLimit": {
                    "type": "integer"
                  },
                  "longCastByteLimit": {
                    "type": "integer"
                  },
                  "newUserStatus": {
                    "type": "object"
                  },
                  "country": {
                    "type": "string"
                  },
                  "higherClientEventSamplingRateEnabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "UserPreferencesResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "preferences": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        }
      },
      "Channel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "fastImageUrl": {
            "type": "string"
          },
          "feeds": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              }
            }
          },
          "description": {
            "type": "string"
          },
          "followerCount": {
            "type": "integer"
          },
          "memberCount": {
            "type": "integer"
          },
          "showCastSourceLabels": {
            "type": "boolean"
          },
          "showCastTags": {
            "type": "boolean"
          },
          "sectionRank": {
            "type": "integer"
          },
          "subscribable": {
            "type": "boolean"
          },
          "publicCasting": {
            "type": "boolean"
          },
          "inviteCode": {
            "type": "string"
          },
          "headerImageUrl": {
            "type": "string"
          },
          "headerAction": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "target": {
                "type": "string"
              }
            }
          },
          "headerActionMetadata": {
            "type": "object",
            "additionalProperties": true
          },
          "viewerContext": {
            "type": "object",
            "properties": {
              "following": {
                "type": "boolean"
              },
              "isMember": {
                "type": "boolean"
              },
              "hasUnseenItems": {
                "type": "boolean"
              },
              "favoritePosition": {
                "type": "integer"
              },
              "activityRank": {
                "type": "integer"
              },
              "canCast": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "HighlightedChannelsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "channels": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "viewerContext": {
                "type": "object",
                "properties": {
                  "defaultFeed": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "FeedItemsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                }
              },
              "latestMainCastTimestamp": {
                "type": "integer"
              },
              "feedTopSeenAtTimestamp": {
                "type": "integer"
              },
              "replaceFeed": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/UserWithExtras"
              },
              "collectionsOwned": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "extras": {
                "type": "object",
                "properties": {
                  "fid": {
                    "type": "integer"
                  },
                  "custodyAddress": {
                    "type": "string"
                  },
                  "ethWallets": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "solanaWallets": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SuggestedUsersResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "users": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                }
              },
              "next": {
                "type": "object",
                "properties": {
                  "cursor": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "FavoriteFramesResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "required": [
              "frames"
            ],
            "properties": {
              "frames": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "ChannelStreaksResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "UnseenCountsResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "notificationsCount": {
                "type": "integer"
              },
              "notificationTabs": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "tab",
                    "unseenCount"
                  ],
                  "properties": {
                    "tab": {
                      "type": "string"
                    },
                    "unseenCount": {
                      "type": "integer"
                    }
                  }
                }
              },
              "inboxCount": {
                "type": "integer"
              },
              "channelFeeds": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "channelKey",
                    "feedType",
                    "hasNewItems"
                  ],
                  "properties": {
                    "channelKey": {
                      "type": "string"
                    },
                    "feedType": {
                      "type": "string"
                    },
                    "hasNewItems": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "warpTransactionCount": {
                "type": "integer"
              }
            }
          }
        }
      },
      "UserThreadCastsResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "required": [
              "casts"
            ],
            "properties": {
              "casts": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "ChannelFollowersYouKnowResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "required": [
              "users",
              "totalCount"
            ],
            "properties": {
              "users": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                }
              },
              "totalCount": {
                "type": "integer"
              }
            }
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "required": [
              "success"
            ],
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Indicates whether the operation was successful"
              }
            }
          }
        }
      },
      "NotificationsResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "notifications": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "DirectCastConversationResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "conversation": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        }
      },
      "DirectCastConversationMessagesResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "required": [
              "messages"
            ],
            "properties": {
              "messages": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DirectCastMessage"
                }
              },
              "next": {
                "type": "object",
                "properties": {
                  "cursor": {
                    "type": "string",
                    "description": "Cursor for pagination to get next set of messages"
                  }
                },
                "additionalProperties": true,
                "description": "Pagination information for next page"
              }
            }
          }
        }
      },
      "DirectCastSendRequest": {
        "type": "object",
        "required": [
          "conversationId",
          "recipientFids",
          "messageId",
          "type",
          "message"
        ],
        "properties": {
          "conversationId": {
            "type": "string",
            "description": "ID of the conversation to send the message to",
            "example": "908811244217b112fcf727baf0975fc65fb65687fb3e562c3d16d4a457e05efd"
          },
          "recipientFids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Array of Farcaster IDs of message recipients",
            "example": [
              17838,
              861305
            ]
          },
          "messageId": {
            "type": "string",
            "description": "Unique identifier for the message",
            "example": "199b59f9c76097ba3a902625a1989870"
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "image",
              "reaction",
              "link"
            ],
            "description": "Type of the message",
            "example": "text"
          },
          "message": {
            "type": "string",
            "description": "Content of the message",
            "example": "sup"
          },
          "inReplyToId": {
            "type": "string",
            "description": "ID of the message this is replying to (optional)",
            "example": "2554cd70feb9365ff96996be5132ce77"
          }
        }
      },
      "DirectCastSendResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "required": [
              "success"
            ],
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Whether the message was sent successfully",
                "example": true
              }
            }
          }
        }
      },
      "DiscoverChannelsResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "channels": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "InvitesAvailableResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "required": [
              "allocatedInvitesCount",
              "availableInvitesCount"
            ],
            "properties": {
              "allocatedInvitesCount": {
                "type": "integer",
                "description": "Total number of invites allocated to the user"
              },
              "availableInvitesCount": {
                "type": "integer",
                "description": "Number of invites currently available to send"
              }
            }
          }
        }
      },
      "SponsoredInvitesResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "invites": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "additionalProperties": true
        }
      },
      "RewardsLeaderboardResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "required": [
              "leaderboard"
            ],
            "properties": {
              "leaderboard": {
                "type": "object",
                "required": [
                  "type",
                  "users"
                ],
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "additionalProperties": true
                        },
                        "score": {
                          "type": "integer"
                        },
                        "rank": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RewardsScoresResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "required": [
              "scores"
            ],
            "properties": {
              "scores": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "user": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "allTimeScore": {
                      "type": "integer"
                    },
                    "currentPeriodScore": {
                      "type": "integer"
                    },
                    "previousPeriodScore": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RewardsMetadataResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "required": [
              "metadata"
            ],
            "properties": {
              "metadata": {
                "type": "object",
                "required": [
                  "type",
                  "lastUpdateTimestamp",
                  "currentPeriodStartTimestamp",
                  "currentPeriodEndTimestamp"
                ],
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "lastUpdateTimestamp": {
                    "type": "integer"
                  },
                  "currentPeriodStartTimestamp": {
                    "type": "integer"
                  },
                  "currentPeriodEndTimestamp": {
                    "type": "integer"
                  },
                  "tiers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "proportionalPayout": {
                    "type": "object",
                    "properties": {
                      "numWinners": {
                        "type": "integer"
                      },
                      "totalRewardCents": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BookmarkedCast": {
        "type": "object",
        "additionalProperties": true
      },
      "BookmarkedCastsResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "bookmarks": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BookmarkedCast"
                }
              }
            }
          }
        }
      },
      "StarterPack": {
        "type": "object",
        "additionalProperties": true
      },
      "StarterPacksResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "starterPacks": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StarterPack"
                }
              }
            }
          }
        }
      },
      "StarterPackResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "starterPack": {
                "$ref": "#/components/schemas/StarterPack"
              }
            }
          }
        }
      },
      "StarterPackUsersResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "users": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "ChannelResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "channel": {
                "$ref": "#/components/schemas/Channel"
              }
            }
          }
        }
      },
      "ChannelUsersResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "users": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "UsersResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "required": [
              "users"
            ],
            "properties": {
              "users": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "UsersWithCountResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "required": [
              "users",
              "totalCount"
            ],
            "properties": {
              "users": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "totalCount": {
                "type": "integer"
              }
            }
          }
        }
      },
      "FrameApp": {
        "type": "object",
        "additionalProperties": true
      },
      "FrameAppsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "frames": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FrameApp"
                }
              }
            }
          }
        }
      },
      "VerifiedAddress": {
        "type": "object",
        "properties": {
          "fid": {
            "type": "integer"
          },
          "address": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer"
          },
          "version": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "isPrimary": {
            "type": "boolean"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MutedKeywordProperties": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "boolean"
          },
          "frames": {
            "type": "boolean"
          },
          "notifications": {
            "type": "boolean"
          }
        }
      },
      "MutedKeyword": {
        "type": "object",
        "required": [
          "keyword",
          "properties"
        ],
        "properties": {
          "keyword": {
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/MutedKeywordProperties"
          }
        }
      },
      "MutedKeywordsResponse": {
        "type": "object",
        "required": [
          "success",
          "result"
        ],
        "properties": {
          "success": {
            "type": "boolean"
          },
          "result": {
            "type": "object",
            "required": [
              "keywords",
              "mutedKeywords"
            ],
            "properties": {
              "keywords": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "mutedKeywords": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MutedKeyword"
                }
              }
            }
          }
        }
      },
      "CastHashResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "castHash": {
                "type": "string",
                "example": "0x750a7269b4a3b70e28d3f450df33487047d4927f"
              }
            }
          }
        }
      },
      "AttachEmbedsResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "CastRecastersResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "users": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "CastQuote": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "threadHash": {
            "type": "string"
          },
          "parentSource": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          },
          "author": {
            "$ref": "#/components/schemas/User"
          },
          "text": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer"
          }
        }
      },
      "CastQuotesResponse": {
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "quotes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CastQuote"
                }
              }
            }
          }
        }
      },
      "user-response_UserResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "SearchChannelsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "channels": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          }
        }
      },
      "DraftsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "drafts": {
                "type": "array",
                "items": {}
              }
            }
          }
        }
      },
      "DraftCast": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "embeds": {
            "type": "array",
            "items": {}
          }
        }
      },
      "Draft": {
        "type": "object",
        "properties": {
          "draftId": {
            "type": "string"
          },
          "casts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DraftCast"
            }
          }
        }
      },
      "DraftCreatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "draft": {
                "$ref": "#/components/schemas/Draft"
              }
            }
          }
        }
      },
      "ImageEmbed": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image"
            ]
          },
          "url": {
            "type": "string"
          },
          "sourceUrl": {
            "type": "string"
          },
          "media": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string"
              },
              "width": {
                "type": "integer"
              },
              "height": {
                "type": "integer"
              },
              "staticRaster": {
                "type": "string"
              },
              "mimeType": {
                "type": "string"
              }
            }
          },
          "alt": {
            "type": "string"
          }
        }
      },
      "UrlEmbed": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "url"
            ]
          },
          "openGraph": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "sourceUrl": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "useLargeImage": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "VideoEmbed": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "video"
            ]
          }
        }
      },
      "Recaster": {
        "type": "object",
        "properties": {
          "fid": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "recastHash": {
            "type": "string"
          }
        }
      },
      "Cast": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "Unique hash identifier for the cast"
          },
          "threadHash": {
            "type": "string",
            "description": "Hash identifier for the thread this cast belongs to"
          },
          "parentHash": {
            "type": "string",
            "description": "Hash identifier of the parent cast (if this is a reply)"
          },
          "parentSource": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "url"
                ]
              },
              "url": {
                "type": "string"
              }
            }
          },
          "author": {
            "$ref": "#/components/schemas/User"
          },
          "text": {
            "type": "string",
            "description": "The text content of the cast"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Unix timestamp in milliseconds"
          },
          "mentions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "embeds": {
            "type": "object",
            "properties": {
              "images": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImageEmbed"
                }
              },
              "urls": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UrlEmbed"
                }
              },
              "videos": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VideoEmbed"
                }
              },
              "unknowns": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "processedCastText": {
                "type": "string"
              },
              "groupInvites": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "replies": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer"
              }
            }
          },
          "reactions": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer"
              }
            }
          },
          "recasts": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer"
              },
              "recasters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Recaster"
                }
              }
            }
          },
          "watches": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer"
              }
            }
          },
          "recast": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "imageUrl": {
                  "type": "string"
                }
              }
            }
          },
          "quoteCount": {
            "type": "integer"
          },
          "combinedRecastCount": {
            "type": "integer"
          },
          "channel": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "imageUrl": {
                "type": "string"
              },
              "authorContext": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string"
                  },
                  "restricted": {
                    "type": "boolean"
                  },
                  "banned": {
                    "type": "boolean"
                  }
                }
              },
              "authorRole": {
                "type": "string"
              }
            }
          },
          "viewerContext": {
            "type": "object",
            "properties": {
              "reacted": {
                "type": "boolean"
              },
              "recast": {
                "type": "boolean"
              },
              "bookmarked": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "CastCreatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "cast": {
                "$ref": "#/components/schemas/Cast"
              }
            }
          }
        }
      },
      "RawChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "descriptionMentions": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "descriptionMentionsPositions": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "imageUrl": {
            "type": "string"
          },
          "headerImageUrl": {
            "type": "string"
          },
          "leadFid": {
            "type": "integer"
          },
          "moderatorFids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "createdAt": {
            "type": "integer"
          },
          "followerCount": {
            "type": "integer"
          },
          "memberCount": {
            "type": "integer"
          },
          "pinnedCastHash": {
            "type": "string"
          },
          "publicCasting": {
            "type": "boolean"
          },
          "externalLink": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        }
      },
      "ChannelListResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "channels": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RawChannel"
                }
              }
            }
          }
        }
      },
      "RawChannelResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "channel": {
                "$ref": "#/components/schemas/RawChannel"
              }
            }
          }
        }
      },
      "ChannelFollower": {
        "type": "object",
        "properties": {
          "fid": {
            "type": "integer"
          },
          "followedAt": {
            "type": "integer"
          }
        }
      },
      "ChannelFollowersResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "users": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChannelFollower"
                }
              },
              "next": {
                "type": "object",
                "properties": {
                  "cursor": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "ChannelFollowStatus": {
        "type": "object",
        "properties": {
          "following": {
            "type": "boolean"
          },
          "followedAt": {
            "type": "integer"
          }
        }
      },
      "ChannelFollowStatusResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ChannelFollowStatus"
          }
        }
      },
      "Action": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "aboutUrl": {
            "type": "string",
            "format": "uri"
          },
          "imageUrl": {
            "type": "string",
            "format": "uri"
          },
          "actionUrl": {
            "type": "string",
            "format": "uri"
          },
          "action": {
            "type": "object",
            "properties": {
              "actionType": {
                "type": "string",
                "enum": [
                  "post",
                  "get",
                  "put",
                  "delete"
                ]
              },
              "postUrl": {
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      },
      "Winner": {
        "type": "object",
        "properties": {
          "fid": {
            "type": "integer",
            "description": "The fid of the winner"
          },
          "domain": {
            "type": "string",
            "description": "The domain of the winner"
          },
          "frameName": {
            "type": "string",
            "description": "The name of the frame (mini app)"
          },
          "score": {
            "type": "integer",
            "description": "The score of the winner"
          },
          "rank": {
            "type": "integer",
            "description": "The rank of the winner"
          },
          "rewardCents": {
            "type": "integer",
            "description": "The reward amount in cents"
          },
          "walletAddress": {
            "type": "string",
            "description": "The wallet address of the winner (optional)"
          }
        }
      },
      "Frame": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "iconUrl": {
            "type": "string"
          },
          "homeUrl": {
            "type": "string"
          },
          "splashImageUrl": {
            "type": "string"
          },
          "splashBackgroundColor": {
            "type": "string"
          },
          "buttonTitle": {
            "type": [
              "string",
              "null"
            ]
          },
          "imageUrl": {
            "type": [
              "string",
              "null"
            ]
          },
          "supportsNotifications": {
            "type": "boolean"
          },
          "viewerContext": {
            "type": "object",
            "additionalProperties": true
          },
          "author": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "AppsByAuthorResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "frames": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Frame"
                }
              }
            }
          }
        }
      },
      "ApiKey": {
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "expiresAt",
          "tag",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the API key"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp when the API key was created (in milliseconds since epoch)"
          },
          "expiresAt": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp when the API key expires (in milliseconds since epoch)"
          },
          "revokedAt": {
            "type": [
              "string",
              "null"
            ],
            "format": "int64",
            "description": "Timestamp when the API key was revoked, if applicable (in milliseconds since epoch)"
          },
          "tag": {
            "type": "string",
            "description": "Short identifier tag for the API key"
          },
          "description": {
            "type": "string",
            "description": "User-provided description of the API key's purpose"
          }
        }
      }
    },
    "parameters": {
      "fidParam": {
        "name": "fid",
        "in": "query",
        "required": true,
        "schema": {
          "type": "integer"
        },
        "description": "The user's FID (Farcaster ID)"
      },
      "limitParam": {
        "name": "limit",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "Maximum number of items to return"
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "Authentication is required or failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}